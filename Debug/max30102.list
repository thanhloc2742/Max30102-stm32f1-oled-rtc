
max30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008230  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b58  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  20000000  08009ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001520  20000124  08009fc4  00020124  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001644  08009fc4  00021644  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012472  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029d2  00000000  00000000  000325bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010b8  00000000  00000000  00034f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f80  00000000  00000000  00036050  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008ce5  00000000  00000000  00036fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004ee6  00000000  00000000  0003fcb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00044b9b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004994  00000000  00000000  00044c18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000124 	.word	0x20000124
 800012c:	00000000 	.word	0x00000000
 8000130:	08008328 	.word	0x08008328

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000128 	.word	0x20000128
 800014c:	08008328 	.word	0x08008328

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2f>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a28:	bf24      	itt	cs
 8000a2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a32:	d90d      	bls.n	8000a50 <__aeabi_d2f+0x30>
 8000a34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a48:	bf08      	it	eq
 8000a4a:	f020 0001 	biceq.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a54:	d121      	bne.n	8000a9a <__aeabi_d2f+0x7a>
 8000a56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a5a:	bfbc      	itt	lt
 8000a5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	4770      	bxlt	lr
 8000a62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6a:	f1c2 0218 	rsb	r2, r2, #24
 8000a6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a76:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7a:	bf18      	it	ne
 8000a7c:	f040 0001 	orrne.w	r0, r0, #1
 8000a80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a8c:	ea40 000c 	orr.w	r0, r0, ip
 8000a90:	fa23 f302 	lsr.w	r3, r3, r2
 8000a94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a98:	e7cc      	b.n	8000a34 <__aeabi_d2f+0x14>
 8000a9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9e:	d107      	bne.n	8000ab0 <__aeabi_d2f+0x90>
 8000aa0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa4:	bf1e      	ittt	ne
 8000aa6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aaa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aae:	4770      	bxne	lr
 8000ab0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_frsub>:
 8000ac0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac4:	e002      	b.n	8000acc <__addsf3>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_fsub>:
 8000ac8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000acc <__addsf3>:
 8000acc:	0042      	lsls	r2, r0, #1
 8000ace:	bf1f      	itttt	ne
 8000ad0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad4:	ea92 0f03 	teqne	r2, r3
 8000ad8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000adc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae0:	d06a      	beq.n	8000bb8 <__addsf3+0xec>
 8000ae2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aea:	bfc1      	itttt	gt
 8000aec:	18d2      	addgt	r2, r2, r3
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	4048      	eorgt	r0, r1
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	bfb8      	it	lt
 8000af6:	425b      	neglt	r3, r3
 8000af8:	2b19      	cmp	r3, #25
 8000afa:	bf88      	it	hi
 8000afc:	4770      	bxhi	lr
 8000afe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b1a:	bf18      	it	ne
 8000b1c:	4249      	negne	r1, r1
 8000b1e:	ea92 0f03 	teq	r2, r3
 8000b22:	d03f      	beq.n	8000ba4 <__addsf3+0xd8>
 8000b24:	f1a2 0201 	sub.w	r2, r2, #1
 8000b28:	fa41 fc03 	asr.w	ip, r1, r3
 8000b2c:	eb10 000c 	adds.w	r0, r0, ip
 8000b30:	f1c3 0320 	rsb	r3, r3, #32
 8000b34:	fa01 f103 	lsl.w	r1, r1, r3
 8000b38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3c:	d502      	bpl.n	8000b44 <__addsf3+0x78>
 8000b3e:	4249      	negs	r1, r1
 8000b40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b48:	d313      	bcc.n	8000b72 <__addsf3+0xa6>
 8000b4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4e:	d306      	bcc.n	8000b5e <__addsf3+0x92>
 8000b50:	0840      	lsrs	r0, r0, #1
 8000b52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b56:	f102 0201 	add.w	r2, r2, #1
 8000b5a:	2afe      	cmp	r2, #254	; 0xfe
 8000b5c:	d251      	bcs.n	8000c02 <__addsf3+0x136>
 8000b5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b66:	bf08      	it	eq
 8000b68:	f020 0001 	biceq.w	r0, r0, #1
 8000b6c:	ea40 0003 	orr.w	r0, r0, r3
 8000b70:	4770      	bx	lr
 8000b72:	0049      	lsls	r1, r1, #1
 8000b74:	eb40 0000 	adc.w	r0, r0, r0
 8000b78:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	d1ed      	bne.n	8000b5e <__addsf3+0x92>
 8000b82:	fab0 fc80 	clz	ip, r0
 8000b86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b92:	bfaa      	itet	ge
 8000b94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b98:	4252      	neglt	r2, r2
 8000b9a:	4318      	orrge	r0, r3
 8000b9c:	bfbc      	itt	lt
 8000b9e:	40d0      	lsrlt	r0, r2
 8000ba0:	4318      	orrlt	r0, r3
 8000ba2:	4770      	bx	lr
 8000ba4:	f092 0f00 	teq	r2, #0
 8000ba8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bac:	bf06      	itte	eq
 8000bae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bb2:	3201      	addeq	r2, #1
 8000bb4:	3b01      	subne	r3, #1
 8000bb6:	e7b5      	b.n	8000b24 <__addsf3+0x58>
 8000bb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc0:	bf18      	it	ne
 8000bc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc6:	d021      	beq.n	8000c0c <__addsf3+0x140>
 8000bc8:	ea92 0f03 	teq	r2, r3
 8000bcc:	d004      	beq.n	8000bd8 <__addsf3+0x10c>
 8000bce:	f092 0f00 	teq	r2, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	4608      	moveq	r0, r1
 8000bd6:	4770      	bx	lr
 8000bd8:	ea90 0f01 	teq	r0, r1
 8000bdc:	bf1c      	itt	ne
 8000bde:	2000      	movne	r0, #0
 8000be0:	4770      	bxne	lr
 8000be2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be6:	d104      	bne.n	8000bf2 <__addsf3+0x126>
 8000be8:	0040      	lsls	r0, r0, #1
 8000bea:	bf28      	it	cs
 8000bec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf0:	4770      	bx	lr
 8000bf2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf6:	bf3c      	itt	cc
 8000bf8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bxcc	lr
 8000bfe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	4770      	bx	lr
 8000c0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c10:	bf16      	itet	ne
 8000c12:	4608      	movne	r0, r1
 8000c14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c18:	4601      	movne	r1, r0
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	bf06      	itte	eq
 8000c1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c22:	ea90 0f01 	teqeq	r0, r1
 8000c26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_ui2f>:
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e004      	b.n	8000c3c <__aeabi_i2f+0x8>
 8000c32:	bf00      	nop

08000c34 <__aeabi_i2f>:
 8000c34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c38:	bf48      	it	mi
 8000c3a:	4240      	negmi	r0, r0
 8000c3c:	ea5f 0c00 	movs.w	ip, r0
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c48:	4601      	mov	r1, r0
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	e01c      	b.n	8000c8a <__aeabi_l2f+0x2a>

08000c50 <__aeabi_ul2f>:
 8000c50:	ea50 0201 	orrs.w	r2, r0, r1
 8000c54:	bf08      	it	eq
 8000c56:	4770      	bxeq	lr
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e00a      	b.n	8000c74 <__aeabi_l2f+0x14>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_l2f>:
 8000c60:	ea50 0201 	orrs.w	r2, r0, r1
 8000c64:	bf08      	it	eq
 8000c66:	4770      	bxeq	lr
 8000c68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__aeabi_l2f+0x14>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	ea5f 0c01 	movs.w	ip, r1
 8000c78:	bf02      	ittt	eq
 8000c7a:	4684      	moveq	ip, r0
 8000c7c:	4601      	moveq	r1, r0
 8000c7e:	2000      	moveq	r0, #0
 8000c80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c84:	bf08      	it	eq
 8000c86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8e:	fabc f28c 	clz	r2, ip
 8000c92:	3a08      	subs	r2, #8
 8000c94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c98:	db10      	blt.n	8000cbc <__aeabi_l2f+0x5c>
 8000c9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca4:	f1c2 0220 	rsb	r2, r2, #32
 8000ca8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cac:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb0:	eb43 0002 	adc.w	r0, r3, r2
 8000cb4:	bf08      	it	eq
 8000cb6:	f020 0001 	biceq.w	r0, r0, #1
 8000cba:	4770      	bx	lr
 8000cbc:	f102 0220 	add.w	r2, r2, #32
 8000cc0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc4:	f1c2 0220 	rsb	r2, r2, #32
 8000cc8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ccc:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd0:	eb43 0002 	adc.w	r0, r3, r2
 8000cd4:	bf08      	it	eq
 8000cd6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cda:	4770      	bx	lr

08000cdc <__aeabi_fmul>:
 8000cdc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce4:	bf1e      	ittt	ne
 8000ce6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cea:	ea92 0f0c 	teqne	r2, ip
 8000cee:	ea93 0f0c 	teqne	r3, ip
 8000cf2:	d06f      	beq.n	8000dd4 <__aeabi_fmul+0xf8>
 8000cf4:	441a      	add	r2, r3
 8000cf6:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfa:	0240      	lsls	r0, r0, #9
 8000cfc:	bf18      	it	ne
 8000cfe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d02:	d01e      	beq.n	8000d42 <__aeabi_fmul+0x66>
 8000d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d10:	fba0 3101 	umull	r3, r1, r0, r1
 8000d14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d1c:	bf3e      	ittt	cc
 8000d1e:	0049      	lslcc	r1, r1, #1
 8000d20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d24:	005b      	lslcc	r3, r3, #1
 8000d26:	ea40 0001 	orr.w	r0, r0, r1
 8000d2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2e:	2afd      	cmp	r2, #253	; 0xfd
 8000d30:	d81d      	bhi.n	8000d6e <__aeabi_fmul+0x92>
 8000d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	4770      	bx	lr
 8000d42:	f090 0f00 	teq	r0, #0
 8000d46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4a:	bf08      	it	eq
 8000d4c:	0249      	lsleq	r1, r1, #9
 8000d4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d56:	3a7f      	subs	r2, #127	; 0x7f
 8000d58:	bfc2      	ittt	gt
 8000d5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d62:	4770      	bxgt	lr
 8000d64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	dc5d      	bgt.n	8000e2c <__aeabi_fmul+0x150>
 8000d70:	f112 0f19 	cmn.w	r2, #25
 8000d74:	bfdc      	itt	le
 8000d76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d7a:	4770      	bxle	lr
 8000d7c:	f1c2 0200 	rsb	r2, r2, #0
 8000d80:	0041      	lsls	r1, r0, #1
 8000d82:	fa21 f102 	lsr.w	r1, r1, r2
 8000d86:	f1c2 0220 	rsb	r2, r2, #32
 8000d8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d92:	f140 0000 	adc.w	r0, r0, #0
 8000d96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9a:	bf08      	it	eq
 8000d9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da0:	4770      	bx	lr
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0040      	lsleq	r0, r0, #1
 8000dae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db2:	3a01      	subeq	r2, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xce>
 8000db6:	ea40 000c 	orr.w	r0, r0, ip
 8000dba:	f093 0f00 	teq	r3, #0
 8000dbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0049      	lsleq	r1, r1, #1
 8000dc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dca:	3b01      	subeq	r3, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xe6>
 8000dce:	ea41 010c 	orr.w	r1, r1, ip
 8000dd2:	e78f      	b.n	8000cf4 <__aeabi_fmul+0x18>
 8000dd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	bf18      	it	ne
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d00a      	beq.n	8000dfa <__aeabi_fmul+0x11e>
 8000de4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de8:	bf18      	it	ne
 8000dea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	d1d8      	bne.n	8000da2 <__aeabi_fmul+0xc6>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	bf17      	itett	ne
 8000e00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e04:	4608      	moveq	r0, r1
 8000e06:	f091 0f00 	teqne	r1, #0
 8000e0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0e:	d014      	beq.n	8000e3a <__aeabi_fmul+0x15e>
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d101      	bne.n	8000e1a <__aeabi_fmul+0x13e>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	d10f      	bne.n	8000e3a <__aeabi_fmul+0x15e>
 8000e1a:	ea93 0f0c 	teq	r3, ip
 8000e1e:	d103      	bne.n	8000e28 <__aeabi_fmul+0x14c>
 8000e20:	024b      	lsls	r3, r1, #9
 8000e22:	bf18      	it	ne
 8000e24:	4608      	movne	r0, r1
 8000e26:	d108      	bne.n	8000e3a <__aeabi_fmul+0x15e>
 8000e28:	ea80 0001 	eor.w	r0, r0, r1
 8000e2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e38:	4770      	bx	lr
 8000e3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_fdiv>:
 8000e44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e4c:	bf1e      	ittt	ne
 8000e4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e52:	ea92 0f0c 	teqne	r2, ip
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d069      	beq.n	8000f30 <__aeabi_fdiv+0xec>
 8000e5c:	eba2 0203 	sub.w	r2, r2, r3
 8000e60:	ea80 0c01 	eor.w	ip, r0, r1
 8000e64:	0249      	lsls	r1, r1, #9
 8000e66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6a:	d037      	beq.n	8000edc <__aeabi_fdiv+0x98>
 8000e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	bf38      	it	cc
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	bf24      	itt	cs
 8000e8e:	1a5b      	subcs	r3, r3, r1
 8000e90:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e98:	bf24      	itt	cs
 8000e9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea6:	bf24      	itt	cs
 8000ea8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	bf18      	it	ne
 8000ec2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec6:	d1e0      	bne.n	8000e8a <__aeabi_fdiv+0x46>
 8000ec8:	2afd      	cmp	r2, #253	; 0xfd
 8000eca:	f63f af50 	bhi.w	8000d6e <__aeabi_fmul+0x92>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed4:	bf08      	it	eq
 8000ed6:	f020 0001 	biceq.w	r0, r0, #1
 8000eda:	4770      	bx	lr
 8000edc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee4:	327f      	adds	r2, #127	; 0x7f
 8000ee6:	bfc2      	ittt	gt
 8000ee8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef0:	4770      	bxgt	lr
 8000ef2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	3a01      	subs	r2, #1
 8000efc:	e737      	b.n	8000d6e <__aeabi_fmul+0x92>
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xc2>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xda>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e795      	b.n	8000e5c <__aeabi_fdiv+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	d108      	bne.n	8000f4c <__aeabi_fdiv+0x108>
 8000f3a:	0242      	lsls	r2, r0, #9
 8000f3c:	f47f af7d 	bne.w	8000e3a <__aeabi_fmul+0x15e>
 8000f40:	ea93 0f0c 	teq	r3, ip
 8000f44:	f47f af70 	bne.w	8000e28 <__aeabi_fmul+0x14c>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e776      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f4c:	ea93 0f0c 	teq	r3, ip
 8000f50:	d104      	bne.n	8000f5c <__aeabi_fdiv+0x118>
 8000f52:	024b      	lsls	r3, r1, #9
 8000f54:	f43f af4c 	beq.w	8000df0 <__aeabi_fmul+0x114>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e76e      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1ca      	bne.n	8000efe <__aeabi_fdiv+0xba>
 8000f68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f6c:	f47f af5c 	bne.w	8000e28 <__aeabi_fmul+0x14c>
 8000f70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f74:	f47f af3c 	bne.w	8000df0 <__aeabi_fmul+0x114>
 8000f78:	e75f      	b.n	8000e3a <__aeabi_fmul+0x15e>
 8000f7a:	bf00      	nop

08000f7c <__gesf2>:
 8000f7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f80:	e006      	b.n	8000f90 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__lesf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	e002      	b.n	8000f90 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__cmpsf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa0:	bf18      	it	ne
 8000fa2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fa6:	d011      	beq.n	8000fcc <__cmpsf2+0x40>
 8000fa8:	b001      	add	sp, #4
 8000faa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fae:	bf18      	it	ne
 8000fb0:	ea90 0f01 	teqne	r0, r1
 8000fb4:	bf58      	it	pl
 8000fb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fba:	bf88      	it	hi
 8000fbc:	17c8      	asrhi	r0, r1, #31
 8000fbe:	bf38      	it	cc
 8000fc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc4:	bf18      	it	ne
 8000fc6:	f040 0001 	orrne.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd0:	d102      	bne.n	8000fd8 <__cmpsf2+0x4c>
 8000fd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fd6:	d105      	bne.n	8000fe4 <__cmpsf2+0x58>
 8000fd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fdc:	d1e4      	bne.n	8000fa8 <__cmpsf2+0x1c>
 8000fde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe2:	d0e1      	beq.n	8000fa8 <__cmpsf2+0x1c>
 8000fe4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <__aeabi_cfrcmple>:
 8000fec:	4684      	mov	ip, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4661      	mov	r1, ip
 8000ff2:	e7ff      	b.n	8000ff4 <__aeabi_cfcmpeq>

08000ff4 <__aeabi_cfcmpeq>:
 8000ff4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ff6:	f7ff ffc9 	bl	8000f8c <__cmpsf2>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	bf48      	it	mi
 8000ffe:	f110 0f00 	cmnmi.w	r0, #0
 8001002:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001004 <__aeabi_fcmpeq>:
 8001004:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001008:	f7ff fff4 	bl	8000ff4 <__aeabi_cfcmpeq>
 800100c:	bf0c      	ite	eq
 800100e:	2001      	moveq	r0, #1
 8001010:	2000      	movne	r0, #0
 8001012:	f85d fb08 	ldr.w	pc, [sp], #8
 8001016:	bf00      	nop

08001018 <__aeabi_fcmplt>:
 8001018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800101c:	f7ff ffea 	bl	8000ff4 <__aeabi_cfcmpeq>
 8001020:	bf34      	ite	cc
 8001022:	2001      	movcc	r0, #1
 8001024:	2000      	movcs	r0, #0
 8001026:	f85d fb08 	ldr.w	pc, [sp], #8
 800102a:	bf00      	nop

0800102c <__aeabi_fcmple>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff ffe0 	bl	8000ff4 <__aeabi_cfcmpeq>
 8001034:	bf94      	ite	ls
 8001036:	2001      	movls	r0, #1
 8001038:	2000      	movhi	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_fcmpge>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffd2 	bl	8000fec <__aeabi_cfrcmple>
 8001048:	bf94      	ite	ls
 800104a:	2001      	movls	r0, #1
 800104c:	2000      	movhi	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmpgt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffc8 	bl	8000fec <__aeabi_cfrcmple>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_f2uiz>:
 8001068:	0042      	lsls	r2, r0, #1
 800106a:	d20e      	bcs.n	800108a <__aeabi_f2uiz+0x22>
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30b      	bcc.n	800108a <__aeabi_f2uiz+0x22>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d409      	bmi.n	8001090 <__aeabi_f2uiz+0x28>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	fa23 f002 	lsr.w	r0, r3, r2
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2uiz+0x32>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d102      	bne.n	80010a0 <__aeabi_f2uiz+0x38>
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	4770      	bx	lr
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f943 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f006 fe1a 	bl	8007cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f95b 	bl	80013ae <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f923 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000028 	.word	0x20000028
 800112c:	20000004 	.word	0x20000004
 8001130:	20000000 	.word	0x20000000

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000004 	.word	0x20000004
 8001154:	20000564 	.word	0x20000564

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000564 	.word	0x20000564

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff fff0 	bl	8001158 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_Delay+0x40>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffe0 	bl	8001158 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad2      	subs	r2, r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d3f7      	bcc.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000004 	.word	0x20000004

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_EnableIRQ+0x34>)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	095b      	lsrs	r3, r3, #5
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	f002 021f 	and.w	r2, r2, #31
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	490d      	ldr	r1, [pc, #52]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	4909      	ldr	r1, [pc, #36]	; (800129c <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	2201      	movs	r2, #1
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	1e5a      	subs	r2, r3, #1
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	401a      	ands	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e6:	2101      	movs	r1, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	1e59      	subs	r1, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff92 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff2f 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff44 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff92 	bl	80012a0 <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff61 	bl	800124c <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff37 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa2 	bl	8001300 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d005      	beq.n	80013ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2204      	movs	r2, #4
 80013e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e057      	b.n	800149a <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	f022 020e 	bic.w	r2, r2, #14
 80013f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	f022 0201 	bic.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800140a:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <HAL_DMA_Abort_IT+0xdc>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_DMA_Abort_IT+0xe0>)
 8001414:	4299      	cmp	r1, r3
 8001416:	d02e      	beq.n	8001476 <HAL_DMA_Abort_IT+0xae>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <HAL_DMA_Abort_IT+0xe4>)
 8001420:	4299      	cmp	r1, r3
 8001422:	d026      	beq.n	8001472 <HAL_DMA_Abort_IT+0xaa>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_DMA_Abort_IT+0xe8>)
 800142c:	4299      	cmp	r1, r3
 800142e:	d01d      	beq.n	800146c <HAL_DMA_Abort_IT+0xa4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <HAL_DMA_Abort_IT+0xec>)
 8001438:	4299      	cmp	r1, r3
 800143a:	d014      	beq.n	8001466 <HAL_DMA_Abort_IT+0x9e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_DMA_Abort_IT+0xf0>)
 8001444:	4299      	cmp	r1, r3
 8001446:	d00b      	beq.n	8001460 <HAL_DMA_Abort_IT+0x98>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_DMA_Abort_IT+0xf4>)
 8001450:	4299      	cmp	r1, r3
 8001452:	d102      	bne.n	800145a <HAL_DMA_Abort_IT+0x92>
 8001454:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001458:	e00e      	b.n	8001478 <HAL_DMA_Abort_IT+0xb0>
 800145a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800145e:	e00b      	b.n	8001478 <HAL_DMA_Abort_IT+0xb0>
 8001460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001464:	e008      	b.n	8001478 <HAL_DMA_Abort_IT+0xb0>
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	e005      	b.n	8001478 <HAL_DMA_Abort_IT+0xb0>
 800146c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001470:	e002      	b.n	8001478 <HAL_DMA_Abort_IT+0xb0>
 8001472:	2310      	movs	r3, #16
 8001474:	e000      	b.n	8001478 <HAL_DMA_Abort_IT+0xb0>
 8001476:	2301      	movs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
    } 
  }
  return status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020008 	.word	0x40020008
 80014ac:	4002001c 	.word	0x4002001c
 80014b0:	40020030 	.word	0x40020030
 80014b4:	40020044 	.word	0x40020044
 80014b8:	40020058 	.word	0x40020058
 80014bc:	4002006c 	.word	0x4002006c

080014c0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b08b      	sub	sp, #44	; 0x2c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	e127      	b.n	800173c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ec:	2201      	movs	r2, #1
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8116 	bne.w	8001736 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b12      	cmp	r3, #18
 8001510:	d034      	beq.n	800157c <HAL_GPIO_Init+0xa4>
 8001512:	2b12      	cmp	r3, #18
 8001514:	d80d      	bhi.n	8001532 <HAL_GPIO_Init+0x5a>
 8001516:	2b02      	cmp	r3, #2
 8001518:	d02b      	beq.n	8001572 <HAL_GPIO_Init+0x9a>
 800151a:	2b02      	cmp	r3, #2
 800151c:	d804      	bhi.n	8001528 <HAL_GPIO_Init+0x50>
 800151e:	2b00      	cmp	r3, #0
 8001520:	d031      	beq.n	8001586 <HAL_GPIO_Init+0xae>
 8001522:	2b01      	cmp	r3, #1
 8001524:	d01c      	beq.n	8001560 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001526:	e048      	b.n	80015ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001528:	2b03      	cmp	r3, #3
 800152a:	d043      	beq.n	80015b4 <HAL_GPIO_Init+0xdc>
 800152c:	2b11      	cmp	r3, #17
 800152e:	d01b      	beq.n	8001568 <HAL_GPIO_Init+0x90>
          break;
 8001530:	e043      	b.n	80015ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001532:	4a89      	ldr	r2, [pc, #548]	; (8001758 <HAL_GPIO_Init+0x280>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d026      	beq.n	8001586 <HAL_GPIO_Init+0xae>
 8001538:	4a87      	ldr	r2, [pc, #540]	; (8001758 <HAL_GPIO_Init+0x280>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d806      	bhi.n	800154c <HAL_GPIO_Init+0x74>
 800153e:	4a87      	ldr	r2, [pc, #540]	; (800175c <HAL_GPIO_Init+0x284>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d020      	beq.n	8001586 <HAL_GPIO_Init+0xae>
 8001544:	4a86      	ldr	r2, [pc, #536]	; (8001760 <HAL_GPIO_Init+0x288>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01d      	beq.n	8001586 <HAL_GPIO_Init+0xae>
          break;
 800154a:	e036      	b.n	80015ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800154c:	4a85      	ldr	r2, [pc, #532]	; (8001764 <HAL_GPIO_Init+0x28c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d019      	beq.n	8001586 <HAL_GPIO_Init+0xae>
 8001552:	4a85      	ldr	r2, [pc, #532]	; (8001768 <HAL_GPIO_Init+0x290>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d016      	beq.n	8001586 <HAL_GPIO_Init+0xae>
 8001558:	4a84      	ldr	r2, [pc, #528]	; (800176c <HAL_GPIO_Init+0x294>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0xae>
          break;
 800155e:	e02c      	b.n	80015ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	623b      	str	r3, [r7, #32]
          break;
 8001566:	e028      	b.n	80015ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	3304      	adds	r3, #4
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e023      	b.n	80015ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	3308      	adds	r3, #8
 8001578:	623b      	str	r3, [r7, #32]
          break;
 800157a:	e01e      	b.n	80015ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	330c      	adds	r3, #12
 8001582:	623b      	str	r3, [r7, #32]
          break;
 8001584:	e019      	b.n	80015ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800158e:	2304      	movs	r3, #4
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e012      	b.n	80015ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d105      	bne.n	80015a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800159c:	2308      	movs	r3, #8
 800159e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	611a      	str	r2, [r3, #16]
          break;
 80015a6:	e008      	b.n	80015ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	615a      	str	r2, [r3, #20]
          break;
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2bff      	cmp	r3, #255	; 0xff
 80015be:	d801      	bhi.n	80015c4 <HAL_GPIO_Init+0xec>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	e001      	b.n	80015c8 <HAL_GPIO_Init+0xf0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3304      	adds	r3, #4
 80015c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2bff      	cmp	r3, #255	; 0xff
 80015ce:	d802      	bhi.n	80015d6 <HAL_GPIO_Init+0xfe>
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x104>
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	3b08      	subs	r3, #8
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	210f      	movs	r1, #15
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	401a      	ands	r2, r3
 80015ee:	6a39      	ldr	r1, [r7, #32]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8096 	beq.w	8001736 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800160a:	4a59      	ldr	r2, [pc, #356]	; (8001770 <HAL_GPIO_Init+0x298>)
 800160c:	4b58      	ldr	r3, [pc, #352]	; (8001770 <HAL_GPIO_Init+0x298>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_GPIO_Init+0x298>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001622:	4a54      	ldr	r2, [pc, #336]	; (8001774 <HAL_GPIO_Init+0x29c>)
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4013      	ands	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_GPIO_Init+0x2a0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0x19e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4a      	ldr	r2, [pc, #296]	; (800177c <HAL_GPIO_Init+0x2a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_Init+0x19a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a49      	ldr	r2, [pc, #292]	; (8001780 <HAL_GPIO_Init+0x2a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x196>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_GPIO_Init+0x2ac>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_GPIO_Init+0x192>
 8001666:	2303      	movs	r3, #3
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x1a0>
 800166a:	2304      	movs	r3, #4
 800166c:	e004      	b.n	8001678 <HAL_GPIO_Init+0x1a0>
 800166e:	2302      	movs	r3, #2
 8001670:	e002      	b.n	8001678 <HAL_GPIO_Init+0x1a0>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x1a0>
 8001676:	2300      	movs	r3, #0
 8001678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167a:	f002 0203 	and.w	r2, r2, #3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4093      	lsls	r3, r2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001688:	493a      	ldr	r1, [pc, #232]	; (8001774 <HAL_GPIO_Init+0x29c>)
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a2:	4939      	ldr	r1, [pc, #228]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016a4:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b0:	4935      	ldr	r1, [pc, #212]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016b2:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4013      	ands	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016ca:	492f      	ldr	r1, [pc, #188]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016cc:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
 80016d6:	e006      	b.n	80016e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016d8:	492b      	ldr	r1, [pc, #172]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4013      	ands	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f2:	4925      	ldr	r1, [pc, #148]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
 80016fe:	e006      	b.n	800170e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001700:	4921      	ldr	r1, [pc, #132]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	4013      	ands	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	60cb      	str	r3, [r1, #12]
 8001726:	e006      	b.n	8001736 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001728:	4917      	ldr	r1, [pc, #92]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	4013      	ands	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	3301      	adds	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	f47f aed0 	bne.w	80014ec <HAL_GPIO_Init+0x14>
  }
}
 800174c:	bf00      	nop
 800174e:	372c      	adds	r7, #44	; 0x2c
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	10210000 	.word	0x10210000
 800175c:	10110000 	.word	0x10110000
 8001760:	10120000 	.word	0x10120000
 8001764:	10310000 	.word	0x10310000
 8001768:	10320000 	.word	0x10320000
 800176c:	10220000 	.word	0x10220000
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	40010800 	.word	0x40010800
 800177c:	40010c00 	.word	0x40010c00
 8001780:	40011000 	.word	0x40011000
 8001784:	40011400 	.word	0x40011400
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 f84a 	bl	8006874 <HAL_GPIO_EXTI_Callback>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e11f      	b.n	8001a3e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f006 faa4 	bl	8007d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	; 0x24
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800183e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800184e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001850:	f002 ff10 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8001854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a7b      	ldr	r2, [pc, #492]	; (8001a48 <HAL_I2C_Init+0x25c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d807      	bhi.n	8001870 <HAL_I2C_Init+0x84>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4a7a      	ldr	r2, [pc, #488]	; (8001a4c <HAL_I2C_Init+0x260>)
 8001864:	4293      	cmp	r3, r2
 8001866:	bf94      	ite	ls
 8001868:	2301      	movls	r3, #1
 800186a:	2300      	movhi	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	e006      	b.n	800187e <HAL_I2C_Init+0x92>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a77      	ldr	r2, [pc, #476]	; (8001a50 <HAL_I2C_Init+0x264>)
 8001874:	4293      	cmp	r3, r2
 8001876:	bf94      	ite	ls
 8001878:	2301      	movls	r3, #1
 800187a:	2300      	movhi	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0db      	b.n	8001a3e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4a72      	ldr	r2, [pc, #456]	; (8001a54 <HAL_I2C_Init+0x268>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0c9b      	lsrs	r3, r3, #18
 8001890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	6852      	ldr	r2, [r2, #4]
 800189c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4863      	ldr	r0, [pc, #396]	; (8001a48 <HAL_I2C_Init+0x25c>)
 80018ba:	4283      	cmp	r3, r0
 80018bc:	d802      	bhi.n	80018c4 <HAL_I2C_Init+0xd8>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3301      	adds	r3, #1
 80018c2:	e009      	b.n	80018d8 <HAL_I2C_Init+0xec>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018ca:	fb00 f303 	mul.w	r3, r0, r3
 80018ce:	4862      	ldr	r0, [pc, #392]	; (8001a58 <HAL_I2C_Init+0x26c>)
 80018d0:	fba0 0303 	umull	r0, r3, r0, r3
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	3301      	adds	r3, #1
 80018d8:	430b      	orrs	r3, r1
 80018da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4955      	ldr	r1, [pc, #340]	; (8001a48 <HAL_I2C_Init+0x25c>)
 80018f4:	428b      	cmp	r3, r1
 80018f6:	d80d      	bhi.n	8001914 <HAL_I2C_Init+0x128>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1e59      	subs	r1, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fbb1 f3f3 	udiv	r3, r1, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	2b04      	cmp	r3, #4
 800190e:	bf38      	it	cc
 8001910:	2304      	movcc	r3, #4
 8001912:	e04f      	b.n	80019b4 <HAL_I2C_Init+0x1c8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d111      	bne.n	8001940 <HAL_I2C_Init+0x154>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e5c      	subs	r4, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	440b      	add	r3, r1
 800192a:	fbb4 f3f3 	udiv	r3, r4, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	e012      	b.n	8001966 <HAL_I2C_Init+0x17a>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e5c      	subs	r4, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	0099      	lsls	r1, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	fbb4 f3f3 	udiv	r3, r4, r3
 8001956:	3301      	adds	r3, #1
 8001958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Init+0x182>
 800196a:	2301      	movs	r3, #1
 800196c:	e022      	b.n	80019b4 <HAL_I2C_Init+0x1c8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10e      	bne.n	8001994 <HAL_I2C_Init+0x1a8>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e5c      	subs	r4, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	440b      	add	r3, r1
 8001984:	fbb4 f3f3 	udiv	r3, r4, r3
 8001988:	3301      	adds	r3, #1
 800198a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001992:	e00f      	b.n	80019b4 <HAL_I2C_Init+0x1c8>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1e5c      	subs	r4, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	0099      	lsls	r1, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	fbb4 f3f3 	udiv	r3, r4, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	69d0      	ldr	r0, [r2, #28]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6a12      	ldr	r2, [r2, #32]
 80019ce:	4302      	orrs	r2, r0
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	6908      	ldr	r0, [r1, #16]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	68c9      	ldr	r1, [r1, #12]
 80019ee:	4301      	orrs	r1, r0
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	68d2      	ldr	r2, [r2, #12]
 80019fe:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6950      	ldr	r0, [r2, #20]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6992      	ldr	r2, [r2, #24]
 8001a0a:	4302      	orrs	r2, r0
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	000186a0 	.word	0x000186a0
 8001a4c:	001e847f 	.word	0x001e847f
 8001a50:	003d08ff 	.word	0x003d08ff
 8001a54:	431bde83 	.word	0x431bde83
 8001a58:	10624dd3 	.word	0x10624dd3

08001a5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	817b      	strh	r3, [r7, #10]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	813b      	strh	r3, [r7, #8]
 8001a72:	4613      	mov	r3, r2
 8001a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a76:	f7ff fb6f 	bl	8001158 <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	f040 80d9 	bne.w	8001c3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2319      	movs	r3, #25
 8001a90:	2201      	movs	r2, #1
 8001a92:	496d      	ldr	r1, [pc, #436]	; (8001c48 <HAL_I2C_Mem_Write+0x1ec>)
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f001 ffe3 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e0cc      	b.n	8001c3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Mem_Write+0x56>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e0c5      	b.n	8001c3e <HAL_I2C_Mem_Write+0x1e2>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d007      	beq.n	8001ad8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2221      	movs	r2, #33	; 0x21
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2240      	movs	r2, #64	; 0x40
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a3a      	ldr	r2, [r7, #32]
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a4d      	ldr	r2, [pc, #308]	; (8001c4c <HAL_I2C_Mem_Write+0x1f0>)
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b1a:	88f8      	ldrh	r0, [r7, #6]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	8979      	ldrh	r1, [r7, #10]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f001 fd74 	bl	8003618 <I2C_RequestMemoryWrite>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d052      	beq.n	8001bdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e081      	b.n	8001c3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f002 f864 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00d      	beq.n	8001b66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d107      	bne.n	8001b62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06b      	b.n	8001c3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d11b      	bne.n	8001bdc <HAL_I2C_Mem_Write+0x180>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d017      	beq.n	8001bdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1aa      	bne.n	8001b3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f002 f850 	bl	8003c8e <I2C_WaitOnBTFFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d107      	bne.n	8001c0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e016      	b.n	8001c3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e000      	b.n	8001c3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c3c:	2302      	movs	r3, #2
  }
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	00100002 	.word	0x00100002
 8001c4c:	ffff0000 	.word	0xffff0000

08001c50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	817b      	strh	r3, [r7, #10]
 8001c62:	460b      	mov	r3, r1
 8001c64:	813b      	strh	r3, [r7, #8]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c6e:	f7ff fa73 	bl	8001158 <HAL_GetTick>
 8001c72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	f040 823d 	bne.w	80020fc <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2319      	movs	r3, #25
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4981      	ldr	r1, [pc, #516]	; (8001e90 <HAL_I2C_Mem_Read+0x240>)
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f001 fee7 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e230      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_I2C_Mem_Read+0x5a>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e229      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d007      	beq.n	8001cd0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2222      	movs	r2, #34	; 0x22
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a61      	ldr	r2, [pc, #388]	; (8001e94 <HAL_I2C_Mem_Read+0x244>)
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d12:	88f8      	ldrh	r0, [r7, #6]
 8001d14:	893a      	ldrh	r2, [r7, #8]
 8001d16:	8979      	ldrh	r1, [r7, #10]
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4603      	mov	r3, r0
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f001 fd0c 	bl	8003740 <I2C_RequestMemoryRead>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1e5      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d113      	bne.n	8001d62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e1b9      	b.n	80020d6 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d11d      	bne.n	8001da6 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d78:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001da2:	b662      	cpsie	i
 8001da4:	e197      	b.n	80020d6 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d11d      	bne.n	8001dea <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001de6:	b662      	cpsie	i
 8001de8:	e175      	b.n	80020d6 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001df8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e10:	e161      	b.n	80020d6 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	f200 811a 	bhi.w	8002050 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d123      	bne.n	8001e6c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f001 ffa3 	bl	8003d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e162      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	6912      	ldr	r2, [r2, #16]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e6a:	e134      	b.n	80020d6 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d150      	bne.n	8001f16 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	4906      	ldr	r1, [pc, #24]	; (8001e98 <HAL_I2C_Mem_Read+0x248>)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f001 fdee 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e137      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
 8001e8e:	bf00      	nop
 8001e90:	00100002 	.word	0x00100002
 8001e94:	ffff0000 	.word	0xffff0000
 8001e98:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eac:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	6912      	ldr	r2, [r2, #16]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ee0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	6912      	ldr	r2, [r2, #16]
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f14:	e0df      	b.n	80020d6 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	497a      	ldr	r1, [pc, #488]	; (8002108 <HAL_I2C_Mem_Read+0x4b8>)
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f001 fd9d 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0e6      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	6912      	ldr	r2, [r2, #16]
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f74:	4b65      	ldr	r3, [pc, #404]	; (800210c <HAL_I2C_Mem_Read+0x4bc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	4a65      	ldr	r2, [pc, #404]	; (8002110 <HAL_I2C_Mem_Read+0x4c0>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0a1a      	lsrs	r2, r3, #8
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00da      	lsls	r2, r3, #3
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d117      	bne.n	8001fca <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fbc:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e099      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d1da      	bne.n	8001f8e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	6912      	ldr	r2, [r2, #16]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
 800201a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	6912      	ldr	r2, [r2, #16]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800204e:	e042      	b.n	80020d6 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f001 fe8d 	bl	8003d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e04c      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	6912      	ldr	r2, [r2, #16]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d118      	bne.n	80020d6 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	6912      	ldr	r2, [r2, #16]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f ae99 	bne.w	8001e12 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	00010004 	.word	0x00010004
 800210c:	20000028 	.word	0x20000028
 8002110:	14f8b589 	.word	0x14f8b589

08002114 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002134:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b10      	cmp	r3, #16
 8002142:	d003      	beq.n	800214c <HAL_I2C_EV_IRQHandler+0x38>
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	f040 80ad 	bne.w	80022a6 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10d      	bne.n	8002182 <HAL_I2C_EV_IRQHandler+0x6e>
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800216c:	d003      	beq.n	8002176 <HAL_I2C_EV_IRQHandler+0x62>
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002174:	d101      	bne.n	800217a <HAL_I2C_EV_IRQHandler+0x66>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x68>
 800217a:	2300      	movs	r3, #0
 800217c:	2b01      	cmp	r3, #1
 800217e:	f000 8110 	beq.w	80023a2 <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00b      	beq.n	80021a4 <HAL_I2C_EV_IRQHandler+0x90>
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f001 fe70 	bl	8003e7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fc94 	bl	8002aca <I2C_Master_SB>
 80021a2:	e07f      	b.n	80022a4 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <HAL_I2C_EV_IRQHandler+0xac>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fd09 	bl	8002bd0 <I2C_Master_ADD10>
 80021be:	e071      	b.n	80022a4 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_I2C_EV_IRQHandler+0xc8>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fd24 	bl	8002c22 <I2C_Master_ADDR>
 80021da:	e063      	b.n	80022a4 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d032      	beq.n	800224c <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f4:	f000 80d7 	beq.w	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <HAL_I2C_EV_IRQHandler+0x10a>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_I2C_EV_IRQHandler+0x10a>
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f929 	bl	800246e <I2C_MasterTransmit_TXE>
 800221c:	e042      	b.n	80022a4 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80be 	beq.w	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80b8 	beq.w	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b10      	cmp	r3, #16
 800223a:	d103      	bne.n	8002244 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f9b2 	bl	80025a6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002242:	e0b0      	b.n	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fa16 	bl	8002676 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800224a:	e0ac      	b.n	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800225a:	f000 80a4 	beq.w	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <HAL_I2C_EV_IRQHandler+0x170>
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_I2C_EV_IRQHandler+0x170>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d103      	bne.n	8002284 <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fa89 	bl	8002794 <I2C_MasterReceive_RXNE>
 8002282:	e00f      	b.n	80022a4 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 808b 	beq.w	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8085 	beq.w	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fb2a 	bl	80028f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022a2:	e080      	b.n	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
 80022a4:	e07f      	b.n	80023a6 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e007      	b.n	80022c8 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d011      	beq.n	80022f6 <HAL_I2C_EV_IRQHandler+0x1e2>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00c      	beq.n	80022f6 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80022ec:	69b9      	ldr	r1, [r7, #24]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 feee 	bl	80030d0 <I2C_Slave_ADDR>
 80022f4:	e05a      	b.n	80023ac <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_I2C_EV_IRQHandler+0x1fe>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 ff22 	bl	8003154 <I2C_Slave_STOPF>
 8002310:	e04c      	b.n	80023ac <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002312:	7bbb      	ldrb	r3, [r7, #14]
 8002314:	2b21      	cmp	r3, #33	; 0x21
 8002316:	d002      	beq.n	800231e <HAL_I2C_EV_IRQHandler+0x20a>
 8002318:	7bbb      	ldrb	r3, [r7, #14]
 800231a:	2b29      	cmp	r3, #41	; 0x29
 800231c:	d120      	bne.n	8002360 <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <HAL_I2C_EV_IRQHandler+0x230>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_I2C_EV_IRQHandler+0x230>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fe0b 	bl	8002f58 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002342:	e032      	b.n	80023aa <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d02d      	beq.n	80023aa <HAL_I2C_EV_IRQHandler+0x296>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002354:	2b00      	cmp	r3, #0
 8002356:	d028      	beq.n	80023aa <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fe3a 	bl	8002fd2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800235e:	e024      	b.n	80023aa <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <HAL_I2C_EV_IRQHandler+0x272>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_I2C_EV_IRQHandler+0x272>
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fe47 	bl	8003012 <I2C_SlaveReceive_RXNE>
 8002384:	e012      	b.n	80023ac <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00d      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x298>
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fe77 	bl	800308e <I2C_SlaveReceive_BTF>
 80023a0:	e004      	b.n	80023ac <HAL_I2C_EV_IRQHandler+0x298>
      return;
 80023a2:	bf00      	nop
 80023a4:	e002      	b.n	80023ac <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	70fb      	strb	r3, [r7, #3]
 8002406:	4613      	mov	r3, r2
 8002408:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002484:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d150      	bne.n	8002536 <I2C_MasterTransmit_TXE+0xc8>
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b21      	cmp	r3, #33	; 0x21
 8002498:	d14d      	bne.n	8002536 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d01d      	beq.n	80024dc <I2C_MasterTransmit_TXE+0x6e>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d01a      	beq.n	80024dc <I2C_MasterTransmit_TXE+0x6e>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ac:	d016      	beq.n	80024dc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	6852      	ldr	r2, [r2, #4]
 80024b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024bc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2211      	movs	r2, #17
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff6c 	bl	80023b2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024da:	e060      	b.n	800259e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	6852      	ldr	r2, [r2, #4]
 80024e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024ea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d107      	bne.n	8002526 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff81 	bl	8002426 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002524:	e03b      	b.n	800259e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ff3f 	bl	80023b2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002534:	e033      	b.n	800259e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b21      	cmp	r3, #33	; 0x21
 800253a:	d005      	beq.n	8002548 <I2C_MasterTransmit_TXE+0xda>
 800253c:	7bbb      	ldrb	r3, [r7, #14]
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d12d      	bne.n	800259e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b22      	cmp	r3, #34	; 0x22
 8002546:	d12a      	bne.n	800259e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6852      	ldr	r2, [r2, #4]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002562:	e01c      	b.n	800259e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d103      	bne.n	8002578 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f880 	bl	8002676 <I2C_MemoryTransmit_TXE_BTF>
}
 8002576:	e012      	b.n	800259e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800259c:	e7ff      	b.n	800259e <I2C_MasterTransmit_TXE+0x130>
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b21      	cmp	r3, #33	; 0x21
 80025be:	d156      	bne.n	800266e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d2:	7812      	ldrb	r2, [r2, #0]
 80025d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025ee:	e03e      	b.n	800266e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d01d      	beq.n	8002632 <I2C_MasterTransmit_BTF+0x8c>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d01a      	beq.n	8002632 <I2C_MasterTransmit_BTF+0x8c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002602:	d016      	beq.n	8002632 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	6852      	ldr	r2, [r2, #4]
 800260e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002612:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2211      	movs	r2, #17
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fec1 	bl	80023b2 <HAL_I2C_MasterTxCpltCallback>
}
 8002630:	e01d      	b.n	800266e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	6852      	ldr	r2, [r2, #4]
 800263c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002640:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002650:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fea2 	bl	80023b2 <HAL_I2C_MasterTxCpltCallback>
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11d      	bne.n	80026ca <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d10b      	bne.n	80026ae <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a6:	1c9a      	adds	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80026ac:	e06e      	b.n	800278c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026b6:	b292      	uxth	r2, r2
 80026b8:	1212      	asrs	r2, r2, #8
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026c8:	e060      	b.n	800278c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10b      	bne.n	80026ea <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026e8:	e050      	b.n	800278c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d14c      	bne.n	800278c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b22      	cmp	r3, #34	; 0x22
 80026f6:	d108      	bne.n	800270a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002706:	601a      	str	r2, [r3, #0]
}
 8002708:	e040      	b.n	800278c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d015      	beq.n	8002740 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b21      	cmp	r3, #33	; 0x21
 8002718:	d112      	bne.n	8002740 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800273e:	e025      	b.n	800278c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d120      	bne.n	800278c <I2C_MemoryTransmit_TXE_BTF+0x116>
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b21      	cmp	r3, #33	; 0x21
 800274e:	d11d      	bne.n	800278c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	6852      	ldr	r2, [r2, #4]
 800275a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800275e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fe4d 	bl	8002426 <HAL_I2C_MemTxCpltCallback>
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b22      	cmp	r3, #34	; 0x22
 80027a6:	f040 80a2 	bne.w	80028ee <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d921      	bls.n	80027fc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	6912      	ldr	r2, [r2, #16]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	f040 8082 	bne.w	80028ee <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	6852      	ldr	r2, [r2, #4]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80027fa:	e078      	b.n	80028ee <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	2b02      	cmp	r3, #2
 8002802:	d074      	beq.n	80028ee <I2C_MasterReceive_RXNE+0x15a>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d002      	beq.n	8002810 <I2C_MasterReceive_RXNE+0x7c>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d16e      	bne.n	80028ee <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f001 fa7d 	bl	8003d10 <I2C_WaitOnSTOPRequestThroughIT>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d142      	bne.n	80028a2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	6852      	ldr	r2, [r2, #4]
 8002836:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800283a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	6912      	ldr	r2, [r2, #16]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d10a      	bne.n	800288c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fdd7 	bl	8002438 <HAL_I2C_MemRxCpltCallback>
}
 800288a:	e030      	b.n	80028ee <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2212      	movs	r2, #18
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fd92 	bl	80023c4 <HAL_I2C_MasterRxCpltCallback>
}
 80028a0:	e025      	b.n	80028ee <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	6852      	ldr	r2, [r2, #4]
 80028ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	6912      	ldr	r2, [r2, #16]
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fdae 	bl	800244a <HAL_I2C_ErrorCallback>
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b04      	cmp	r3, #4
 800290c:	d11b      	bne.n	8002946 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	6852      	ldr	r2, [r2, #4]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	6912      	ldr	r2, [r2, #16]
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002944:	e0bd      	b.n	8002ac2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b03      	cmp	r3, #3
 800294e:	d129      	bne.n	80029a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	6852      	ldr	r2, [r2, #4]
 800295a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d00a      	beq.n	800297c <I2C_MasterReceive_BTF+0x86>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d007      	beq.n	800297c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	6912      	ldr	r2, [r2, #16]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029a2:	e08e      	b.n	8002ac2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d176      	bne.n	8002a9c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d002      	beq.n	80029ba <I2C_MasterReceive_BTF+0xc4>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d108      	bne.n	80029cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e019      	b.n	8002a00 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d002      	beq.n	80029d8 <I2C_MasterReceive_BTF+0xe2>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d108      	bne.n	80029ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e00a      	b.n	8002a00 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d007      	beq.n	8002a00 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	6912      	ldr	r2, [r2, #16]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	6912      	ldr	r2, [r2, #16]
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	6852      	ldr	r2, [r2, #4]
 8002a56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a5a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d10a      	bne.n	8002a86 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fcda 	bl	8002438 <HAL_I2C_MemRxCpltCallback>
}
 8002a84:	e01d      	b.n	8002ac2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2212      	movs	r2, #18
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fc95 	bl	80023c4 <HAL_I2C_MasterRxCpltCallback>
}
 8002a9a:	e012      	b.n	8002ac2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	6912      	ldr	r2, [r2, #16]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d116      	bne.n	8002b0c <I2C_Master_SB+0x42>
  {
    if (hi2c->EventCount == 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002af4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002af6:	e066      	b.n	8002bc6 <I2C_Master_SB+0xfc>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	611a      	str	r2, [r3, #16]
}
 8002b0a:	e05c      	b.n	8002bc6 <I2C_Master_SB+0xfc>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b14:	d132      	bne.n	8002b7c <I2C_Master_SB+0xb2>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b21      	cmp	r3, #33	; 0x21
 8002b20:	d108      	bne.n	8002b34 <I2C_Master_SB+0x6a>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b30:	611a      	str	r2, [r3, #16]
 8002b32:	e008      	b.n	8002b46 <I2C_Master_SB+0x7c>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <I2C_Master_SB+0x8e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d108      	bne.n	8002b6a <I2C_Master_SB+0xa0>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d032      	beq.n	8002bc6 <I2C_Master_SB+0xfc>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02d      	beq.n	8002bc6 <I2C_Master_SB+0xfc>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	6852      	ldr	r2, [r2, #4]
 8002b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b78:	605a      	str	r2, [r3, #4]
}
 8002b7a:	e024      	b.n	8002bc6 <I2C_Master_SB+0xfc>
      if (hi2c->EventCount == 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10e      	bne.n	8002ba2 <I2C_Master_SB+0xd8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	11d2      	asrs	r2, r2, #7
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f002 0206 	and.w	r2, r2, #6
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f062 020f 	orn	r2, r2, #15
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	611a      	str	r2, [r3, #16]
}
 8002ba0:	e011      	b.n	8002bc6 <I2C_Master_SB+0xfc>
      else if (hi2c->EventCount == 1U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10d      	bne.n	8002bc6 <I2C_Master_SB+0xfc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	11d2      	asrs	r2, r2, #7
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f002 0206 	and.w	r2, r2, #6
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f062 020e 	orn	r2, r2, #14
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	611a      	str	r2, [r3, #16]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <I2C_Master_ADD10+0x24>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d011      	beq.n	8002c18 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <I2C_Master_ADD10+0x38>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	6852      	ldr	r2, [r2, #4]
 8002c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c16:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b091      	sub	sp, #68	; 0x44
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b22      	cmp	r3, #34	; 0x22
 8002c4a:	f040 8174 	bne.w	8002f36 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <I2C_Master_ADDR+0x54>
 8002c56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d10b      	bne.n	8002c76 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	e16b      	b.n	8002f4e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11d      	bne.n	8002cba <I2C_Master_ADDR+0x98>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c86:	d118      	bne.n	8002cba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	651a      	str	r2, [r3, #80]	; 0x50
 8002cb8:	e149      	b.n	8002f4e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d113      	bne.n	8002cec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e120      	b.n	8002f2e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 808a 	bne.w	8002e0c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cfe:	d137      	bne.n	8002d70 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d1e:	d113      	bne.n	8002d48 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	e0f2      	b.n	8002f2e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e0de      	b.n	8002f2e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d02e      	beq.n	8002dd4 <I2C_Master_ADDR+0x1b2>
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d02b      	beq.n	8002dd4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	2b12      	cmp	r3, #18
 8002d80:	d102      	bne.n	8002d88 <I2C_Master_ADDR+0x166>
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d125      	bne.n	8002dd4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d00e      	beq.n	8002dac <I2C_Master_ADDR+0x18a>
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d00b      	beq.n	8002dac <I2C_Master_ADDR+0x18a>
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d008      	beq.n	8002dac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e007      	b.n	8002dbc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	e0ac      	b.n	8002f2e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e090      	b.n	8002f2e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d158      	bne.n	8002ec8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d021      	beq.n	8002e60 <I2C_Master_ADDR+0x23e>
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d01e      	beq.n	8002e60 <I2C_Master_ADDR+0x23e>
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d01b      	beq.n	8002e60 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e012      	b.n	8002e86 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e94:	d14b      	bne.n	8002f2e <I2C_Master_ADDR+0x30c>
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e9c:	d00b      	beq.n	8002eb6 <I2C_Master_ADDR+0x294>
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d008      	beq.n	8002eb6 <I2C_Master_ADDR+0x294>
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d005      	beq.n	8002eb6 <I2C_Master_ADDR+0x294>
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d002      	beq.n	8002eb6 <I2C_Master_ADDR+0x294>
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d13b      	bne.n	8002f2e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	6852      	ldr	r2, [r2, #4]
 8002ec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	e032      	b.n	8002f2e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee6:	d117      	bne.n	8002f18 <I2C_Master_ADDR+0x2f6>
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eee:	d00b      	beq.n	8002f08 <I2C_Master_ADDR+0x2e6>
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d008      	beq.n	8002f08 <I2C_Master_ADDR+0x2e6>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d005      	beq.n	8002f08 <I2C_Master_ADDR+0x2e6>
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d002      	beq.n	8002f08 <I2C_Master_ADDR+0x2e6>
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d107      	bne.n	8002f18 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	6852      	ldr	r2, [r2, #4]
 8002f12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f16:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f34:	e00b      	b.n	8002f4e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
}
 8002f4c:	e7ff      	b.n	8002f4e <I2C_Master_ADDR+0x32c>
 8002f4e:	bf00      	nop
 8002f50:	3744      	adds	r7, #68	; 0x44
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d02b      	beq.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d114      	bne.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b29      	cmp	r3, #41	; 0x29
 8002fa4:	d111      	bne.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	6852      	ldr	r2, [r2, #4]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2221      	movs	r2, #33	; 0x21
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2228      	movs	r2, #40	; 0x28
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fa06 	bl	80023d6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d011      	beq.n	8003008 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fec:	7812      	ldrb	r2, [r2, #0]
 8002fee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d02c      	beq.n	8003086 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	6912      	ldr	r2, [r2, #16]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d114      	bne.n	8003086 <I2C_SlaveReceive_RXNE+0x74>
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b2a      	cmp	r3, #42	; 0x2a
 8003060:	d111      	bne.n	8003086 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	6852      	ldr	r2, [r2, #4]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003070:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2222      	movs	r2, #34	; 0x22
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2228      	movs	r2, #40	; 0x28
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff f9b1 	bl	80023e8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d012      	beq.n	80030c6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	6912      	ldr	r2, [r2, #16]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030ea:	2b28      	cmp	r3, #40	; 0x28
 80030ec:	d125      	bne.n	800313a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	6852      	ldr	r2, [r2, #4]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d103      	bne.n	800311e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	81bb      	strh	r3, [r7, #12]
 800311c:	e002      	b.n	8003124 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800312c:	89ba      	ldrh	r2, [r7, #12]
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff f961 	bl	80023fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003138:	e008      	b.n	800314c <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 0202 	mvn.w	r2, #2
 8003142:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	6852      	ldr	r2, [r2, #4]
 800316e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003172:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b0:	d172      	bne.n	8003298 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b22      	cmp	r3, #34	; 0x22
 80031b6:	d002      	beq.n	80031be <I2C_Slave_STOPF+0x6a>
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	2b2a      	cmp	r3, #42	; 0x2a
 80031bc:	d135      	bne.n	800322a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f043 0204 	orr.w	r2, r3, #4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	6852      	ldr	r2, [r2, #4]
 80031ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe f962 	bl	80014c0 <HAL_DMA_GetState>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d049      	beq.n	8003296 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	4a69      	ldr	r2, [pc, #420]	; (80033ac <I2C_Slave_STOPF+0x258>)
 8003208:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe f8da 	bl	80013c8 <HAL_DMA_Abort_IT>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03d      	beq.n	8003296 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003224:	4610      	mov	r0, r2
 8003226:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003228:	e035      	b.n	8003296 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f043 0204 	orr.w	r2, r3, #4
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	6852      	ldr	r2, [r2, #4]
 8003258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe f92c 	bl	80014c0 <HAL_DMA_GetState>
 8003268:	4603      	mov	r3, r0
 800326a:	2b01      	cmp	r3, #1
 800326c:	d014      	beq.n	8003298 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	4a4e      	ldr	r2, [pc, #312]	; (80033ac <I2C_Slave_STOPF+0x258>)
 8003274:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe f8a4 	bl	80013c8 <HAL_DMA_Abort_IT>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003290:	4610      	mov	r0, r2
 8003292:	4798      	blx	r3
 8003294:	e000      	b.n	8003298 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003296:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d03e      	beq.n	8003320 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d112      	bne.n	80032d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	6912      	ldr	r2, [r2, #16]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d112      	bne.n	800330a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	6912      	ldr	r2, [r2, #16]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f843 	bl	80033b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800332e:	e039      	b.n	80033a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b2a      	cmp	r3, #42	; 0x2a
 8003334:	d109      	bne.n	800334a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2228      	movs	r2, #40	; 0x28
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff f84f 	bl	80023e8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b28      	cmp	r3, #40	; 0x28
 8003354:	d111      	bne.n	800337a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <I2C_Slave_STOPF+0x25c>)
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff f84e 	bl	8002414 <HAL_I2C_ListenCpltCallback>
}
 8003378:	e014      	b.n	80033a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	2b22      	cmp	r3, #34	; 0x22
 8003380:	d002      	beq.n	8003388 <I2C_Slave_STOPF+0x234>
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b22      	cmp	r3, #34	; 0x22
 8003386:	d10d      	bne.n	80033a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff f822 	bl	80023e8 <HAL_I2C_SlaveRxCpltCallback>
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	08003911 	.word	0x08003911
 80033b0:	ffff0000 	.word	0xffff0000

080033b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033cc:	7bbb      	ldrb	r3, [r7, #14]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d002      	beq.n	80033d8 <I2C_ITError+0x24>
 80033d2:	7bbb      	ldrb	r3, [r7, #14]
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d10a      	bne.n	80033ee <I2C_ITError+0x3a>
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b22      	cmp	r3, #34	; 0x22
 80033dc:	d107      	bne.n	80033ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033f4:	2b28      	cmp	r3, #40	; 0x28
 80033f6:	d107      	bne.n	8003408 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2228      	movs	r2, #40	; 0x28
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003406:	e015      	b.n	8003434 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003416:	d00a      	beq.n	800342e <I2C_ITError+0x7a>
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b60      	cmp	r3, #96	; 0x60
 800341c:	d007      	beq.n	800342e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003442:	d161      	bne.n	8003508 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	6852      	ldr	r2, [r2, #4]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003452:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800345c:	2b01      	cmp	r3, #1
 800345e:	d020      	beq.n	80034a2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	4a6a      	ldr	r2, [pc, #424]	; (8003610 <I2C_ITError+0x25c>)
 8003466:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd ffab 	bl	80013c8 <HAL_DMA_Abort_IT>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8089 	beq.w	800358c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800349c:	4610      	mov	r0, r2
 800349e:	4798      	blx	r3
 80034a0:	e074      	b.n	800358c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	4a5a      	ldr	r2, [pc, #360]	; (8003610 <I2C_ITError+0x25c>)
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd ff8a 	bl	80013c8 <HAL_DMA_Abort_IT>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d068      	beq.n	800358c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d10b      	bne.n	80034e0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	6912      	ldr	r2, [r2, #16]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003502:	4610      	mov	r0, r2
 8003504:	4798      	blx	r3
 8003506:	e041      	b.n	800358c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b60      	cmp	r3, #96	; 0x60
 8003512:	d125      	bne.n	8003560 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d10b      	bne.n	8003548 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	6912      	ldr	r2, [r2, #16]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fe ff7f 	bl	800245c <HAL_I2C_AbortCpltCallback>
 800355e:	e015      	b.n	800358c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d10b      	bne.n	8003586 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	6912      	ldr	r2, [r2, #16]
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe ff5f 	bl	800244a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10e      	bne.n	80035ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d113      	bne.n	8003606 <I2C_ITError+0x252>
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b28      	cmp	r3, #40	; 0x28
 80035e2:	d110      	bne.n	8003606 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0b      	ldr	r2, [pc, #44]	; (8003614 <I2C_ITError+0x260>)
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fe ff07 	bl	8002414 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	08003911 	.word	0x08003911
 8003614:	ffff0000 	.word	0xffff0000

08003618 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	4608      	mov	r0, r1
 8003622:	4611      	mov	r1, r2
 8003624:	461a      	mov	r2, r3
 8003626:	4603      	mov	r3, r0
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	460b      	mov	r3, r1
 800362c:	813b      	strh	r3, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003640:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2200      	movs	r2, #0
 800364a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa06 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003668:	d103      	bne.n	8003672 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e05e      	b.n	8003734 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	897a      	ldrh	r2, [r7, #10]
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003682:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	6a3a      	ldr	r2, [r7, #32]
 8003688:	492c      	ldr	r1, [pc, #176]	; (800373c <I2C_RequestMemoryWrite+0x124>)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fa3f 	bl	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e04c      	b.n	8003734 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	6a39      	ldr	r1, [r7, #32]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 faa9 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d107      	bne.n	80036d8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e02b      	b.n	8003734 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	893a      	ldrh	r2, [r7, #8]
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	611a      	str	r2, [r3, #16]
 80036ec:	e021      	b.n	8003732 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	893a      	ldrh	r2, [r7, #8]
 80036f4:	0a12      	lsrs	r2, r2, #8
 80036f6:	b292      	uxth	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	6a39      	ldr	r1, [r7, #32]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fa83 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	2b04      	cmp	r3, #4
 8003712:	d107      	bne.n	8003724 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e005      	b.n	8003734 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	893a      	ldrh	r2, [r7, #8]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	00010002 	.word	0x00010002

08003740 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	817b      	strh	r3, [r7, #10]
 8003752:	460b      	mov	r3, r1
 8003754:	813b      	strh	r3, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003768:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003778:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	2200      	movs	r2, #0
 8003782:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f96a 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a0:	d103      	bne.n	80037aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e0a9      	b.n	8003902 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	897a      	ldrh	r2, [r7, #10]
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	4952      	ldr	r1, [pc, #328]	; (800390c <I2C_RequestMemoryRead+0x1cc>)
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f9a3 	bl	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e097      	b.n	8003902 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ea:	6a39      	ldr	r1, [r7, #32]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fa0d 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d107      	bne.n	8003810 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e076      	b.n	8003902 <I2C_RequestMemoryRead+0x1c2>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	893a      	ldrh	r2, [r7, #8]
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	611a      	str	r2, [r3, #16]
 8003824:	e021      	b.n	800386a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	893a      	ldrh	r2, [r7, #8]
 800382c:	0a12      	lsrs	r2, r2, #8
 800382e:	b292      	uxth	r2, r2
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	6a39      	ldr	r1, [r7, #32]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f9e7 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00d      	beq.n	8003860 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	2b04      	cmp	r3, #4
 800384a:	d107      	bne.n	800385c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e050      	b.n	8003902 <I2C_RequestMemoryRead+0x1c2>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	893a      	ldrh	r2, [r7, #8]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	6a39      	ldr	r1, [r7, #32]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f9cc 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b04      	cmp	r3, #4
 8003880:	d107      	bne.n	8003892 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e035      	b.n	8003902 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f8d4 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <I2C_RequestMemoryRead+0x19a>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038cc:	d103      	bne.n	80038d6 <I2C_RequestMemoryRead+0x196>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e013      	b.n	8003902 <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	897a      	ldrh	r2, [r7, #10]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	6a3a      	ldr	r2, [r7, #32]
 80038ee:	4907      	ldr	r1, [pc, #28]	; (800390c <I2C_RequestMemoryRead+0x1cc>)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f90c 	bl	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <I2C_RequestMemoryRead+0x1c0>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <I2C_RequestMemoryRead+0x1c2>
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	00010002 	.word	0x00010002

08003910 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003928:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800392a:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <I2C_DMAAbort+0x148>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	4a4a      	ldr	r2, [pc, #296]	; (8003a5c <I2C_DMAAbort+0x14c>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0a1a      	lsrs	r2, r3, #8
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00da      	lsls	r2, r3, #3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003956:	e00a      	b.n	800396e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3b01      	subs	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396c:	d0ea      	beq.n	8003944 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	2200      	movs	r2, #0
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	2200      	movs	r2, #0
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	2200      	movs	r2, #0
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	2200      	movs	r2, #0
 80039c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b60      	cmp	r3, #96	; 0x60
 80039de:	d10e      	bne.n	80039fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	f7fe fd30 	bl	800245c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039fc:	e027      	b.n	8003a4e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a04:	2b28      	cmp	r3, #40	; 0x28
 8003a06:	d117      	bne.n	8003a38 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2228      	movs	r2, #40	; 0x28
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a36:	e007      	b.n	8003a48 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a48:	6978      	ldr	r0, [r7, #20]
 8003a4a:	f7fe fcfe 	bl	800244a <HAL_I2C_ErrorCallback>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000028 	.word	0x20000028
 8003a5c:	14f8b589 	.word	0x14f8b589

08003a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a70:	e025      	b.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d021      	beq.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fd fb6d 	bl	8001158 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	1ad2      	subs	r2, r2, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d802      	bhi.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f043 0220 	orr.w	r2, r3, #32
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e023      	b.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10d      	bne.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	e00c      	b.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	43da      	mvns	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4013      	ands	r3, r2
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d0b6      	beq.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b1c:	e051      	b.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2c:	d123      	bne.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e046      	b.n	8003c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d021      	beq.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7fd faeb 	bl	8001158 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d802      	bhi.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d116      	bne.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f043 0220 	orr.w	r2, r3, #32
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e020      	b.n	8003c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10c      	bne.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	e00b      	b.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d18d      	bne.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c18:	e02d      	b.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f900 	bl	8003e20 <I2C_IsAcknowledgeFailed>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02d      	b.n	8003c86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d021      	beq.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fd fa91 	bl	8001158 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	1ad2      	subs	r2, r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d802      	bhi.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e007      	b.n	8003c86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b80      	cmp	r3, #128	; 0x80
 8003c82:	d1ca      	bne.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c9a:	e02d      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f8bf 	bl	8003e20 <I2C_IsAcknowledgeFailed>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e02d      	b.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d021      	beq.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb4:	f7fd fa50 	bl	8001158 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	1ad2      	subs	r2, r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d802      	bhi.n	8003cca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e007      	b.n	8003d08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d1ca      	bne.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	08db      	lsrs	r3, r3, #3
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	0a1a      	lsrs	r2, r3, #8
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e008      	b.n	8003d60 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5c:	d0e9      	beq.n	8003d32 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000028 	.word	0x20000028
 8003d70:	14f8b589 	.word	0x14f8b589

08003d74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d80:	e042      	b.n	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d119      	bne.n	8003dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0210 	mvn.w	r2, #16
 8003d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e029      	b.n	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc4:	f7fd f9c8 	bl	8001158 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d802      	bhi.n	8003dda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e007      	b.n	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e12:	2b40      	cmp	r3, #64	; 0x40
 8003e14:	d1b5      	bne.n	8003d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e36:	d11b      	bne.n	8003e70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f043 0204 	orr.w	r2, r3, #4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e8c:	d103      	bne.n	8003e96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e94:	e007      	b.n	8003ea6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e9e:	d102      	bne.n	8003ea6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	420e0020 	.word	0x420e0020

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e26c      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8087 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ee8:	4b92      	ldr	r3, [pc, #584]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d00c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ef4:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d112      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
 8003f00:	4b8c      	ldr	r3, [pc, #560]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0e:	4b89      	ldr	r3, [pc, #548]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d06c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x12c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d168      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e246      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x76>
 8003f30:	4a80      	ldr	r2, [pc, #512]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f32:	4b80      	ldr	r3, [pc, #512]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e02e      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x98>
 8003f46:	4a7b      	ldr	r2, [pc, #492]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	4b7a      	ldr	r3, [pc, #488]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4a78      	ldr	r2, [pc, #480]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	4b77      	ldr	r3, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e01d      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0xbc>
 8003f6a:	4a72      	ldr	r2, [pc, #456]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	4b71      	ldr	r3, [pc, #452]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4a6f      	ldr	r2, [pc, #444]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	4b6e      	ldr	r3, [pc, #440]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e00b      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f84:	4a6b      	ldr	r2, [pc, #428]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f86:	4b6b      	ldr	r3, [pc, #428]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4a68      	ldr	r2, [pc, #416]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f92:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fd f8d8 	bl	8001158 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fd f8d4 	bl	8001158 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1fa      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	4b5d      	ldr	r3, [pc, #372]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0xe4>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd f8c4 	bl	8001158 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fd f8c0 	bl	8001158 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e1e6      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe6:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x10c>
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d063      	beq.n	80040ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004002:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00b      	beq.n	8004026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800400e:	4b49      	ldr	r3, [pc, #292]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b08      	cmp	r3, #8
 8004018:	d11c      	bne.n	8004054 <HAL_RCC_OscConfig+0x18c>
 800401a:	4b46      	ldr	r3, [pc, #280]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d116      	bne.n	8004054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004026:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x176>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d001      	beq.n	800403e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e1ba      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	493d      	ldr	r1, [pc, #244]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004040:	4b3c      	ldr	r3, [pc, #240]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004052:	e03a      	b.n	80040ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800405c:	4b36      	ldr	r3, [pc, #216]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fd f879 	bl	8001158 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406a:	f7fd f875 	bl	8001158 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e19b      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407c:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	492a      	ldr	r1, [pc, #168]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 800408a:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
 800409c:	e015      	b.n	80040ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409e:	4b26      	ldr	r3, [pc, #152]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fd f858 	bl	8001158 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ac:	f7fd f854 	bl	8001158 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e17a      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03a      	beq.n	800414c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d019      	beq.n	8004112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <HAL_RCC_OscConfig+0x274>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7fd f838 	bl	8001158 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ec:	f7fd f834 	bl	8001158 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e15a      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800410a:	2001      	movs	r0, #1
 800410c:	f000 fada 	bl	80046c4 <RCC_Delay>
 8004110:	e01c      	b.n	800414c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <HAL_RCC_OscConfig+0x274>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fd f81e 	bl	8001158 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411e:	e00f      	b.n	8004140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004120:	f7fd f81a 	bl	8001158 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d908      	bls.n	8004140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e140      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	42420000 	.word	0x42420000
 800413c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	4b9e      	ldr	r3, [pc, #632]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e9      	bne.n	8004120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80a6 	beq.w	80042a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415e:	4b97      	ldr	r3, [pc, #604]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	4a94      	ldr	r2, [pc, #592]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800416c:	4b93      	ldr	r3, [pc, #588]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	61d3      	str	r3, [r2, #28]
 8004176:	4b91      	ldr	r3, [pc, #580]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b8e      	ldr	r3, [pc, #568]	; (80043c0 <HAL_RCC_OscConfig+0x4f8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d118      	bne.n	80041c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4a8b      	ldr	r2, [pc, #556]	; (80043c0 <HAL_RCC_OscConfig+0x4f8>)
 8004194:	4b8a      	ldr	r3, [pc, #552]	; (80043c0 <HAL_RCC_OscConfig+0x4f8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fc ffdb 	bl	8001158 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fc ffd7 	bl	8001158 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b64      	cmp	r3, #100	; 0x64
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0fd      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCC_OscConfig+0x4f8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x312>
 80041cc:	4a7b      	ldr	r2, [pc, #492]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80041ce:	4b7b      	ldr	r3, [pc, #492]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6213      	str	r3, [r2, #32]
 80041d8:	e02d      	b.n	8004236 <HAL_RCC_OscConfig+0x36e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x334>
 80041e2:	4a76      	ldr	r2, [pc, #472]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80041e4:	4b75      	ldr	r3, [pc, #468]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6213      	str	r3, [r2, #32]
 80041ee:	4a73      	ldr	r2, [pc, #460]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80041f0:	4b72      	ldr	r3, [pc, #456]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	6213      	str	r3, [r2, #32]
 80041fa:	e01c      	b.n	8004236 <HAL_RCC_OscConfig+0x36e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b05      	cmp	r3, #5
 8004202:	d10c      	bne.n	800421e <HAL_RCC_OscConfig+0x356>
 8004204:	4a6d      	ldr	r2, [pc, #436]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004206:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	6213      	str	r3, [r2, #32]
 8004210:	4a6a      	ldr	r2, [pc, #424]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004212:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6213      	str	r3, [r2, #32]
 800421c:	e00b      	b.n	8004236 <HAL_RCC_OscConfig+0x36e>
 800421e:	4a67      	ldr	r2, [pc, #412]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004220:	4b66      	ldr	r3, [pc, #408]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6213      	str	r3, [r2, #32]
 800422a:	4a64      	ldr	r2, [pc, #400]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800422c:	4b63      	ldr	r3, [pc, #396]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d015      	beq.n	800426a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423e:	f7fc ff8b 	bl	8001158 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	e00a      	b.n	800425c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fc ff87 	bl	8001158 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0ab      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	4b57      	ldr	r3, [pc, #348]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ee      	beq.n	8004246 <HAL_RCC_OscConfig+0x37e>
 8004268:	e014      	b.n	8004294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fc ff75 	bl	8001158 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fc ff71 	bl	8001158 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e095      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	4b4c      	ldr	r3, [pc, #304]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ee      	bne.n	8004272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429a:	4a48      	ldr	r2, [pc, #288]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800429c:	4b47      	ldr	r3, [pc, #284]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8081 	beq.w	80043b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b0:	4b42      	ldr	r3, [pc, #264]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d061      	beq.n	8004380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d146      	bne.n	8004352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c4:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCC_OscConfig+0x4fc>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fc ff45 	bl	8001158 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fc ff41 	bl	8001158 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e067      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e4:	4b35      	ldr	r3, [pc, #212]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d108      	bne.n	800430c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042fa:	4930      	ldr	r1, [pc, #192]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430c:	482b      	ldr	r0, [pc, #172]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800430e:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a19      	ldr	r1, [r3, #32]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	430b      	orrs	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_RCC_OscConfig+0x4fc>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fc ff15 	bl	8001158 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004332:	f7fc ff11 	bl	8001158 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e037      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x46a>
 8004350:	e02f      	b.n	80043b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <HAL_RCC_OscConfig+0x4fc>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7fc fefe 	bl	8001158 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004360:	f7fc fefa 	bl	8001158 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e020      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x498>
 800437e:	e018      	b.n	80043b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e013      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_OscConfig+0x4f4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	429a      	cmp	r2, r3
 800439e:	d106      	bne.n	80043ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42420060 	.word	0x42420060

080043c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0d0      	b.n	800457e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b6a      	ldr	r3, [pc, #424]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0207 	and.w	r2, r3, #7
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d210      	bcs.n	800440c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4967      	ldr	r1, [pc, #412]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 80043ec:	4b66      	ldr	r3, [pc, #408]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 0207 	bic.w	r2, r3, #7
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b63      	ldr	r3, [pc, #396]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b8      	b.n	800457e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4a59      	ldr	r2, [pc, #356]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	4b59      	ldr	r3, [pc, #356]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800442e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800443c:	4a53      	ldr	r2, [pc, #332]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	4b53      	ldr	r3, [pc, #332]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4950      	ldr	r1, [pc, #320]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d040      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d115      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e07f      	b.n	800457e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004486:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e073      	b.n	800457e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004496:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e06b      	b.n	800457e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a6:	4939      	ldr	r1, [pc, #228]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	4b38      	ldr	r3, [pc, #224]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f023 0203 	bic.w	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b8:	f7fc fe4e 	bl	8001158 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c0:	f7fc fe4a 	bl	8001158 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e053      	b.n	800457e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 020c 	and.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1eb      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0207 	and.w	r2, r3, #7
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d910      	bls.n	8004518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4924      	ldr	r1, [pc, #144]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 80044f8:	4b23      	ldr	r3, [pc, #140]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 0207 	bic.w	r2, r3, #7
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0207 	and.w	r2, r3, #7
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e032      	b.n	800457e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004524:	4919      	ldr	r1, [pc, #100]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	4b19      	ldr	r3, [pc, #100]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004542:	4912      	ldr	r1, [pc, #72]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004556:	f000 f821 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800455a:	4601      	mov	r1, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004568:	5cd3      	ldrb	r3, [r2, r3]
 800456a:	fa21 f303 	lsr.w	r3, r1, r3
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x1cc>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_ClockConfig+0x1d0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fc fdac 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40022000 	.word	0x40022000
 800458c:	40021000 	.word	0x40021000
 8004590:	08009e54 	.word	0x08009e54
 8004594:	20000028 	.word	0x20000028
 8004598:	20000000 	.word	0x20000000

0800459c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	b490      	push	{r4, r7}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045a2:	4b2a      	ldr	r3, [pc, #168]	; (800464c <HAL_RCC_GetSysClockFreq+0xb0>)
 80045a4:	1d3c      	adds	r4, r7, #4
 80045a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045c6:	4b23      	ldr	r3, [pc, #140]	; (8004654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d002      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x40>
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d003      	beq.n	80045e2 <HAL_RCC_GetSysClockFreq+0x46>
 80045da:	e02d      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045dc:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045de:	623b      	str	r3, [r7, #32]
      break;
 80045e0:	e02d      	b.n	800463e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	0c9b      	lsrs	r3, r3, #18
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045ee:	4413      	add	r3, r2
 80045f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004600:	4b14      	ldr	r3, [pc, #80]	; (8004654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	0c5b      	lsrs	r3, r3, #17
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800460e:	4413      	add	r3, r2
 8004610:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004614:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	4a0f      	ldr	r2, [pc, #60]	; (8004658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800461a:	fb02 f203 	mul.w	r2, r2, r3
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
 8004626:	e004      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4a0c      	ldr	r2, [pc, #48]	; (800465c <HAL_RCC_GetSysClockFreq+0xc0>)
 800462c:	fb02 f303 	mul.w	r3, r2, r3
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	623b      	str	r3, [r7, #32]
      break;
 8004636:	e002      	b.n	800463e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800463a:	623b      	str	r3, [r7, #32]
      break;
 800463c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800463e:	6a3b      	ldr	r3, [r7, #32]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3728      	adds	r7, #40	; 0x28
 8004644:	46bd      	mov	sp, r7
 8004646:	bc90      	pop	{r4, r7}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	08008340 	.word	0x08008340
 8004650:	08008350 	.word	0x08008350
 8004654:	40021000 	.word	0x40021000
 8004658:	007a1200 	.word	0x007a1200
 800465c:	003d0900 	.word	0x003d0900

08004660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b02      	ldr	r3, [pc, #8]	; (8004670 <HAL_RCC_GetHCLKFreq+0x10>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr
 8004670:	20000028 	.word	0x20000028

08004674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004678:	f7ff fff2 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 800467c:	4601      	mov	r1, r0
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4a03      	ldr	r2, [pc, #12]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800468a:	5cd3      	ldrb	r3, [r2, r3]
 800468c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	08009e64 	.word	0x08009e64

0800469c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046a0:	f7ff ffde 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80046a4:	4601      	mov	r1, r0
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	0adb      	lsrs	r3, r3, #11
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4a03      	ldr	r2, [pc, #12]	; (80046c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b2:	5cd3      	ldrb	r3, [r2, r3]
 80046b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	08009e64 	.word	0x08009e64

080046c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <RCC_Delay+0x34>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <RCC_Delay+0x38>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	0a5b      	lsrs	r3, r3, #9
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046e0:	bf00      	nop
  }
  while (Delay --);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	60fa      	str	r2, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f9      	bne.n	80046e0 <RCC_Delay+0x1c>
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000028 	.word	0x20000028
 80046fc:	10624dd3 	.word	0x10624dd3

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d07d      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800471c:	2300      	movs	r3, #0
 800471e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004720:	4b4f      	ldr	r3, [pc, #316]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10d      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472c:	4a4c      	ldr	r2, [pc, #304]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	4b4c      	ldr	r3, [pc, #304]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004736:	61d3      	str	r3, [r2, #28]
 8004738:	4b49      	ldr	r3, [pc, #292]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	4b46      	ldr	r3, [pc, #280]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d118      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004754:	4a43      	ldr	r2, [pc, #268]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004756:	4b43      	ldr	r3, [pc, #268]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004760:	f7fc fcfa 	bl	8001158 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	e008      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004768:	f7fc fcf6 	bl	8001158 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e06d      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b3a      	ldr	r3, [pc, #232]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004786:	4b36      	ldr	r3, [pc, #216]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d02e      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d027      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047a4:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ae:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047b4:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ba:	4a29      	ldr	r2, [pc, #164]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d014      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fc fcc5 	bl	8001158 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fc fcc1 	bl	8001158 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e036      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ee      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f4:	491a      	ldr	r1, [pc, #104]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f6:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4313      	orrs	r3, r2
 8004804:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480c:	4a14      	ldr	r2, [pc, #80]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004816:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004824:	490e      	ldr	r1, [pc, #56]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004842:	4907      	ldr	r1, [pc, #28]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
 8004864:	40007000 	.word	0x40007000
 8004868:	42420440 	.word	0x42420440

0800486c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b08d      	sub	sp, #52	; 0x34
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004874:	4b55      	ldr	r3, [pc, #340]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004876:	f107 040c 	add.w	r4, r7, #12
 800487a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800487c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004880:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
 800488a:	2300      	movs	r3, #0
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488e:	2300      	movs	r3, #0
 8004890:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	2300      	movs	r3, #0
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d07f      	beq.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d002      	beq.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d048      	beq.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048a8:	e08b      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048b0:	4b48      	ldr	r3, [pc, #288]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d07f      	beq.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	0c9b      	lsrs	r3, r3, #18
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80048c8:	4413      	add	r3, r2
 80048ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048ce:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	0c5b      	lsrs	r3, r3, #17
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80048e8:	4413      	add	r3, r2
 80048ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80048fa:	4a37      	ldr	r2, [pc, #220]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	6a3a      	ldr	r2, [r7, #32]
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490a:	e004      	b.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	4a33      	ldr	r2, [pc, #204]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004916:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004922:	d102      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004928:	e048      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004938:	e040      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494a:	d108      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
 800495c:	e01f      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004968:	d109      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800496a:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004976:	f649 4340 	movw	r3, #40000	; 0x9c40
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
 800497c:	e00f      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004988:	d11a      	bne.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d014      	beq.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004996:	f24f 4324 	movw	r3, #62500	; 0xf424
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800499c:	e010      	b.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800499e:	e00f      	b.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049a0:	f7ff fe7c 	bl	800469c <HAL_RCC_GetPCLK2Freq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	0b9b      	lsrs	r3, r3, #14
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	3301      	adds	r3, #1
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80049c0:	bf00      	nop
    }
  }
  return (frequency);
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3734      	adds	r7, #52	; 0x34
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}
 80049cc:	08008354 	.word	0x08008354
 80049d0:	08008364 	.word	0x08008364
 80049d4:	40021000 	.word	0x40021000
 80049d8:	007a1200 	.word	0x007a1200
 80049dc:	003d0900 	.word	0x003d0900
 80049e0:	aaaaaaab 	.word	0xaaaaaaab

080049e4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e084      	b.n	8004b04 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	7c5b      	ldrb	r3, [r3, #17]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f003 fa1c 	bl	8007e48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 faf4 	bl	8005004 <HAL_RTC_WaitForSynchro>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d004      	beq.n	8004a2c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2204      	movs	r2, #4
 8004a26:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e06b      	b.n	8004b04 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fbad 	bl	800518c <RTC_EnterInitMode>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d004      	beq.n	8004a42 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e060      	b.n	8004b04 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	6852      	ldr	r2, [r2, #4]
 8004a4c:	f022 0207 	bic.w	r2, r2, #7
 8004a50:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004a5a:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <HAL_RTC_Init+0x128>)
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <HAL_RTC_Init+0x128>)
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004a66:	4929      	ldr	r1, [pc, #164]	; (8004b0c <HAL_RTC_Init+0x128>)
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_RTC_Init+0x128>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d003      	beq.n	8004a8a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e00e      	b.n	8004aa8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	f7ff feee 	bl	800486c <HAL_RCCEx_GetPeriphCLKFreq>
 8004a90:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e030      	b.n	8004b04 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	6892      	ldr	r2, [r2, #8]
 8004ab2:	f022 010f 	bic.w	r1, r2, #15
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	0c12      	lsrs	r2, r2, #16
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	68f9      	ldr	r1, [r7, #12]
 8004ace:	b289      	uxth	r1, r1
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fb81 	bl	80051dc <RTC_ExitInitMode>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e00c      	b.n	8004b04 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40006c00 	.word	0x40006c00

08004b10 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_RTC_SetTime+0x20>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e080      	b.n	8004c36 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	7c1b      	ldrb	r3, [r3, #16]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_RTC_SetTime+0x30>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e07a      	b.n	8004c36 <HAL_RTC_SetTime+0x126>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d113      	bne.n	8004b7a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004b5c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	4619      	mov	r1, r3
 8004b66:	460b      	mov	r3, r1
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	1a5b      	subs	r3, r3, r1
 8004b6c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b6e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b74:	4413      	add	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e01e      	b.n	8004bb8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fb71 	bl	8005266 <RTC_Bcd2ToByte>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004b8c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fb66 	bl	8005266 <RTC_Bcd2ToByte>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004ba6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	789b      	ldrb	r3, [r3, #2]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fb5a 	bl	8005266 <RTC_Bcd2ToByte>
 8004bb2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004bb4:	4423      	add	r3, r4
 8004bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004bb8:	6979      	ldr	r1, [r7, #20]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fa7f 	bl	80050be <RTC_WriteTimeCounter>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e02f      	b.n	8004c36 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	6852      	ldr	r2, [r2, #4]
 8004be0:	f022 0205 	bic.w	r2, r2, #5
 8004be4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fa90 	bl	800510c <RTC_ReadAlarmCounter>
 8004bec:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf4:	d018      	beq.n	8004c28 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d214      	bcs.n	8004c28 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004c04:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c08:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c0a:	6939      	ldr	r1, [r7, #16]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fa96 	bl	800513e <RTC_WriteAlarmCounter>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e006      	b.n	8004c36 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd90      	pop	{r4, r7, pc}
	...

08004c40 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_RTC_GetTime+0x28>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0b5      	b.n	8004dd8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0ac      	b.n	8004dd8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f9ed 	bl	800505e <RTC_ReadTimeCounter>
 8004c84:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	4a55      	ldr	r2, [pc, #340]	; (8004de0 <HAL_RTC_GetTime+0x1a0>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	0adb      	lsrs	r3, r3, #11
 8004c90:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4b52      	ldr	r3, [pc, #328]	; (8004de0 <HAL_RTC_GetTime+0x1a0>)
 8004c96:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9a:	0adb      	lsrs	r3, r3, #11
 8004c9c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	4a4f      	ldr	r2, [pc, #316]	; (8004de4 <HAL_RTC_GetTime+0x1a4>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	4a4a      	ldr	r2, [pc, #296]	; (8004de0 <HAL_RTC_GetTime+0x1a0>)
 8004cb8:	fba2 1203 	umull	r1, r2, r2, r3
 8004cbc:	0ad2      	lsrs	r2, r2, #11
 8004cbe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004cc2:	fb01 f202 	mul.w	r2, r1, r2
 8004cc6:	1a9a      	subs	r2, r3, r2
 8004cc8:	4b46      	ldr	r3, [pc, #280]	; (8004de4 <HAL_RTC_GetTime+0x1a4>)
 8004cca:	fba3 1302 	umull	r1, r3, r3, r2
 8004cce:	0959      	lsrs	r1, r3, #5
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a5b      	subs	r3, r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	1ad1      	subs	r1, r2, r3
 8004cda:	b2ca      	uxtb	r2, r1
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b17      	cmp	r3, #23
 8004ce4:	d955      	bls.n	8004d92 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4a3f      	ldr	r2, [pc, #252]	; (8004de8 <HAL_RTC_GetTime+0x1a8>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004cf2:	6939      	ldr	r1, [r7, #16]
 8004cf4:	4b3c      	ldr	r3, [pc, #240]	; (8004de8 <HAL_RTC_GetTime+0x1a8>)
 8004cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cfa:	091a      	lsrs	r2, r3, #4
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	1aca      	subs	r2, r1, r3
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f9fd 	bl	800510c <RTC_ReadAlarmCounter>
 8004d12:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d008      	beq.n	8004d2e <HAL_RTC_GetTime+0xee>
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d904      	bls.n	8004d2e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e002      	b.n	8004d34 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <HAL_RTC_GetTime+0x1ac>)
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f9ba 	bl	80050be <RTC_WriteTimeCounter>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e041      	b.n	8004dd8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d00c      	beq.n	8004d76 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	4413      	add	r3, r2
 8004d62:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004d64:	69f9      	ldr	r1, [r7, #28]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f9e9 	bl	800513e <RTC_WriteAlarmCounter>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e030      	b.n	8004dd8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004d76:	69f9      	ldr	r1, [r7, #28]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f9e0 	bl	800513e <RTC_WriteAlarmCounter>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e027      	b.n	8004dd8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004d88:	6979      	ldr	r1, [r7, #20]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fa88 	bl	80052a0 <RTC_DateUpdate>
 8004d90:	e003      	b.n	8004d9a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01a      	beq.n	8004dd6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fa41 	bl	800522c <RTC_ByteToBcd2>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa38 	bl	800522c <RTC_ByteToBcd2>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	789b      	ldrb	r3, [r3, #2]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fa2f 	bl	800522c <RTC_ByteToBcd2>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	91a2b3c5 	.word	0x91a2b3c5
 8004de4:	88888889 	.word	0x88888889
 8004de8:	aaaaaaab 	.word	0xaaaaaaab
 8004dec:	00015180 	.word	0x00015180

08004df0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_RTC_SetDate+0x24>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e097      	b.n	8004f48 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	7c1b      	ldrb	r3, [r3, #16]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_RTC_SetDate+0x34>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e091      	b.n	8004f48 <HAL_RTC_SetDate+0x158>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10c      	bne.n	8004e50 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	78da      	ldrb	r2, [r3, #3]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	785a      	ldrb	r2, [r3, #1]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	789a      	ldrb	r2, [r3, #2]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	739a      	strb	r2, [r3, #14]
 8004e4e:	e01a      	b.n	8004e86 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	78db      	ldrb	r3, [r3, #3]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fa06 	bl	8005266 <RTC_Bcd2ToByte>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f9fd 	bl	8005266 <RTC_Bcd2ToByte>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	789b      	ldrb	r3, [r3, #2]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f9f4 	bl	8005266 <RTC_Bcd2ToByte>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	7bdb      	ldrb	r3, [r3, #15]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	7b59      	ldrb	r1, [r3, #13]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	7b9b      	ldrb	r3, [r3, #14]
 8004e94:	461a      	mov	r2, r3
 8004e96:	f000 fadf 	bl	8005458 <RTC_WeekDayNum>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	7b1a      	ldrb	r2, [r3, #12]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f8d7 	bl	800505e <RTC_ReadTimeCounter>
 8004eb0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <HAL_RTC_SetDate+0x160>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	0adb      	lsrs	r3, r3, #11
 8004ebc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b18      	cmp	r3, #24
 8004ec2:	d93a      	bls.n	8004f3a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4a23      	ldr	r2, [pc, #140]	; (8004f54 <HAL_RTC_SetDate+0x164>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <HAL_RTC_SetDate+0x168>)
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004eda:	69f9      	ldr	r1, [r7, #28]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f8ee 	bl	80050be <RTC_WriteTimeCounter>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2204      	movs	r2, #4
 8004eec:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e027      	b.n	8004f48 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f907 	bl	800510c <RTC_ReadAlarmCounter>
 8004efe:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d018      	beq.n	8004f3a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d214      	bcs.n	8004f3a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004f16:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004f1a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004f1c:	69b9      	ldr	r1, [r7, #24]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f90d 	bl	800513e <RTC_WriteAlarmCounter>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e006      	b.n	8004f48 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	91a2b3c5 	.word	0x91a2b3c5
 8004f54:	aaaaaaab 	.word	0xaaaaaaab
 8004f58:	00015180 	.word	0x00015180

08004f5c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	460a      	mov	r2, r1
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	460a      	mov	r2, r1
 8004f74:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_RTC_GetDate+0x26>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e03a      	b.n	8004ffc <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fe56 	bl	8004c40 <HAL_RTC_GetTime>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e02e      	b.n	8004ffc <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	7b1a      	ldrb	r2, [r3, #12]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	7bda      	ldrb	r2, [r3, #15]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	7b5a      	ldrb	r2, [r3, #13]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	7b9a      	ldrb	r2, [r3, #14]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01a      	beq.n	8004ffa <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	78db      	ldrb	r3, [r3, #3]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f92f 	bl	800522c <RTC_ByteToBcd2>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f926 	bl	800522c <RTC_ByteToBcd2>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	789b      	ldrb	r3, [r3, #2]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f91d 	bl	800522c <RTC_ByteToBcd2>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e01d      	b.n	8005056 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	6852      	ldr	r2, [r2, #4]
 8005024:	f022 0208 	bic.w	r2, r2, #8
 8005028:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800502a:	f7fc f895 	bl	8001158 <HAL_GetTick>
 800502e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005030:	e009      	b.n	8005046 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005032:	f7fc f891 	bl	8001158 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005040:	d901      	bls.n	8005046 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e007      	b.n	8005056 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ee      	beq.n	8005032 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800505e:	b480      	push	{r7}
 8005060:	b087      	sub	sp, #28
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	827b      	strh	r3, [r7, #18]
 800506a:	2300      	movs	r3, #0
 800506c:	823b      	strh	r3, [r7, #16]
 800506e:	2300      	movs	r3, #0
 8005070:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800508e:	8a7a      	ldrh	r2, [r7, #18]
 8005090:	8a3b      	ldrh	r3, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d008      	beq.n	80050a8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005096:	8a3b      	ldrh	r3, [r7, #16]
 8005098:	041a      	lsls	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e004      	b.n	80050b2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80050a8:	8a7b      	ldrh	r3, [r7, #18]
 80050aa:	041a      	lsls	r2, r3, #16
 80050ac:	89fb      	ldrh	r3, [r7, #14]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80050b2:	697b      	ldr	r3, [r7, #20]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f85d 	bl	800518c <RTC_EnterInitMode>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	e011      	b.n	8005102 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	0c12      	lsrs	r2, r2, #16
 80050e6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	b292      	uxth	r2, r2
 80050f0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f872 	bl	80051dc <RTC_ExitInitMode>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	81fb      	strh	r3, [r7, #14]
 8005118:	2300      	movs	r3, #0
 800511a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	041a      	lsls	r2, r3, #16
 8005130:	89bb      	ldrh	r3, [r7, #12]
 8005132:	4313      	orrs	r3, r2
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f81d 	bl	800518c <RTC_EnterInitMode>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
 800515c:	e011      	b.n	8005182 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	0c12      	lsrs	r2, r2, #16
 8005166:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	b292      	uxth	r2, r2
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f832 	bl	80051dc <RTC_ExitInitMode>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005198:	f7fb ffde 	bl	8001158 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800519e:	e009      	b.n	80051b4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80051a0:	f7fb ffda 	bl	8001158 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ae:	d901      	bls.n	80051b4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e00f      	b.n	80051d4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ee      	beq.n	80051a0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	6852      	ldr	r2, [r2, #4]
 80051cc:	f042 0210 	orr.w	r2, r2, #16
 80051d0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	6852      	ldr	r2, [r2, #4]
 80051f2:	f022 0210 	bic.w	r2, r2, #16
 80051f6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80051f8:	f7fb ffae 	bl	8001158 <HAL_GetTick>
 80051fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051fe:	e009      	b.n	8005214 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005200:	f7fb ffaa 	bl	8001158 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800520e:	d901      	bls.n	8005214 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e007      	b.n	8005224 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0ee      	beq.n	8005200 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800523a:	e005      	b.n	8005248 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	3b0a      	subs	r3, #10
 8005246:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	2b09      	cmp	r3, #9
 800524c:	d8f6      	bhi.n	800523c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	b2da      	uxtb	r2, r3
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	4313      	orrs	r3, r2
 800525a:	b2db      	uxtb	r3, r3
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	4603      	mov	r3, r0
 800526e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	4413      	add	r3, r2
 8005294:	b2db      	uxtb	r3, r3
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	7bdb      	ldrb	r3, [r3, #15]
 80052be:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	7b5b      	ldrb	r3, [r3, #13]
 80052c4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7b9b      	ldrb	r3, [r3, #14]
 80052ca:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80052cc:	2300      	movs	r3, #0
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	e06f      	b.n	80053b2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d011      	beq.n	80052fc <RTC_DateUpdate+0x5c>
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d00e      	beq.n	80052fc <RTC_DateUpdate+0x5c>
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b05      	cmp	r3, #5
 80052e2:	d00b      	beq.n	80052fc <RTC_DateUpdate+0x5c>
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b07      	cmp	r3, #7
 80052e8:	d008      	beq.n	80052fc <RTC_DateUpdate+0x5c>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d005      	beq.n	80052fc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0a      	cmp	r3, #10
 80052f4:	d002      	beq.n	80052fc <RTC_DateUpdate+0x5c>
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	d117      	bne.n	800532c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b1e      	cmp	r3, #30
 8005300:	d803      	bhi.n	800530a <RTC_DateUpdate+0x6a>
      {
        day++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005308:	e050      	b.n	80053ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b0c      	cmp	r3, #12
 800530e:	d005      	beq.n	800531c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	3301      	adds	r3, #1
 8005314:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005316:	2301      	movs	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800531a:	e047      	b.n	80053ac <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800531c:	2301      	movs	r3, #1
 800531e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005320:	2301      	movs	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
          year++;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3301      	adds	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800532a:	e03f      	b.n	80053ac <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b04      	cmp	r3, #4
 8005330:	d008      	beq.n	8005344 <RTC_DateUpdate+0xa4>
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b06      	cmp	r3, #6
 8005336:	d005      	beq.n	8005344 <RTC_DateUpdate+0xa4>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b09      	cmp	r3, #9
 800533c:	d002      	beq.n	8005344 <RTC_DateUpdate+0xa4>
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b0b      	cmp	r3, #11
 8005342:	d10c      	bne.n	800535e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b1d      	cmp	r3, #29
 8005348:	d803      	bhi.n	8005352 <RTC_DateUpdate+0xb2>
      {
        day++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005350:	e02c      	b.n	80053ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3301      	adds	r3, #1
 8005356:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005358:	2301      	movs	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800535c:	e026      	b.n	80053ac <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d123      	bne.n	80053ac <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b1b      	cmp	r3, #27
 8005368:	d803      	bhi.n	8005372 <RTC_DateUpdate+0xd2>
      {
        day++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e01c      	b.n	80053ac <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b1c      	cmp	r3, #28
 8005376:	d111      	bne.n	800539c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	b29b      	uxth	r3, r3
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f839 	bl	80053f4 <RTC_IsLeapYear>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e00d      	b.n	80053ac <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	3301      	adds	r3, #1
 8005394:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005396:	2301      	movs	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e007      	b.n	80053ac <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b1d      	cmp	r3, #29
 80053a0:	d104      	bne.n	80053ac <RTC_DateUpdate+0x10c>
      {
        month++;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3301      	adds	r3, #1
 80053a6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80053a8:	2301      	movs	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	3301      	adds	r3, #1
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d38b      	bcc.n	80052d2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	6978      	ldr	r0, [r7, #20]
 80053de:	f000 f83b 	bl	8005458 <RTC_WeekDayNum>
 80053e2:	4603      	mov	r3, r0
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	731a      	strb	r2, [r3, #12]
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	e01d      	b.n	800544a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	4a10      	ldr	r2, [pc, #64]	; (8005454 <RTC_IsLeapYear+0x60>)
 8005412:	fba2 1203 	umull	r1, r2, r2, r3
 8005416:	0952      	lsrs	r2, r2, #5
 8005418:	2164      	movs	r1, #100	; 0x64
 800541a:	fb01 f202 	mul.w	r2, r1, r2
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005426:	2301      	movs	r3, #1
 8005428:	e00f      	b.n	800544a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <RTC_IsLeapYear+0x60>)
 800542e:	fba2 1203 	umull	r1, r2, r2, r3
 8005432:	09d2      	lsrs	r2, r2, #7
 8005434:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005438:	fb01 f202 	mul.w	r2, r1, r2
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005448:	2300      	movs	r3, #0
  }
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	51eb851f 	.word	0x51eb851f

08005458 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
 8005464:	4613      	mov	r3, r2
 8005466:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005476:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d82d      	bhi.n	80054da <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	4613      	mov	r3, r2
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	4a2c      	ldr	r2, [pc, #176]	; (800553c <RTC_WeekDayNum+0xe4>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	085a      	lsrs	r2, r3, #1
 8005492:	78bb      	ldrb	r3, [r7, #2]
 8005494:	441a      	add	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	441a      	add	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3b01      	subs	r3, #1
 800549e:	089b      	lsrs	r3, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	4926      	ldr	r1, [pc, #152]	; (8005540 <RTC_WeekDayNum+0xe8>)
 80054a8:	fba1 1303 	umull	r1, r3, r1, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	4922      	ldr	r1, [pc, #136]	; (8005540 <RTC_WeekDayNum+0xe8>)
 80054b6:	fba1 1303 	umull	r1, r3, r1, r3
 80054ba:	09db      	lsrs	r3, r3, #7
 80054bc:	4413      	add	r3, r2
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	4b20      	ldr	r3, [pc, #128]	; (8005544 <RTC_WeekDayNum+0xec>)
 80054c2:	fba3 1302 	umull	r1, r3, r3, r2
 80054c6:	1ad1      	subs	r1, r2, r3
 80054c8:	0849      	lsrs	r1, r1, #1
 80054ca:	440b      	add	r3, r1
 80054cc:	0899      	lsrs	r1, r3, #2
 80054ce:	460b      	mov	r3, r1
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	1a5b      	subs	r3, r3, r1
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e029      	b.n	800552e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	4613      	mov	r3, r2
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	4a15      	ldr	r2, [pc, #84]	; (800553c <RTC_WeekDayNum+0xe4>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	085a      	lsrs	r2, r3, #1
 80054ee:	78bb      	ldrb	r3, [r7, #2]
 80054f0:	441a      	add	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	441a      	add	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	441a      	add	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4910      	ldr	r1, [pc, #64]	; (8005540 <RTC_WeekDayNum+0xe8>)
 8005500:	fba1 1303 	umull	r1, r3, r1, r3
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	490d      	ldr	r1, [pc, #52]	; (8005540 <RTC_WeekDayNum+0xe8>)
 800550c:	fba1 1303 	umull	r1, r3, r1, r3
 8005510:	09db      	lsrs	r3, r3, #7
 8005512:	4413      	add	r3, r2
 8005514:	1c9a      	adds	r2, r3, #2
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <RTC_WeekDayNum+0xec>)
 8005518:	fba3 1302 	umull	r1, r3, r3, r2
 800551c:	1ad1      	subs	r1, r2, r3
 800551e:	0849      	lsrs	r1, r1, #1
 8005520:	440b      	add	r3, r1
 8005522:	0899      	lsrs	r1, r3, #2
 8005524:	460b      	mov	r3, r1
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	1a5b      	subs	r3, r3, r1
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	b2db      	uxtb	r3, r3
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	38e38e39 	.word	0x38e38e39
 8005540:	51eb851f 	.word	0x51eb851f
 8005544:	24924925 	.word	0x24924925

08005548 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d024      	beq.n	80055a8 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01d      	beq.n	80055a8 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f821 	bl	80055c2 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0204 	mvn.w	r2, #4
 8005588:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2204      	movs	r2, #4
 800558e:	745a      	strb	r2, [r3, #17]
 8005590:	e005      	b.n	800559e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f80c 	bl	80055b0 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0201 	mvn.w	r2, #1
 80055a6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80055e4:	4b07      	ldr	r3, [pc, #28]	; (8005604 <HAL_RTCEx_BKUPWrite+0x30>)
 80055e6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4413      	add	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	b292      	uxth	r2, r2
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	40006c00 	.word	0x40006c00

08005608 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <HAL_RTCEx_BKUPRead+0x34>)
 800561c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8005630:	68bb      	ldr	r3, [r7, #8]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr
 800563c:	40006c00 	.word	0x40006c00

08005640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e041      	b.n	80056d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f002 fc1a 	bl	8007ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fa6c 	bl	8005b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e03a      	b.n	800576e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	68d2      	ldr	r2, [r2, #12]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a18      	ldr	r2, [pc, #96]	; (8005778 <HAL_TIM_Base_Start_IT+0x98>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00e      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0x58>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d009      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0x58>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <HAL_TIM_Base_Start_IT+0x9c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0x58>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_TIM_Base_Start_IT+0xa0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d111      	bne.n	800575c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b06      	cmp	r3, #6
 8005748:	d010      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	f042 0201 	orr.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	e007      	b.n	800576c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	40012c00 	.word	0x40012c00
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800

08005784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b02      	cmp	r3, #2
 8005798:	d122      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d11b      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0202 	mvn.w	r2, #2
 80057b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f9ad 	bl	8005b26 <HAL_TIM_IC_CaptureCallback>
 80057cc:	e005      	b.n	80057da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9a0 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f9af 	bl	8005b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d122      	bne.n	8005834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d11b      	bne.n	8005834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0204 	mvn.w	r2, #4
 8005804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f983 	bl	8005b26 <HAL_TIM_IC_CaptureCallback>
 8005820:	e005      	b.n	800582e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f976 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f985 	bl	8005b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b08      	cmp	r3, #8
 8005840:	d122      	bne.n	8005888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b08      	cmp	r3, #8
 800584e:	d11b      	bne.n	8005888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0208 	mvn.w	r2, #8
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2204      	movs	r2, #4
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f959 	bl	8005b26 <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f94c 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f95b 	bl	8005b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b10      	cmp	r3, #16
 8005894:	d122      	bne.n	80058dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d11b      	bne.n	80058dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0210 	mvn.w	r2, #16
 80058ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2208      	movs	r2, #8
 80058b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f92f 	bl	8005b26 <HAL_TIM_IC_CaptureCallback>
 80058c8:	e005      	b.n	80058d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f922 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f931 	bl	8005b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d10e      	bne.n	8005908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0201 	mvn.w	r2, #1
 8005900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8fd 	bl	8005b02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b80      	cmp	r3, #128	; 0x80
 8005914:	d10e      	bne.n	8005934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d107      	bne.n	8005934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa73 	bl	8005e1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d10e      	bne.n	8005960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d107      	bne.n	8005960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8f5 	bl	8005b4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b20      	cmp	r3, #32
 800596c:	d10e      	bne.n	800598c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b20      	cmp	r3, #32
 800597a:	d107      	bne.n	800598c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0220 	mvn.w	r2, #32
 8005984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa3e 	bl	8005e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_TIM_ConfigClockSource+0x18>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e0a6      	b.n	8005afa <HAL_TIM_ConfigClockSource+0x166>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b40      	cmp	r3, #64	; 0x40
 80059e2:	d067      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0x120>
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d80b      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x6c>
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d073      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x140>
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d802      	bhi.n	80059f6 <HAL_TIM_ConfigClockSource+0x62>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d06f      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059f4:	e078      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d06c      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x140>
 80059fa:	2b30      	cmp	r3, #48	; 0x30
 80059fc:	d06a      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80059fe:	e073      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a00:	2b70      	cmp	r3, #112	; 0x70
 8005a02:	d00d      	beq.n	8005a20 <HAL_TIM_ConfigClockSource+0x8c>
 8005a04:	2b70      	cmp	r3, #112	; 0x70
 8005a06:	d804      	bhi.n	8005a12 <HAL_TIM_ConfigClockSource+0x7e>
 8005a08:	2b50      	cmp	r3, #80	; 0x50
 8005a0a:	d033      	beq.n	8005a74 <HAL_TIM_ConfigClockSource+0xe0>
 8005a0c:	2b60      	cmp	r3, #96	; 0x60
 8005a0e:	d041      	beq.n	8005a94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a10:	e06a      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a16:	d066      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x152>
 8005a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1c:	d017      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a1e:	e063      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6899      	ldr	r1, [r3, #8]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f000 f96d 	bl	8005d0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	609a      	str	r2, [r3, #8]
      break;
 8005a4c:	e04c      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6899      	ldr	r1, [r3, #8]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f000 f956 	bl	8005d0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	6892      	ldr	r2, [r2, #8]
 8005a6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a70:	609a      	str	r2, [r3, #8]
      break;
 8005a72:	e039      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6859      	ldr	r1, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	461a      	mov	r2, r3
 8005a82:	f000 f8cd 	bl	8005c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2150      	movs	r1, #80	; 0x50
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 f924 	bl	8005cda <TIM_ITRx_SetConfig>
      break;
 8005a92:	e029      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6859      	ldr	r1, [r3, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f000 f8eb 	bl	8005c7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2160      	movs	r1, #96	; 0x60
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 f914 	bl	8005cda <TIM_ITRx_SetConfig>
      break;
 8005ab2:	e019      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f000 f8ad 	bl	8005c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2140      	movs	r1, #64	; 0x40
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f904 	bl	8005cda <TIM_ITRx_SetConfig>
      break;
 8005ad2:	e009      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 f8fb 	bl	8005cda <TIM_ITRx_SetConfig>
        break;
 8005ae4:	e000      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr

08005b4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <TIM_Base_SetConfig+0xb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_Base_SetConfig+0x30>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7a:	d007      	beq.n	8005b8c <TIM_Base_SetConfig+0x30>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a26      	ldr	r2, [pc, #152]	; (8005c18 <TIM_Base_SetConfig+0xbc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0x30>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a25      	ldr	r2, [pc, #148]	; (8005c1c <TIM_Base_SetConfig+0xc0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d108      	bne.n	8005b9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <TIM_Base_SetConfig+0xb8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_Base_SetConfig+0x62>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bac:	d007      	beq.n	8005bbe <TIM_Base_SetConfig+0x62>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a19      	ldr	r2, [pc, #100]	; (8005c18 <TIM_Base_SetConfig+0xbc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_Base_SetConfig+0x62>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <TIM_Base_SetConfig+0xc0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d108      	bne.n	8005bd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a07      	ldr	r2, [pc, #28]	; (8005c14 <TIM_Base_SetConfig+0xb8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d103      	bne.n	8005c04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	615a      	str	r2, [r3, #20]
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800

08005c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f023 0201 	bic.w	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f023 030a 	bic.w	r3, r3, #10
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f023 0210 	bic.w	r2, r3, #16
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ca6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	031b      	lsls	r3, r3, #12
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	621a      	str	r2, [r3, #32]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr

08005cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f043 0307 	orr.w	r3, r3, #7
 8005cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	609a      	str	r2, [r3, #8]
}
 8005d04:	bf00      	nop
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b087      	sub	sp, #28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	021a      	lsls	r2, r3, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	609a      	str	r2, [r3, #8]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e046      	b.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a16      	ldr	r2, [pc, #88]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d009      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10c      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800

08005e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <max30102_WriteReg>:
#include"MAX30102.h"

extern I2C_HandleTypeDef hi2c2;

void max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af04      	add	r7, sp, #16
 8005e32:	4603      	mov	r3, r0
 8005e34:	460a      	mov	r2, r1
 8005e36:	71fb      	strb	r3, [r7, #7]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, 0xAE, uch_addr, 0x00000001U, &uch_data, 1, 10);
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	230a      	movs	r3, #10
 8005e42:	9302      	str	r3, [sp, #8]
 8005e44:	2301      	movs	r3, #1
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	1dbb      	adds	r3, r7, #6
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	21ae      	movs	r1, #174	; 0xae
 8005e50:	4803      	ldr	r0, [pc, #12]	; (8005e60 <max30102_WriteReg+0x34>)
 8005e52:	f7fb fe03 	bl	8001a5c <HAL_I2C_Mem_Write>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	200005c4 	.word	0x200005c4

08005e64 <max30102_ReadReg>:

void max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af04      	add	r7, sp, #16
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	6039      	str	r1, [r7, #0]
 8005e6e:	71fb      	strb	r3, [r7, #7]
	 HAL_I2C_Mem_Read(&hi2c2, 0xAF, uch_addr, 0x00000001U, puch_data, 1, 10);
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	230a      	movs	r3, #10
 8005e76:	9302      	str	r3, [sp, #8]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	2301      	movs	r3, #1
 8005e82:	21af      	movs	r1, #175	; 0xaf
 8005e84:	4803      	ldr	r0, [pc, #12]	; (8005e94 <max30102_ReadReg+0x30>)
 8005e86:	f7fb fee3 	bl	8001c50 <HAL_I2C_Mem_Read>
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200005c4 	.word	0x200005c4

08005e98 <max30102_ReadFifo>:

void max30102_ReadFifo(uint32_t* pun_red_led, uint32_t* pun_ir_led)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af04      	add	r7, sp, #16
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    uint32_t un_temp;
    uint8_t uch_temp;
    uint8_t ach_i2c_data[6];
    *pun_ir_led = 0;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
    *pun_red_led = 0;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]

    max30102_ReadReg(REG_INTR_STATUS_1, &uch_temp);
 8005eae:	f107 0313 	add.w	r3, r7, #19
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	f7ff ffd5 	bl	8005e64 <max30102_ReadReg>
    max30102_ReadReg(REG_INTR_STATUS_2, &uch_temp);
 8005eba:	f107 0313 	add.w	r3, r7, #19
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f7ff ffcf 	bl	8005e64 <max30102_ReadReg>

	HAL_I2C_Mem_Read(&hi2c2, 0xAF, REG_FIFO_DATA, 0x00000001U, ach_i2c_data, 6, 10);
 8005ec6:	230a      	movs	r3, #10
 8005ec8:	9302      	str	r3, [sp, #8]
 8005eca:	2306      	movs	r3, #6
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	f107 030c 	add.w	r3, r7, #12
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	2207      	movs	r2, #7
 8005ed8:	21af      	movs	r1, #175	; 0xaf
 8005eda:	4827      	ldr	r0, [pc, #156]	; (8005f78 <max30102_ReadFifo+0xe0>)
 8005edc:	f7fb feb8 	bl	8001c50 <HAL_I2C_Mem_Read>

    un_temp = ach_i2c_data[0];
 8005ee0:	7b3b      	ldrb	r3, [r7, #12]
 8005ee2:	617b      	str	r3, [r7, #20]
    un_temp <<= 16;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
    un_temp = ach_i2c_data[1];
 8005ef6:	7b7b      	ldrb	r3, [r7, #13]
 8005ef8:	617b      	str	r3, [r7, #20]
    un_temp <<= 8;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	441a      	add	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	601a      	str	r2, [r3, #0]
    un_temp = ach_i2c_data[2];
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	617b      	str	r3, [r7, #20]
    *pun_red_led += un_temp;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	441a      	add	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]

    un_temp = ach_i2c_data[3];
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	617b      	str	r3, [r7, #20]
    un_temp <<= 16;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	041b      	lsls	r3, r3, #16
 8005f24:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	601a      	str	r2, [r3, #0]
    un_temp = ach_i2c_data[4];
 8005f32:	7c3b      	ldrb	r3, [r7, #16]
 8005f34:	617b      	str	r3, [r7, #20]
    un_temp <<= 8;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	441a      	add	r2, r3
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	601a      	str	r2, [r3, #0]
    un_temp = ach_i2c_data[5];
 8005f48:	7c7b      	ldrb	r3, [r7, #17]
 8005f4a:	617b      	str	r3, [r7, #20]
    *pun_ir_led += un_temp;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	441a      	add	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	601a      	str	r2, [r3, #0]
    *pun_red_led &= 0x03FFFF; //Mask MSB [23:18]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
    *pun_ir_led &= 0x03FFFF; //Mask MSB [23:18]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	601a      	str	r2, [r3, #0]
}
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	200005c4 	.word	0x200005c4

08005f7c <max30102_Init>:

void max30102_Init(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
	max30102_WriteReg(REG_MODE_CONFIG,0x40); //reset
 8005f80:	2140      	movs	r1, #64	; 0x40
 8005f82:	2009      	movs	r0, #9
 8005f84:	f7ff ff52 	bl	8005e2c <max30102_WriteReg>
	HAL_Delay(20);
 8005f88:	2014      	movs	r0, #20
 8005f8a:	f7fb f8ef 	bl	800116c <HAL_Delay>

	max30102_WriteReg(REG_INTR_ENABLE_1,0xc0);	// INTR setting
 8005f8e:	21c0      	movs	r1, #192	; 0xc0
 8005f90:	2002      	movs	r0, #2
 8005f92:	f7ff ff4b 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_INTR_ENABLE_2,0x00);
 8005f96:	2100      	movs	r1, #0
 8005f98:	2003      	movs	r0, #3
 8005f9a:	f7ff ff47 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_FIFO_WR_PTR,0x00);  	//FIFO_WR_PTR[4:0]
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	2004      	movs	r0, #4
 8005fa2:	f7ff ff43 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_OVF_COUNTER,0x00);  	//OVF_COUNTER[4:0]
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	2005      	movs	r0, #5
 8005faa:	f7ff ff3f 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_FIFO_RD_PTR,0x00);  	//FIFO_RD_PTR[4:0]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	2006      	movs	r0, #6
 8005fb2:	f7ff ff3b 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_FIFO_CONFIG,0x4f);  	//sample avg = 4, fifo rollover=false, fifo almost full = 17
 8005fb6:	214f      	movs	r1, #79	; 0x4f
 8005fb8:	2008      	movs	r0, #8
 8005fba:	f7ff ff37 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_MODE_CONFIG,0x03);  	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 8005fbe:	2103      	movs	r1, #3
 8005fc0:	2009      	movs	r0, #9
 8005fc2:	f7ff ff33 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_SPO2_CONFIG,0x7f);  	// SPO2 config
 8005fc6:	217f      	movs	r1, #127	; 0x7f
 8005fc8:	200a      	movs	r0, #10
 8005fca:	f7ff ff2f 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_LED1_PA,0x24);   		//Choose value for ~ 7mA for LED1
 8005fce:	2124      	movs	r1, #36	; 0x24
 8005fd0:	200c      	movs	r0, #12
 8005fd2:	f7ff ff2b 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_LED2_PA,0x24);   		// Choose value for ~ 7mA for LED2
 8005fd6:	2124      	movs	r1, #36	; 0x24
 8005fd8:	200d      	movs	r0, #13
 8005fda:	f7ff ff27 	bl	8005e2c <max30102_WriteReg>
	max30102_WriteReg(REG_PILOT_PA,0x7f);   	// Choose value for ~ 25mA for Pilot LED
 8005fde:	217f      	movs	r1, #127	; 0x7f
 8005fe0:	2010      	movs	r0, #16
 8005fe2:	f7ff ff23 	bl	8005e2c <max30102_WriteReg>
}
 8005fe6:	bf00      	nop
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	0000      	movs	r0, r0
 8005fec:	0000      	movs	r0, r0
	...

08005ff0 <rf_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_spo2                - Calculated SpO2 value
* \param[out]    *pch_spo2_valid         - 1 if the calculated SpO2 value is valid
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
**/
{
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	b09d      	sub	sp, #116	; 0x74
 8005ff6:	af04      	add	r7, sp, #16
 8005ff8:	6178      	str	r0, [r7, #20]
 8005ffa:	6139      	str	r1, [r7, #16]
 8005ffc:	60fa      	str	r2, [r7, #12]
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	466b      	mov	r3, sp
 8006002:	461e      	mov	r6, r3
  int32_t k;  
  static int32_t n_last_peak_interval=LOWEST_PERIOD;
  float f_ir_mean,f_red_mean,f_ir_sumsq,f_red_sumsq;
  float f_y_ac, f_x_ac, xy_ratio;
  float beta_ir, beta_red, x;
  float an_x[BUFFER_SIZE], *ptr_x; //ir
 8006004:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006008:	3b01      	subs	r3, #1
 800600a:	647b      	str	r3, [r7, #68]	; 0x44
 800600c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006010:	461a      	mov	r2, r3
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	0159      	lsls	r1, r3, #5
 8006018:	6079      	str	r1, [r7, #4]
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006020:	6079      	str	r1, [r7, #4]
 8006022:	0153      	lsls	r3, r2, #5
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800602a:	461a      	mov	r2, r3
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006034:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006038:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800603c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	3303      	adds	r3, #3
 8006044:	3307      	adds	r3, #7
 8006046:	08db      	lsrs	r3, r3, #3
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	ebad 0d03 	sub.w	sp, sp, r3
 800604e:	ab04      	add	r3, sp, #16
 8006050:	3303      	adds	r3, #3
 8006052:	089b      	lsrs	r3, r3, #2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	643b      	str	r3, [r7, #64]	; 0x40
  float an_y[BUFFER_SIZE], *ptr_y; //red
 8006058:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800605c:	3b01      	subs	r3, #1
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006060:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006064:	461a      	mov	r2, r3
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	ea4f 1943 	mov.w	r9, r3, lsl #5
 800606e:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8006072:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8006076:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800607a:	461a      	mov	r2, r3
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	015d      	lsls	r5, r3, #5
 8006082:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8006086:	0154      	lsls	r4, r2, #5
 8006088:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	3303      	adds	r3, #3
 8006090:	3307      	adds	r3, #7
 8006092:	08db      	lsrs	r3, r3, #3
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	ebad 0d03 	sub.w	sp, sp, r3
 800609a:	ab04      	add	r3, sp, #16
 800609c:	3303      	adds	r3, #3
 800609e:	089b      	lsrs	r3, r3, #2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	63bb      	str	r3, [r7, #56]	; 0x38

  // calculates DC mean and subtracts DC from ir and red
  f_ir_mean=0.0; 
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	65bb      	str	r3, [r7, #88]	; 0x58
  f_red_mean=0.0;
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	657b      	str	r3, [r7, #84]	; 0x54
  for (k=0; k<n_ir_buffer_length; ++k) {
 80060b0:	2300      	movs	r3, #0
 80060b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b4:	e020      	b.n	80060f8 <rf_heart_rate_and_oxygen_saturation+0x108>
    f_ir_mean += pun_ir_buffer[k];
 80060b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fa fdb3 	bl	8000c2c <__aeabi_ui2f>
 80060c6:	4603      	mov	r3, r0
 80060c8:	4619      	mov	r1, r3
 80060ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80060cc:	f7fa fcfe 	bl	8000acc <__addsf3>
 80060d0:	4603      	mov	r3, r0
 80060d2:	65bb      	str	r3, [r7, #88]	; 0x58
    f_red_mean += pun_red_buffer[k];
 80060d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa fda4 	bl	8000c2c <__aeabi_ui2f>
 80060e4:	4603      	mov	r3, r0
 80060e6:	4619      	mov	r1, r3
 80060e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80060ea:	f7fa fcef 	bl	8000acc <__addsf3>
 80060ee:	4603      	mov	r3, r0
 80060f0:	657b      	str	r3, [r7, #84]	; 0x54
  for (k=0; k<n_ir_buffer_length; ++k) {
 80060f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f4:	3301      	adds	r3, #1
 80060f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	dbda      	blt.n	80060b6 <rf_heart_rate_and_oxygen_saturation+0xc6>
  }
  f_ir_mean=f_ir_mean/n_ir_buffer_length ;
 8006100:	6938      	ldr	r0, [r7, #16]
 8006102:	f7fa fd97 	bl	8000c34 <__aeabi_i2f>
 8006106:	4603      	mov	r3, r0
 8006108:	4619      	mov	r1, r3
 800610a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800610c:	f7fa fe9a 	bl	8000e44 <__aeabi_fdiv>
 8006110:	4603      	mov	r3, r0
 8006112:	65bb      	str	r3, [r7, #88]	; 0x58
  f_red_mean=f_red_mean/n_ir_buffer_length ;
 8006114:	6938      	ldr	r0, [r7, #16]
 8006116:	f7fa fd8d 	bl	8000c34 <__aeabi_i2f>
 800611a:	4603      	mov	r3, r0
 800611c:	4619      	mov	r1, r3
 800611e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006120:	f7fa fe90 	bl	8000e44 <__aeabi_fdiv>
 8006124:	4603      	mov	r3, r0
 8006126:	657b      	str	r3, [r7, #84]	; 0x54
  
  // remove DC 
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8006128:	2300      	movs	r3, #0
 800612a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800612c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	64bb      	str	r3, [r7, #72]	; 0x48
 8006134:	e02a      	b.n	800618c <rf_heart_rate_and_oxygen_saturation+0x19c>
    *ptr_x = pun_ir_buffer[k] - f_ir_mean;
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f7fa fd73 	bl	8000c2c <__aeabi_ui2f>
 8006146:	4603      	mov	r3, r0
 8006148:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800614a:	4618      	mov	r0, r3
 800614c:	f7fa fcbc 	bl	8000ac8 <__aeabi_fsub>
 8006150:	4603      	mov	r3, r0
 8006152:	461a      	mov	r2, r3
 8006154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006156:	601a      	str	r2, [r3, #0]
    *ptr_y = pun_red_buffer[k] - f_red_mean;
 8006158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fa fd62 	bl	8000c2c <__aeabi_ui2f>
 8006168:	4603      	mov	r3, r0
 800616a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800616c:	4618      	mov	r0, r3
 800616e:	f7fa fcab 	bl	8000ac8 <__aeabi_fsub>
 8006172:	4603      	mov	r3, r0
 8006174:	461a      	mov	r2, r3
 8006176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006178:	601a      	str	r2, [r3, #0]
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 800617a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800617c:	3301      	adds	r3, #1
 800617e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006182:	3304      	adds	r3, #4
 8006184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006188:	3304      	adds	r3, #4
 800618a:	64bb      	str	r3, [r7, #72]	; 0x48
 800618c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	429a      	cmp	r2, r3
 8006192:	dbd0      	blt.n	8006136 <rf_heart_rate_and_oxygen_saturation+0x146>
  }

  // RF, remove linear trend (baseline leveling)
  beta_ir = rf_linear_regression_beta(an_x, mean_X, sum_X2);
 8006194:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8006196:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800619a:	3b01      	subs	r3, #1
 800619c:	4618      	mov	r0, r3
 800619e:	f7fa fd49 	bl	8000c34 <__aeabi_i2f>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fa fe4b 	bl	8000e44 <__aeabi_fdiv>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4619      	mov	r1, r3
 80061b2:	4ba5      	ldr	r3, [pc, #660]	; (8006448 <rf_heart_rate_and_oxygen_saturation+0x458>)
 80061b4:	461a      	mov	r2, r3
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 f954 	bl	8006464 <rf_linear_regression_beta>
 80061bc:	6378      	str	r0, [r7, #52]	; 0x34
  beta_red = rf_linear_regression_beta(an_y, mean_X, sum_X2);
 80061be:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80061c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80061c4:	3b01      	subs	r3, #1
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fa fd34 	bl	8000c34 <__aeabi_i2f>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fa fe36 	bl	8000e44 <__aeabi_fdiv>
 80061d8:	4603      	mov	r3, r0
 80061da:	4619      	mov	r1, r3
 80061dc:	4b9a      	ldr	r3, [pc, #616]	; (8006448 <rf_heart_rate_and_oxygen_saturation+0x458>)
 80061de:	461a      	mov	r2, r3
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f93f 	bl	8006464 <rf_linear_regression_beta>
 80061e6:	6338      	str	r0, [r7, #48]	; 0x30
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 80061e8:	2300      	movs	r3, #0
 80061ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80061f0:	3b01      	subs	r3, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fa fd1e 	bl	8000c34 <__aeabi_i2f>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80061fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006202:	4618      	mov	r0, r3
 8006204:	f7fa fe1e 	bl	8000e44 <__aeabi_fdiv>
 8006208:	4603      	mov	r3, r0
 800620a:	653b      	str	r3, [r7, #80]	; 0x50
 800620c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	64bb      	str	r3, [r7, #72]	; 0x48
 8006214:	e02d      	b.n	8006272 <rf_heart_rate_and_oxygen_saturation+0x282>
    *ptr_x -= beta_ir*x;
 8006216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006218:	681c      	ldr	r4, [r3, #0]
 800621a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800621c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800621e:	f7fa fd5d 	bl	8000cdc <__aeabi_fmul>
 8006222:	4603      	mov	r3, r0
 8006224:	4619      	mov	r1, r3
 8006226:	4620      	mov	r0, r4
 8006228:	f7fa fc4e 	bl	8000ac8 <__aeabi_fsub>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006232:	601a      	str	r2, [r3, #0]
    *ptr_y -= beta_red*x;
 8006234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006236:	681c      	ldr	r4, [r3, #0]
 8006238:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800623a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800623c:	f7fa fd4e 	bl	8000cdc <__aeabi_fmul>
 8006240:	4603      	mov	r3, r0
 8006242:	4619      	mov	r1, r3
 8006244:	4620      	mov	r0, r4
 8006246:	f7fa fc3f 	bl	8000ac8 <__aeabi_fsub>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006250:	601a      	str	r2, [r3, #0]
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 8006252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006254:	3301      	adds	r3, #1
 8006256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006258:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800625c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800625e:	f7fa fc35 	bl	8000acc <__addsf3>
 8006262:	4603      	mov	r3, r0
 8006264:	653b      	str	r3, [r7, #80]	; 0x50
 8006266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006268:	3304      	adds	r3, #4
 800626a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626e:	3304      	adds	r3, #4
 8006270:	64bb      	str	r3, [r7, #72]	; 0x48
 8006272:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	429a      	cmp	r2, r3
 8006278:	dbcd      	blt.n	8006216 <rf_heart_rate_and_oxygen_saturation+0x226>
  }
  
    // For SpO2 calculate RMS of both AC signals. In addition, pulse detector needs raw sum of squares for IR
  f_y_ac=rf_rms(an_y,n_ir_buffer_length,&f_red_sumsq);
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	f107 021c 	add.w	r2, r7, #28
 8006280:	6939      	ldr	r1, [r7, #16]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fa67 	bl	8006756 <rf_rms>
 8006288:	62f8      	str	r0, [r7, #44]	; 0x2c
  f_x_ac=rf_rms(an_x,n_ir_buffer_length,&f_ir_sumsq);
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	f107 0220 	add.w	r2, r7, #32
 8006290:	6939      	ldr	r1, [r7, #16]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fa5f 	bl	8006756 <rf_rms>
 8006298:	62b8      	str	r0, [r7, #40]	; 0x28

  // Calculate Pearson correlation between red and IR
  *correl=rf_Pcorrelation(an_x, an_y, n_ir_buffer_length)/sqrt(f_red_sumsq*f_ir_sumsq);
 800629a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 faa9 	bl	80067f8 <rf_Pcorrelation>
 80062a6:	4603      	mov	r3, r0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa f8b5 	bl	8000418 <__aeabi_f2d>
 80062ae:	4604      	mov	r4, r0
 80062b0:	460d      	mov	r5, r1
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fa fd0f 	bl	8000cdc <__aeabi_fmul>
 80062be:	4603      	mov	r3, r0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fa f8a9 	bl	8000418 <__aeabi_f2d>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4610      	mov	r0, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	f001 ff29 	bl	8008124 <sqrt>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7fa fa1b 	bl	8000714 <__aeabi_ddiv>
 80062de:	4603      	mov	r3, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	4618      	mov	r0, r3
 80062e4:	4621      	mov	r1, r4
 80062e6:	f7fa fb9b 	bl	8000a20 <__aeabi_d2f>
 80062ea:	4602      	mov	r2, r0
 80062ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f0:	601a      	str	r2, [r3, #0]

  // Find signal periodicity
  if(*correl>=min_pearson_correlation) {
 80062f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a54      	ldr	r2, [pc, #336]	; (800644c <rf_heart_rate_and_oxygen_saturation+0x45c>)
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fa fe9f 	bl	8001040 <__aeabi_fcmpge>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d026      	beq.n	8006356 <rf_heart_rate_and_oxygen_saturation+0x366>
    // At the beginning of oximetry run the exact range of heart rate is unknown. This may lead to wrong rate if the next call does not find the _first_
    // peak of the autocorrelation function. E.g., second peak would yield only 50% of the true rate. 
    if(LOWEST_PERIOD==n_last_peak_interval) 
 8006308:	4b51      	ldr	r3, [pc, #324]	; (8006450 <rf_heart_rate_and_oxygen_saturation+0x460>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b21      	cmp	r3, #33	; 0x21
 800630e:	d10b      	bne.n	8006328 <rf_heart_rate_and_oxygen_saturation+0x338>
      rf_initialize_periodicity_search(an_x, BUFFER_SIZE, &n_last_peak_interval, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq);
 8006310:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006312:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006316:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	9200      	str	r2, [sp, #0]
 8006320:	2396      	movs	r3, #150	; 0x96
 8006322:	4a4b      	ldr	r2, [pc, #300]	; (8006450 <rf_heart_rate_and_oxygen_saturation+0x460>)
 8006324:	f000 f91d 	bl	8006562 <rf_initialize_periodicity_search>
    // RF, If correlation os good, then find average periodicity of the IR signal. If aperiodic, return periodicity of 0
    if(n_last_peak_interval!=0)
 8006328:	4b49      	ldr	r3, [pc, #292]	; (8006450 <rf_heart_rate_and_oxygen_saturation+0x460>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d015      	beq.n	800635c <rf_heart_rate_and_oxygen_saturation+0x36c>
      rf_signal_periodicity(an_x, BUFFER_SIZE, &n_last_peak_interval, LOWEST_PERIOD, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq, ratio);
 8006330:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006332:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8006336:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006340:	9203      	str	r2, [sp, #12]
 8006342:	9302      	str	r3, [sp, #8]
 8006344:	9101      	str	r1, [sp, #4]
 8006346:	2396      	movs	r3, #150	; 0x96
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	2321      	movs	r3, #33	; 0x21
 800634c:	4a40      	ldr	r2, [pc, #256]	; (8006450 <rf_heart_rate_and_oxygen_saturation+0x460>)
 800634e:	4621      	mov	r1, r4
 8006350:	f000 f97b 	bl	800664a <rf_signal_periodicity>
 8006354:	e002      	b.n	800635c <rf_heart_rate_and_oxygen_saturation+0x36c>
  } else n_last_peak_interval=0;
 8006356:	4b3e      	ldr	r3, [pc, #248]	; (8006450 <rf_heart_rate_and_oxygen_saturation+0x460>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

  // Calculate heart rate if periodicity detector was successful. Otherwise, reset peak interval to its initial value and report error.
  if(n_last_peak_interval!=0) {
 800635c:	4b3c      	ldr	r3, [pc, #240]	; (8006450 <rf_heart_rate_and_oxygen_saturation+0x460>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d029      	beq.n	80063b8 <rf_heart_rate_and_oxygen_saturation+0x3c8>
    *pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 8006364:	4b3a      	ldr	r3, [pc, #232]	; (8006450 <rf_heart_rate_and_oxygen_saturation+0x460>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f241 7270 	movw	r2, #6000	; 0x1770
 800636c:	fb92 f2f3 	sdiv	r2, r2, r3
 8006370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006374:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8006376:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
    *pch_spo2_valid  = 0; 
    return;
  }

  // After trend removal, the mean represents DC level
  xy_ratio= (f_y_ac*f_ir_mean)/(f_x_ac*f_red_mean);  //formula is (f_y_ac*f_x_dc) / (f_x_ac*f_y_dc) ;
 800637e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006382:	f7fa fcab 	bl	8000cdc <__aeabi_fmul>
 8006386:	4603      	mov	r3, r0
 8006388:	461c      	mov	r4, r3
 800638a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800638c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638e:	f7fa fca5 	bl	8000cdc <__aeabi_fmul>
 8006392:	4603      	mov	r3, r0
 8006394:	4619      	mov	r1, r3
 8006396:	4620      	mov	r0, r4
 8006398:	f7fa fd54 	bl	8000e44 <__aeabi_fdiv>
 800639c:	4603      	mov	r3, r0
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 80063a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063a2:	f7fa f839 	bl	8000418 <__aeabi_f2d>
 80063a6:	a324      	add	r3, pc, #144	; (adr r3, 8006438 <rf_heart_rate_and_oxygen_saturation+0x448>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7fa fb18 	bl	80009e0 <__aeabi_dcmpgt>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d115      	bne.n	80063e2 <rf_heart_rate_and_oxygen_saturation+0x3f2>
 80063b6:	e031      	b.n	800641c <rf_heart_rate_and_oxygen_saturation+0x42c>
    n_last_peak_interval=LOWEST_PERIOD;
 80063b8:	4b25      	ldr	r3, [pc, #148]	; (8006450 <rf_heart_rate_and_oxygen_saturation+0x460>)
 80063ba:	2221      	movs	r2, #33	; 0x21
 80063bc:	601a      	str	r2, [r3, #0]
    *pn_heart_rate = -999; // unable to calculate because signal looks aperiodic
 80063be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063c2:	4a24      	ldr	r2, [pc, #144]	; (8006454 <rf_heart_rate_and_oxygen_saturation+0x464>)
 80063c4:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 80063c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063ca:	2200      	movs	r2, #0
 80063cc:	701a      	strb	r2, [r3, #0]
    *pn_spo2 =  -999 ; // do not use SPO2 from this corrupt signal
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4a21      	ldr	r2, [pc, #132]	; (8006458 <rf_heart_rate_and_oxygen_saturation+0x468>)
 80063d2:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0; 
 80063d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
    return;
 80063dc:	bf00      	nop
 80063de:	46b5      	mov	sp, r6
 80063e0:	e024      	b.n	800642c <rf_heart_rate_and_oxygen_saturation+0x43c>
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 80063e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063e4:	f7fa f818 	bl	8000418 <__aeabi_f2d>
 80063e8:	a315      	add	r3, pc, #84	; (adr r3, 8006440 <rf_heart_rate_and_oxygen_saturation+0x450>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7fa fad9 	bl	80009a4 <__aeabi_dcmplt>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d011      	beq.n	800641c <rf_heart_rate_and_oxygen_saturation+0x42c>
    //*pn_spo2 = (-45.060*xy_ratio + 30.354)*xy_ratio + 94.845;
	  *pn_spo2 = 104 - 17*xy_ratio;
 80063f8:	4918      	ldr	r1, [pc, #96]	; (800645c <rf_heart_rate_and_oxygen_saturation+0x46c>)
 80063fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063fc:	f7fa fc6e 	bl	8000cdc <__aeabi_fmul>
 8006400:	4603      	mov	r3, r0
 8006402:	4619      	mov	r1, r3
 8006404:	4816      	ldr	r0, [pc, #88]	; (8006460 <rf_heart_rate_and_oxygen_saturation+0x470>)
 8006406:	f7fa fb5f 	bl	8000ac8 <__aeabi_fsub>
 800640a:	4603      	mov	r3, r0
 800640c:	461a      	mov	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid = 1;
 8006412:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e006      	b.n	800642a <rf_heart_rate_and_oxygen_saturation+0x43a>
  } else {
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4a0e      	ldr	r2, [pc, #56]	; (8006458 <rf_heart_rate_and_oxygen_saturation+0x468>)
 8006420:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0; 
 8006422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006426:	2200      	movs	r2, #0
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	46b5      	mov	sp, r6
  }
}
 800642c:	3764      	adds	r7, #100	; 0x64
 800642e:	46bd      	mov	sp, r7
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	f3af 8000 	nop.w
 8006438:	47ae147b 	.word	0x47ae147b
 800643c:	3f947ae1 	.word	0x3f947ae1
 8006440:	d70a3d71 	.word	0xd70a3d71
 8006444:	3ffd70a3 	.word	0x3ffd70a3
 8006448:	4b1dfe4a 	.word	0x4b1dfe4a
 800644c:	3f4ccccd 	.word	0x3f4ccccd
 8006450:	20000008 	.word	0x20000008
 8006454:	fffffc19 	.word	0xfffffc19
 8006458:	c479c000 	.word	0xc479c000
 800645c:	41880000 	.word	0x41880000
 8006460:	42d00000 	.word	0x42d00000

08006464 <rf_linear_regression_beta>:
* \par          Details
*               Compute directional coefficient, beta, of a linear regression of pn_x against mean-centered
*               point index values (0 to BUFFER_SIZE-1). xmean must equal to (BUFFER_SIZE-1)/2! sum_x2 is 
*               the sum of squares of the mean-centered index values. 
**/
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  float x,beta,*pn_ptr;
  beta=0.0;
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e016      	b.n	80064b2 <rf_linear_regression_beta+0x4e>
    beta+=x*(*pn_ptr);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69f9      	ldr	r1, [r7, #28]
 800648a:	4618      	mov	r0, r3
 800648c:	f7fa fc26 	bl	8000cdc <__aeabi_fmul>
 8006490:	4603      	mov	r3, r0
 8006492:	4619      	mov	r1, r3
 8006494:	69b8      	ldr	r0, [r7, #24]
 8006496:	f7fa fb19 	bl	8000acc <__addsf3>
 800649a:	4603      	mov	r3, r0
 800649c:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 800649e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80064a2:	69f8      	ldr	r0, [r7, #28]
 80064a4:	f7fa fb12 	bl	8000acc <__addsf3>
 80064a8:	4603      	mov	r3, r0
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	3304      	adds	r3, #4
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	69f8      	ldr	r0, [r7, #28]
 80064b6:	f7fa fdb9 	bl	800102c <__aeabi_fcmple>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e1      	bne.n	8006484 <rf_linear_regression_beta+0x20>
  return beta/sum_x2;
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	69b8      	ldr	r0, [r7, #24]
 80064c4:	f7fa fcbe 	bl	8000e44 <__aeabi_fdiv>
 80064c8:	4603      	mov	r3, r0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <rf_autocorrelation>:
/**
* \brief        Autocorrelation function
* \par          Details
*               Compute autocorrelation sequence's n_lag's element for a given series pn_x
**/
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b088      	sub	sp, #32
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
  int16_t i, n_temp=n_size-n_lag;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	827b      	strh	r3, [r7, #18]
  float sum=0.0,*pn_ptr;
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
  if(n_temp<=0) return sum;
 80064f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dc01      	bgt.n	80064fe <rf_autocorrelation+0x2c>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	e02d      	b.n	800655a <rf_autocorrelation+0x88>
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 80064fe:	2300      	movs	r3, #0
 8006500:	83fb      	strh	r3, [r7, #30]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	e017      	b.n	8006538 <rf_autocorrelation+0x66>
    sum += (*pn_ptr)*(*(pn_ptr+n_lag));
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4413      	add	r3, r2
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	f7fa fbe0 	bl	8000cdc <__aeabi_fmul>
 800651c:	4603      	mov	r3, r0
 800651e:	4619      	mov	r1, r3
 8006520:	69b8      	ldr	r0, [r7, #24]
 8006522:	f7fa fad3 	bl	8000acc <__addsf3>
 8006526:	4603      	mov	r3, r0
 8006528:	61bb      	str	r3, [r7, #24]
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 800652a:	8bfb      	ldrh	r3, [r7, #30]
 800652c:	3301      	adds	r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	83fb      	strh	r3, [r7, #30]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	3304      	adds	r3, #4
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800653c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006540:	429a      	cmp	r2, r3
 8006542:	dbe1      	blt.n	8006508 <rf_autocorrelation+0x36>
  }
  return sum/n_temp;
 8006544:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006548:	4618      	mov	r0, r3
 800654a:	f7fa fb73 	bl	8000c34 <__aeabi_i2f>
 800654e:	4603      	mov	r3, r0
 8006550:	4619      	mov	r1, r3
 8006552:	69b8      	ldr	r0, [r7, #24]
 8006554:	f7fa fc76 	bl	8000e44 <__aeabi_fdiv>
 8006558:	4603      	mov	r3, r0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <rf_initialize_periodicity_search>:
*               the _first_ peak of the autocorrelation function. If at all lags until  
*               n_max_distance the autocorrelation is less than min_aut_ratio fraction 
*               of the autocorrelation at lag=0, then the input signal is insufficiently 
*               periodic and probably indicates motion artifacts.
**/
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b088      	sub	sp, #32
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_right;
  // At this point, *p_last_periodicity = LOWEST_PERIOD. Start walking to the right,
  // two steps at a time, until lag ratio fulfills quality criteria or HIGHEST_PERIOD
  // is reached.
  n_lag=*p_last_periodicity;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	61fb      	str	r3, [r7, #28]
  aut_right=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff ffa9 	bl	80064d2 <rf_autocorrelation>
 8006580:	6178      	str	r0, [r7, #20]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	61bb      	str	r3, [r7, #24]
  // Check sanity
  if(aut/aut_lag0 >= min_aut_ratio) {
 8006586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006588:	6978      	ldr	r0, [r7, #20]
 800658a:	f7fa fc5b 	bl	8000e44 <__aeabi_fdiv>
 800658e:	4603      	mov	r3, r0
 8006590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006592:	4618      	mov	r0, r3
 8006594:	f7fa fd54 	bl	8001040 <__aeabi_fcmpge>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d100      	bne.n	80065a0 <rf_initialize_periodicity_search+0x3e>
 800659e:	e02b      	b.n	80065f8 <rf_initialize_periodicity_search+0x96>
    // Either quality criterion, min_aut_ratio, is too low, or heart rate is too high.
    // Are we on autocorrelation's downward slope? If yes, continue to a local minimum.
    // If not, continue to the next block.
    do {
      aut=aut_right;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	617b      	str	r3, [r7, #20]
      n_lag+=2;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3302      	adds	r3, #2
 80065a8:	61fb      	str	r3, [r7, #28]
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7ff ff8f 	bl	80064d2 <rf_autocorrelation>
 80065b4:	61b8      	str	r0, [r7, #24]
    } while(aut_right/aut_lag0 >= min_aut_ratio && aut_right<aut && n_lag<=n_max_distance);
 80065b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065b8:	69b8      	ldr	r0, [r7, #24]
 80065ba:	f7fa fc43 	bl	8000e44 <__aeabi_fdiv>
 80065be:	4603      	mov	r3, r0
 80065c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fa fd3c 	bl	8001040 <__aeabi_fcmpge>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <rf_initialize_periodicity_search+0x82>
 80065ce:	6979      	ldr	r1, [r7, #20]
 80065d0:	69b8      	ldr	r0, [r7, #24]
 80065d2:	f7fa fd21 	bl	8001018 <__aeabi_fcmplt>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <rf_initialize_periodicity_search+0x82>
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	dddd      	ble.n	80065a0 <rf_initialize_periodicity_search+0x3e>
    if(n_lag>n_max_distance) {
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	dd03      	ble.n	80065f4 <rf_initialize_periodicity_search+0x92>
      // This should never happen, but if does return failure
      *p_last_periodicity=0;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
      return;
 80065f2:	e027      	b.n	8006644 <rf_initialize_periodicity_search+0xe2>
    }
    aut=aut_right;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	617b      	str	r3, [r7, #20]
  }
  // Walk to the right.
  do {
    aut=aut_right;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	617b      	str	r3, [r7, #20]
    n_lag+=2;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	3302      	adds	r3, #2
 8006600:	61fb      	str	r3, [r7, #28]
    aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff ff63 	bl	80064d2 <rf_autocorrelation>
 800660c:	61b8      	str	r0, [r7, #24]
  } while(aut_right/aut_lag0 < min_aut_ratio && n_lag<=n_max_distance);
 800660e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006610:	69b8      	ldr	r0, [r7, #24]
 8006612:	f7fa fc17 	bl	8000e44 <__aeabi_fdiv>
 8006616:	4603      	mov	r3, r0
 8006618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800661a:	4618      	mov	r0, r3
 800661c:	f7fa fcfc 	bl	8001018 <__aeabi_fcmplt>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <rf_initialize_periodicity_search+0xcc>
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	dde4      	ble.n	80065f8 <rf_initialize_periodicity_search+0x96>
  if(n_lag>n_max_distance) {
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	dd03      	ble.n	800663e <rf_initialize_periodicity_search+0xdc>
    // This should never happen, but if does return failure
    *p_last_periodicity=0;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e002      	b.n	8006644 <rf_initialize_periodicity_search+0xe2>
  } else
    *p_last_periodicity=n_lag;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <rf_signal_periodicity>:
*               Finds periodicity of the IR signal which can be used to calculate heart rate.
*               Makes use of the autocorrelation function. If peak autocorrelation is less
*               than min_aut_ratio fraction of the autocorrelation at lag=0, then the input 
*               signal is insufficiently periodic and probably indicates motion artifacts.
**/
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b08a      	sub	sp, #40	; 0x28
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_left,aut_right,aut_save;
  bool left_limit_reached=false;
 8006658:	2300      	movs	r3, #0
 800665a:	75fb      	strb	r3, [r7, #23]
  // Start from the last periodicity computing the corresponding autocorrelation
  n_lag=*p_last_periodicity;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
  aut_save=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 8006662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff ff33 	bl	80064d2 <rf_autocorrelation>
 800666c:	6238      	str	r0, [r7, #32]
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	613b      	str	r3, [r7, #16]
  // Is autocorrelation one lag to the left greater?
  aut_left=aut;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	61fb      	str	r3, [r7, #28]
  do {
    aut=aut_left;
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	623b      	str	r3, [r7, #32]
    n_lag--;
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	3b01      	subs	r3, #1
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
    aut_left=rf_autocorrelation(pn_x, n_size, n_lag);
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7ff ff24 	bl	80064d2 <rf_autocorrelation>
 800668a:	61f8      	str	r0, [r7, #28]
  } while(aut_left>aut && n_lag>=n_min_distance);
 800668c:	6a39      	ldr	r1, [r7, #32]
 800668e:	69f8      	ldr	r0, [r7, #28]
 8006690:	f7fa fce0 	bl	8001054 <__aeabi_fcmpgt>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <rf_signal_periodicity+0x58>
 800669a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	dae9      	bge.n	8006676 <rf_signal_periodicity+0x2c>
  // Restore lag of the highest aut
  if(n_lag<n_min_distance) {
 80066a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	da07      	bge.n	80066ba <rf_signal_periodicity+0x70>
    left_limit_reached=true;
 80066aa:	2301      	movs	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]
    n_lag=*p_last_periodicity;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
    aut=aut_save;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	e002      	b.n	80066c0 <rf_signal_periodicity+0x76>
  } else n_lag++;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	3301      	adds	r3, #1
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
  if(n_lag==*p_last_periodicity) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d12b      	bne.n	8006722 <rf_signal_periodicity+0xd8>
    // Trip to the left made no progress. Walk to the right.
    aut_right=aut;
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	61bb      	str	r3, [r7, #24]
    do {
      aut=aut_right;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	623b      	str	r3, [r7, #32]
      n_lag++;
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	3301      	adds	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fef8 	bl	80064d2 <rf_autocorrelation>
 80066e2:	61b8      	str	r0, [r7, #24]
    } while(aut_right>aut && n_lag<=n_max_distance);
 80066e4:	6a39      	ldr	r1, [r7, #32]
 80066e6:	69b8      	ldr	r0, [r7, #24]
 80066e8:	f7fa fcb4 	bl	8001054 <__aeabi_fcmpgt>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <rf_signal_periodicity+0xb0>
 80066f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	429a      	cmp	r2, r3
 80066f8:	dde9      	ble.n	80066ce <rf_signal_periodicity+0x84>
    // Restore lag of the highest aut
    if(n_lag>n_max_distance) n_lag=0; // Indicates failure
 80066fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	429a      	cmp	r2, r3
 8006700:	dd02      	ble.n	8006708 <rf_signal_periodicity+0xbe>
 8006702:	2300      	movs	r3, #0
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
 8006706:	e002      	b.n	800670e <rf_signal_periodicity+0xc4>
    else n_lag--;
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	3b01      	subs	r3, #1
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
    if(n_lag==*p_last_periodicity && left_limit_reached) n_lag=0; // Indicates failure
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	429a      	cmp	r2, r3
 8006716:	d104      	bne.n	8006722 <rf_signal_periodicity+0xd8>
 8006718:	7dfb      	ldrb	r3, [r7, #23]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <rf_signal_periodicity+0xd8>
 800671e:	2300      	movs	r3, #0
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
  }
  *ratio=aut/aut_lag0;
 8006722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006724:	6a38      	ldr	r0, [r7, #32]
 8006726:	f7fa fb8d 	bl	8000e44 <__aeabi_fdiv>
 800672a:	4603      	mov	r3, r0
 800672c:	461a      	mov	r2, r3
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	601a      	str	r2, [r3, #0]
  if(*ratio < min_aut_ratio) n_lag=0; // Indicates failure
 8006732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006738:	4618      	mov	r0, r3
 800673a:	f7fa fc6d 	bl	8001018 <__aeabi_fcmplt>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <rf_signal_periodicity+0xfe>
 8006744:	2300      	movs	r3, #0
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
  *p_last_periodicity=n_lag;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674c:	601a      	str	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	3728      	adds	r7, #40	; 0x28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <rf_rms>:
* \brief        Root-mean-square variation 
* \par          Details
*               Compute root-mean-square variation for a given series pn_x
* \retval       RMS value and raw sum of squares
*/
{
 8006756:	b590      	push	{r4, r7, lr}
 8006758:	b089      	sub	sp, #36	; 0x24
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*pn_ptr;
  (*sumsq)=0.0;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 800676a:	2300      	movs	r3, #0
 800676c:	83fb      	strh	r3, [r7, #30]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	e018      	b.n	80067a6 <rf_rms+0x50>
    r=(*pn_ptr);
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	617b      	str	r3, [r7, #20]
    (*sumsq) += r*r;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681c      	ldr	r4, [r3, #0]
 800677e:	6979      	ldr	r1, [r7, #20]
 8006780:	6978      	ldr	r0, [r7, #20]
 8006782:	f7fa faab 	bl	8000cdc <__aeabi_fmul>
 8006786:	4603      	mov	r3, r0
 8006788:	4619      	mov	r1, r3
 800678a:	4620      	mov	r0, r4
 800678c:	f7fa f99e 	bl	8000acc <__addsf3>
 8006790:	4603      	mov	r3, r0
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 8006798:	8bfb      	ldrh	r3, [r7, #30]
 800679a:	3301      	adds	r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	83fb      	strh	r3, [r7, #30]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	3304      	adds	r3, #4
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	dbe1      	blt.n	8006774 <rf_rms+0x1e>
  }
  (*sumsq)/=n_size; // This corresponds to autocorrelation at lag=0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681c      	ldr	r4, [r3, #0]
 80067b4:	68b8      	ldr	r0, [r7, #8]
 80067b6:	f7fa fa3d 	bl	8000c34 <__aeabi_i2f>
 80067ba:	4603      	mov	r3, r0
 80067bc:	4619      	mov	r1, r3
 80067be:	4620      	mov	r0, r4
 80067c0:	f7fa fb40 	bl	8000e44 <__aeabi_fdiv>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]
  return sqrt(*sumsq);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7f9 fe21 	bl	8000418 <__aeabi_f2d>
 80067d6:	4603      	mov	r3, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	4618      	mov	r0, r3
 80067dc:	4621      	mov	r1, r4
 80067de:	f001 fca1 	bl	8008124 <sqrt>
 80067e2:	4603      	mov	r3, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	4618      	mov	r0, r3
 80067e8:	4621      	mov	r1, r4
 80067ea:	f7fa f919 	bl	8000a20 <__aeabi_d2f>
 80067ee:	4603      	mov	r3, r0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3724      	adds	r7, #36	; 0x24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd90      	pop	{r4, r7, pc}

080067f8 <rf_Pcorrelation>:
* \brief        Correlation product
* \par          Details
*               Compute scalar product between *pn_x and *pn_y vectors
* \retval       Correlation product
*/
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*x_ptr,*y_ptr;
  r=0.0;
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 800680a:	2300      	movs	r3, #0
 800680c:	83fb      	strh	r3, [r7, #30]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	e018      	b.n	800684a <rf_Pcorrelation+0x52>
    r+=(*x_ptr)*(*y_ptr);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f7fa fa5a 	bl	8000cdc <__aeabi_fmul>
 8006828:	4603      	mov	r3, r0
 800682a:	4619      	mov	r1, r3
 800682c:	69b8      	ldr	r0, [r7, #24]
 800682e:	f7fa f94d 	bl	8000acc <__addsf3>
 8006832:	4603      	mov	r3, r0
 8006834:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 8006836:	8bfb      	ldrh	r3, [r7, #30]
 8006838:	3301      	adds	r3, #1
 800683a:	b29b      	uxth	r3, r3
 800683c:	83fb      	strh	r3, [r7, #30]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	3304      	adds	r3, #4
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	3304      	adds	r3, #4
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	dbe1      	blt.n	8006818 <rf_Pcorrelation+0x20>
  }
  r/=n_size;
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7fa f9ed 	bl	8000c34 <__aeabi_i2f>
 800685a:	4603      	mov	r3, r0
 800685c:	4619      	mov	r1, r3
 800685e:	69b8      	ldr	r0, [r7, #24]
 8006860:	f7fa faf0 	bl	8000e44 <__aeabi_fdiv>
 8006864:	4603      	mov	r3, r0
 8006866:	61bb      	str	r3, [r7, #24]
  return r;
 8006868:	69bb      	ldr	r3, [r7, #24]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3720      	adds	r7, #32
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <HAL_GPIO_EXTI_Callback>:
		while(htim1.Instance->CNT < 999);
		HAL_TIM_Base_Stop(&htim1);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d11d      	bne.n	80068c0 <HAL_GPIO_EXTI_Callback+0x4c>
		set_hour++;
 8006884:	4b24      	ldr	r3, [pc, #144]	; (8006918 <HAL_GPIO_EXTI_Callback+0xa4>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	b2da      	uxtb	r2, r3
 800688c:	4b22      	ldr	r3, [pc, #136]	; (8006918 <HAL_GPIO_EXTI_Callback+0xa4>)
 800688e:	701a      	strb	r2, [r3, #0]
		if(set_hour == 60){
 8006890:	4b21      	ldr	r3, [pc, #132]	; (8006918 <HAL_GPIO_EXTI_Callback+0xa4>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b3c      	cmp	r3, #60	; 0x3c
 8006896:	d102      	bne.n	800689e <HAL_GPIO_EXTI_Callback+0x2a>
			set_hour = 0;
 8006898:	4b1f      	ldr	r3, [pc, #124]	; (8006918 <HAL_GPIO_EXTI_Callback+0xa4>)
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
		}
		if(flag < 4){
 800689e:	4b1f      	ldr	r3, [pc, #124]	; (800691c <HAL_GPIO_EXTI_Callback+0xa8>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d805      	bhi.n	80068b2 <HAL_GPIO_EXTI_Callback+0x3e>
			flag ++;
 80068a6:	4b1d      	ldr	r3, [pc, #116]	; (800691c <HAL_GPIO_EXTI_Callback+0xa8>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4b1b      	ldr	r3, [pc, #108]	; (800691c <HAL_GPIO_EXTI_Callback+0xa8>)
 80068b0:	701a      	strb	r2, [r3, #0]
		}
		if(flag == 4){
 80068b2:	4b1a      	ldr	r3, [pc, #104]	; (800691c <HAL_GPIO_EXTI_Callback+0xa8>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d102      	bne.n	80068c0 <HAL_GPIO_EXTI_Callback+0x4c>
			flag = 1;
 80068ba:	4b18      	ldr	r3, [pc, #96]	; (800691c <HAL_GPIO_EXTI_Callback+0xa8>)
 80068bc:	2201      	movs	r2, #1
 80068be:	701a      	strb	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == GPIO_PIN_1) {
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d11d      	bne.n	8006902 <HAL_GPIO_EXTI_Callback+0x8e>
		set_minute++;
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <HAL_GPIO_EXTI_Callback+0xac>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <HAL_GPIO_EXTI_Callback+0xac>)
 80068d0:	701a      	strb	r2, [r3, #0]
		if(set_minute == 60){
 80068d2:	4b13      	ldr	r3, [pc, #76]	; (8006920 <HAL_GPIO_EXTI_Callback+0xac>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b3c      	cmp	r3, #60	; 0x3c
 80068d8:	d102      	bne.n	80068e0 <HAL_GPIO_EXTI_Callback+0x6c>
			set_minute = 0;
 80068da:	4b11      	ldr	r3, [pc, #68]	; (8006920 <HAL_GPIO_EXTI_Callback+0xac>)
 80068dc:	2200      	movs	r2, #0
 80068de:	701a      	strb	r2, [r3, #0]
		}
		if(flag2 < 3){
 80068e0:	4b10      	ldr	r3, [pc, #64]	; (8006924 <HAL_GPIO_EXTI_Callback+0xb0>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d805      	bhi.n	80068f4 <HAL_GPIO_EXTI_Callback+0x80>
			flag2 ++;
 80068e8:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <HAL_GPIO_EXTI_Callback+0xb0>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <HAL_GPIO_EXTI_Callback+0xb0>)
 80068f2:	701a      	strb	r2, [r3, #0]
		}
		if(flag2 == 3){
 80068f4:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <HAL_GPIO_EXTI_Callback+0xb0>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d102      	bne.n	8006902 <HAL_GPIO_EXTI_Callback+0x8e>
			flag2 = 1;
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <HAL_GPIO_EXTI_Callback+0xb0>)
 80068fe:	2201      	movs	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == GPIO_PIN_3) {
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	2b08      	cmp	r3, #8
 8006906:	d102      	bne.n	800690e <HAL_GPIO_EXTI_Callback+0x9a>
		flag3 = 1;
 8006908:	4b07      	ldr	r3, [pc, #28]	; (8006928 <HAL_GPIO_EXTI_Callback+0xb4>)
 800690a:	2201      	movs	r2, #1
 800690c:	701a      	strb	r2, [r3, #0]
	}
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr
 8006918:	20000147 	.word	0x20000147
 800691c:	20000144 	.word	0x20000144
 8006920:	20000148 	.word	0x20000148
 8006924:	20000145 	.word	0x20000145
 8006928:	20000146 	.word	0x20000146

0800692c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006932:	f7fa fbb9 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006936:	f000 f8ad 	bl	8006a94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

    /* Enable Power Control clock */
    __HAL_RCC_PWR_CLK_ENABLE();
 800693a:	4a4a      	ldr	r2, [pc, #296]	; (8006a64 <main+0x138>)
 800693c:	4b49      	ldr	r3, [pc, #292]	; (8006a64 <main+0x138>)
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006944:	61d3      	str	r3, [r2, #28]
 8006946:	4b47      	ldr	r3, [pc, #284]	; (8006a64 <main+0x138>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
    /* Check and handle if the system was resumed from Standby mode */
    
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006952:	f000 fa17 	bl	8006d84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8006956:	f000 f8f9 	bl	8006b4c <MX_I2C1_Init>
  MX_I2C2_Init();
 800695a:	f000 f927 	bl	8006bac <MX_I2C2_Init>
  MX_TIM1_Init();
 800695e:	f000 f9bf 	bl	8006ce0 <MX_TIM1_Init>
  MX_RTC_Init();
 8006962:	f000 f953 	bl	8006c0c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim1);
 8006966:	4840      	ldr	r0, [pc, #256]	; (8006a68 <main+0x13c>)
 8006968:	f7fe feba 	bl	80056e0 <HAL_TIM_Base_Start_IT>
	ssd1306_Init();
 800696c:	f000 ff26 	bl	80077bc <ssd1306_Init>
	max30102_Init();
 8006970:	f7ff fb04 	bl	8005f7c <max30102_Init>

  	//----------------------------------------BEGIN: SETUP TIME---------------------------------------------

	uint8_t temp = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	71fb      	strb	r3, [r7, #7]

	while(temp == 0){
 8006978:	e050      	b.n	8006a1c <main+0xf0>
		ssd1306_Fill(Black);
 800697a:	2000      	movs	r0, #0
 800697c:	f000 ff88 	bl	8007890 <ssd1306_Fill>
		ssd1306_SetCursor(35,40);
 8006980:	2128      	movs	r1, #40	; 0x28
 8006982:	2023      	movs	r0, #35	; 0x23
 8006984:	f001 f8e6 	bl	8007b54 <ssd1306_SetCursor>
		ssd1306_WriteNum(set_hour,Font_11x18,White);
 8006988:	4b38      	ldr	r3, [pc, #224]	; (8006a6c <main+0x140>)
 800698a:	7818      	ldrb	r0, [r3, #0]
 800698c:	4a38      	ldr	r2, [pc, #224]	; (8006a70 <main+0x144>)
 800698e:	2301      	movs	r3, #1
 8006990:	ca06      	ldmia	r2, {r1, r2}
 8006992:	f001 f995 	bl	8007cc0 <ssd1306_WriteNum>
		ssd1306_SetCursor(60,40);
 8006996:	2128      	movs	r1, #40	; 0x28
 8006998:	203c      	movs	r0, #60	; 0x3c
 800699a:	f001 f8db 	bl	8007b54 <ssd1306_SetCursor>
		ssd1306_WriteString(":",Font_11x18,White);
 800699e:	4a34      	ldr	r2, [pc, #208]	; (8006a70 <main+0x144>)
 80069a0:	2301      	movs	r3, #1
 80069a2:	ca06      	ldmia	r2, {r1, r2}
 80069a4:	4833      	ldr	r0, [pc, #204]	; (8006a74 <main+0x148>)
 80069a6:	f001 f8af 	bl	8007b08 <ssd1306_WriteString>
		ssd1306_SetCursor(75,40);
 80069aa:	2128      	movs	r1, #40	; 0x28
 80069ac:	204b      	movs	r0, #75	; 0x4b
 80069ae:	f001 f8d1 	bl	8007b54 <ssd1306_SetCursor>
		ssd1306_WriteNum(set_minute,Font_11x18,White);
 80069b2:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <main+0x14c>)
 80069b4:	7818      	ldrb	r0, [r3, #0]
 80069b6:	4a2e      	ldr	r2, [pc, #184]	; (8006a70 <main+0x144>)
 80069b8:	2301      	movs	r3, #1
 80069ba:	ca06      	ldmia	r2, {r1, r2}
 80069bc:	f001 f980 	bl	8007cc0 <ssd1306_WriteNum>
		ssd1306_UpdateScreen();
 80069c0:	f000 ff88 	bl	80078d4 <ssd1306_UpdateScreen>

		if(flag3 == 1 ){
 80069c4:	4b2d      	ldr	r3, [pc, #180]	; (8006a7c <main+0x150>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d104      	bne.n	80069d6 <main+0xaa>
			temp = 1;
 80069cc:	2301      	movs	r3, #1
 80069ce:	71fb      	strb	r3, [r7, #7]
			flag = 1;
 80069d0:	4b2b      	ldr	r3, [pc, #172]	; (8006a80 <main+0x154>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	701a      	strb	r2, [r3, #0]
		}
		if(set_hour != 0 && set_minute != 0){
 80069d6:	4b25      	ldr	r3, [pc, #148]	; (8006a6c <main+0x140>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01e      	beq.n	8006a1c <main+0xf0>
 80069de:	4b26      	ldr	r3, [pc, #152]	; (8006a78 <main+0x14c>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01a      	beq.n	8006a1c <main+0xf0>
			datetoupdate.Date = 26;
 80069e6:	4b27      	ldr	r3, [pc, #156]	; (8006a84 <main+0x158>)
 80069e8:	221a      	movs	r2, #26
 80069ea:	709a      	strb	r2, [r3, #2]
			datetoupdate.Month = 4;
 80069ec:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <main+0x158>)
 80069ee:	2204      	movs	r2, #4
 80069f0:	705a      	strb	r2, [r3, #1]
			datetoupdate.Year = 21;
 80069f2:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <main+0x158>)
 80069f4:	2215      	movs	r2, #21
 80069f6:	70da      	strb	r2, [r3, #3]
			sTime.Hours = set_hour;
 80069f8:	4b1c      	ldr	r3, [pc, #112]	; (8006a6c <main+0x140>)
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	4b22      	ldr	r3, [pc, #136]	; (8006a88 <main+0x15c>)
 80069fe:	701a      	strb	r2, [r3, #0]
			sTime.Minutes = set_minute;
 8006a00:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <main+0x14c>)
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <main+0x15c>)
 8006a06:	705a      	strb	r2, [r3, #1]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8006a08:	2200      	movs	r2, #0
 8006a0a:	491f      	ldr	r1, [pc, #124]	; (8006a88 <main+0x15c>)
 8006a0c:	481f      	ldr	r0, [pc, #124]	; (8006a8c <main+0x160>)
 8006a0e:	f7fe f87f 	bl	8004b10 <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &datetoupdate,RTC_FORMAT_BIN);
 8006a12:	2200      	movs	r2, #0
 8006a14:	491b      	ldr	r1, [pc, #108]	; (8006a84 <main+0x158>)
 8006a16:	481d      	ldr	r0, [pc, #116]	; (8006a8c <main+0x160>)
 8006a18:	f7fe f9ea 	bl	8004df0 <HAL_RTC_SetDate>
	while(temp == 0){
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0ab      	beq.n	800697a <main+0x4e>

    /* USER CODE BEGIN 3 */

//--------------------------------------START USER CODE-------------------------------------------------

    	change_page(flag); // display pages following two interrupt buttons
 8006a22:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <main+0x154>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fa22 	bl	8006e70 <change_page>

    	//TURN OFF SYSTEM
		if(flag2 == 1 && flag != 1)
 8006a2c:	4b18      	ldr	r3, [pc, #96]	; (8006a90 <main+0x164>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d10a      	bne.n	8006a4a <main+0x11e>
 8006a34:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <main+0x154>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d006      	beq.n	8006a4a <main+0x11e>
		{
			max30102_WriteReg(REG_MODE_CONFIG,0x80);
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	2009      	movs	r0, #9
 8006a40:	f7ff f9f4 	bl	8005e2c <max30102_WriteReg>
			ssd1306_SetDisplayOn(0);
 8006a44:	2000      	movs	r0, #0
 8006a46:	f001 f91d 	bl	8007c84 <ssd1306_SetDisplayOn>
		}

		//TURN ON SYSTEM
		if(flag2 == 2)
 8006a4a:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <main+0x164>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d1e7      	bne.n	8006a22 <main+0xf6>
		{
			flag2 = 0;
 8006a52:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <main+0x164>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
			ssd1306_Init();
 8006a58:	f000 feb0 	bl	80077bc <ssd1306_Init>
			max30102_Init();
 8006a5c:	f7ff fa8e 	bl	8005f7c <max30102_Init>
    	change_page(flag); // display pages following two interrupt buttons
 8006a60:	e7df      	b.n	8006a22 <main+0xf6>
 8006a62:	bf00      	nop
 8006a64:	40021000 	.word	0x40021000
 8006a68:	200015e4 	.word	0x200015e4
 8006a6c:	20000147 	.word	0x20000147
 8006a70:	20000020 	.word	0x20000020
 8006a74:	08008368 	.word	0x08008368
 8006a78:	20000148 	.word	0x20000148
 8006a7c:	20000146 	.word	0x20000146
 8006a80:	20000144 	.word	0x20000144
 8006a84:	20000568 	.word	0x20000568
 8006a88:	200005c0 	.word	0x200005c0
 8006a8c:	200015d0 	.word	0x200015d0
 8006a90:	20000145 	.word	0x20000145

08006a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b094      	sub	sp, #80	; 0x50
 8006a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a9e:	2228      	movs	r2, #40	; 0x28
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 faf6 	bl	8008094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006aa8:	f107 0314 	add.w	r3, r7, #20
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	605a      	str	r2, [r3, #4]
 8006ab2:	609a      	str	r2, [r3, #8]
 8006ab4:	60da      	str	r2, [r3, #12]
 8006ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ab8:	1d3b      	adds	r3, r7, #4
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	605a      	str	r2, [r3, #4]
 8006ac0:	609a      	str	r2, [r3, #8]
 8006ac2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ade:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006ae0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fd f9ec 	bl	8003ec8 <HAL_RCC_OscConfig>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006af6:	f000 f9b7 	bl	8006e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006afa:	230f      	movs	r3, #15
 8006afc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006afe:	2302      	movs	r3, #2
 8006b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006b10:	f107 0314 	add.w	r3, r7, #20
 8006b14:	2102      	movs	r1, #2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fd fc56 	bl	80043c8 <HAL_RCC_ClockConfig>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8006b22:	f000 f9a1 	bl	8006e68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006b26:	2301      	movs	r3, #1
 8006b28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8006b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd fde4 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006b3e:	f000 f993 	bl	8006e68 <Error_Handler>
  }
}
 8006b42:	bf00      	nop
 8006b44:	3750      	adds	r7, #80	; 0x50
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006b50:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b52:	4a14      	ldr	r2, [pc, #80]	; (8006ba4 <MX_I2C1_Init+0x58>)
 8006b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b58:	4a13      	ldr	r2, [pc, #76]	; (8006ba8 <MX_I2C1_Init+0x5c>)
 8006b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8006b5c:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b62:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006b8a:	4805      	ldr	r0, [pc, #20]	; (8006ba0 <MX_I2C1_Init+0x54>)
 8006b8c:	f7fa fe2e 	bl	80017ec <HAL_I2C_Init>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8006b96:	f000 f967 	bl	8006e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	2000056c 	.word	0x2000056c
 8006ba4:	40005400 	.word	0x40005400
 8006ba8:	00061a80 	.word	0x00061a80

08006bac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006bb0:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006bb2:	4a14      	ldr	r2, [pc, #80]	; (8006c04 <MX_I2C2_Init+0x58>)
 8006bb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8006bb6:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006bb8:	4a13      	ldr	r2, [pc, #76]	; (8006c08 <MX_I2C2_Init+0x5c>)
 8006bba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8006bbc:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006bc2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006bca:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006bcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006bd0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006bde:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006bea:	4805      	ldr	r0, [pc, #20]	; (8006c00 <MX_I2C2_Init+0x54>)
 8006bec:	f7fa fdfe 	bl	80017ec <HAL_I2C_Init>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8006bf6:	f000 f937 	bl	8006e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006bfa:	bf00      	nop
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200005c4 	.word	0x200005c4
 8006c04:	40005800 	.word	0x40005800
 8006c08:	00061a80 	.word	0x00061a80

08006c0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006c12:	1d3b      	adds	r3, r7, #4
 8006c14:	2100      	movs	r1, #0
 8006c16:	460a      	mov	r2, r1
 8006c18:	801a      	strh	r2, [r3, #0]
 8006c1a:	460a      	mov	r2, r1
 8006c1c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8006c1e:	2300      	movs	r3, #0
 8006c20:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006c22:	4b2d      	ldr	r3, [pc, #180]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006c24:	4a2d      	ldr	r2, [pc, #180]	; (8006cdc <MX_RTC_Init+0xd0>)
 8006c26:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8006c28:	4b2b      	ldr	r3, [pc, #172]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8006c30:	4b29      	ldr	r3, [pc, #164]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c36:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006c38:	4827      	ldr	r0, [pc, #156]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006c3a:	f7fd fed3 	bl	80049e4 <HAL_RTC_Init>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8006c44:	f000 f910 	bl	8006e68 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */

  //0x32F2
  //0x2608
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x2608){
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4823      	ldr	r0, [pc, #140]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006c4c:	f7fe fcdc 	bl	8005608 <HAL_RTCEx_BKUPRead>
 8006c50:	4602      	mov	r2, r0
 8006c52:	f242 6308 	movw	r3, #9736	; 0x2608
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d129      	bne.n	8006cae <MX_RTC_Init+0xa2>
	   sTime.Hours = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	713b      	strb	r3, [r7, #4]
	   sTime.Minutes = 12;
 8006c5e:	230c      	movs	r3, #12
 8006c60:	717b      	strb	r3, [r7, #5]
	   sTime.Seconds = 13;
 8006c62:	230d      	movs	r3, #13
 8006c64:	71bb      	strb	r3, [r7, #6]

	   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	481a      	ldr	r0, [pc, #104]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006c6e:	f7fd ff4f 	bl	8004b10 <HAL_RTC_SetTime>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <MX_RTC_Init+0x70>
	   {
	     Error_Handler();
 8006c78:	f000 f8f6 	bl	8006e68 <Error_Handler>
	   }
	   DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	703b      	strb	r3, [r7, #0]
	   DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006c80:	2301      	movs	r3, #1
 8006c82:	707b      	strb	r3, [r7, #1]
	   DateToUpdate.Date = 1;
 8006c84:	2301      	movs	r3, #1
 8006c86:	70bb      	strb	r3, [r7, #2]
	   DateToUpdate.Year = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	70fb      	strb	r3, [r7, #3]

	   if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4619      	mov	r1, r3
 8006c92:	4811      	ldr	r0, [pc, #68]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006c94:	f7fe f8ac 	bl	8004df0 <HAL_RTC_SetDate>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <MX_RTC_Init+0x96>
	   {
	     Error_Handler();
 8006c9e:	f000 f8e3 	bl	8006e68 <Error_Handler>
	   }
	   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2608);
 8006ca2:	f242 6208 	movw	r2, #9736	; 0x2608
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	480b      	ldr	r0, [pc, #44]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006caa:	f7fe fc93 	bl	80055d4 <HAL_RTCEx_BKUPWrite>
//	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
//	  {
//		Error_Handler();
//	  }
//	  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
	  DateToUpdate.Month = RTC_MONTH_APRIL;
 8006cae:	2304      	movs	r3, #4
 8006cb0:	707b      	strb	r3, [r7, #1]
	  DateToUpdate.Date = 26;
 8006cb2:	231a      	movs	r3, #26
 8006cb4:	70bb      	strb	r3, [r7, #2]
	  DateToUpdate.Year = 20;
 8006cb6:	2314      	movs	r3, #20
 8006cb8:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8006cba:	463b      	mov	r3, r7
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4805      	ldr	r0, [pc, #20]	; (8006cd8 <MX_RTC_Init+0xcc>)
 8006cc2:	f7fe f895 	bl	8004df0 <HAL_RTC_SetDate>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <MX_RTC_Init+0xc4>
	  {
		Error_Handler();
 8006ccc:	f000 f8cc 	bl	8006e68 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	200015d0 	.word	0x200015d0
 8006cdc:	40002800 	.word	0x40002800

08006ce0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cf4:	463b      	mov	r3, r7
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006cfc:	4b1f      	ldr	r3, [pc, #124]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006cfe:	4a20      	ldr	r2, [pc, #128]	; (8006d80 <MX_TIM1_Init+0xa0>)
 8006d00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8006d02:	4b1e      	ldr	r3, [pc, #120]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d04:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8006d08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d0a:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8006d10:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d12:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8006d16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d18:	4b18      	ldr	r3, [pc, #96]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006d1e:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d24:	4b15      	ldr	r3, [pc, #84]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006d2a:	4814      	ldr	r0, [pc, #80]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d2c:	f7fe fc88 	bl	8005640 <HAL_TIM_Base_Init>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8006d36:	f000 f897 	bl	8006e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006d40:	f107 0308 	add.w	r3, r7, #8
 8006d44:	4619      	mov	r1, r3
 8006d46:	480d      	ldr	r0, [pc, #52]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d48:	f7fe fe24 	bl	8005994 <HAL_TIM_ConfigClockSource>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8006d52:	f000 f889 	bl	8006e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d56:	2300      	movs	r3, #0
 8006d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006d5e:	463b      	mov	r3, r7
 8006d60:	4619      	mov	r1, r3
 8006d62:	4806      	ldr	r0, [pc, #24]	; (8006d7c <MX_TIM1_Init+0x9c>)
 8006d64:	f7fe fff2 	bl	8005d4c <HAL_TIMEx_MasterConfigSynchronization>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8006d6e:	f000 f87b 	bl	8006e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006d72:	bf00      	nop
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	200015e4 	.word	0x200015e4
 8006d80:	40012c00 	.word	0x40012c00

08006d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d8a:	f107 0310 	add.w	r3, r7, #16
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	605a      	str	r2, [r3, #4]
 8006d94:	609a      	str	r2, [r3, #8]
 8006d96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d98:	4a30      	ldr	r2, [pc, #192]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006d9a:	4b30      	ldr	r3, [pc, #192]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f043 0310 	orr.w	r3, r3, #16
 8006da2:	6193      	str	r3, [r2, #24]
 8006da4:	4b2d      	ldr	r3, [pc, #180]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006db0:	4a2a      	ldr	r2, [pc, #168]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006db2:	4b2a      	ldr	r3, [pc, #168]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f043 0320 	orr.w	r3, r3, #32
 8006dba:	6193      	str	r3, [r2, #24]
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dc8:	4a24      	ldr	r2, [pc, #144]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006dca:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f043 0304 	orr.w	r3, r3, #4
 8006dd2:	6193      	str	r3, [r2, #24]
 8006dd4:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006de0:	4a1e      	ldr	r2, [pc, #120]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006de2:	4b1e      	ldr	r3, [pc, #120]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f043 0308 	orr.w	r3, r3, #8
 8006dea:	6193      	str	r3, [r2, #24]
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <MX_GPIO_Init+0xd8>)
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f003 0308 	and.w	r3, r3, #8
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB0 PB1 PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_3;
 8006df8:	f241 030b 	movw	r3, #4107	; 0x100b
 8006dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006dfe:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <MX_GPIO_Init+0xdc>)
 8006e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e06:	f107 0310 	add.w	r3, r7, #16
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4815      	ldr	r0, [pc, #84]	; (8006e64 <MX_GPIO_Init+0xe0>)
 8006e0e:	f7fa fb63 	bl	80014d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	2006      	movs	r0, #6
 8006e18:	f7fa fa9f 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006e1c:	2006      	movs	r0, #6
 8006e1e:	f7fa fab8 	bl	8001392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	2007      	movs	r0, #7
 8006e28:	f7fa fa97 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8006e2c:	2007      	movs	r0, #7
 8006e2e:	f7fa fab0 	bl	8001392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	2009      	movs	r0, #9
 8006e38:	f7fa fa8f 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006e3c:	2009      	movs	r0, #9
 8006e3e:	f7fa faa8 	bl	8001392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006e42:	2200      	movs	r2, #0
 8006e44:	2100      	movs	r1, #0
 8006e46:	2028      	movs	r0, #40	; 0x28
 8006e48:	f7fa fa87 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006e4c:	2028      	movs	r0, #40	; 0x28
 8006e4e:	f7fa faa0 	bl	8001392 <HAL_NVIC_EnableIRQ>

}
 8006e52:	bf00      	nop
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	10210000 	.word	0x10210000
 8006e64:	40010c00 	.word	0x40010c00

08006e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    while (1)
 8006e6c:	e7fe      	b.n	8006e6c <Error_Handler+0x4>
	...

08006e70 <change_page>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "mode.h"

void change_page(uint8_t page)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af06      	add	r7, sp, #24
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
		if(page == 1)
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	f040 8117 	bne.w	80070b0 <change_page+0x240>
		{
			ssd1306_Fill(Black);
 8006e82:	2000      	movs	r0, #0
 8006e84:	f000 fd04 	bl	8007890 <ssd1306_Fill>
			ssd1306_Line(0,30,35,30,White);
 8006e88:	2301      	movs	r3, #1
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	231e      	movs	r3, #30
 8006e8e:	2223      	movs	r2, #35	; 0x23
 8006e90:	211e      	movs	r1, #30
 8006e92:	2000      	movs	r0, #0
 8006e94:	f000 fe76 	bl	8007b84 <ssd1306_Line>

			ssd1306_SetCursor(34,8);
 8006e98:	2108      	movs	r1, #8
 8006e9a:	2022      	movs	r0, #34	; 0x22
 8006e9c:	f000 fe5a 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteString("bpm",Font_6x8, White);
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <change_page+0xa8>)
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	ca06      	ldmia	r2, {r1, r2}
 8006ea6:	481d      	ldr	r0, [pc, #116]	; (8006f1c <change_page+0xac>)
 8006ea8:	f000 fe2e 	bl	8007b08 <ssd1306_WriteString>
			ssd1306_SetCursor(97,8);
 8006eac:	2108      	movs	r1, #8
 8006eae:	2061      	movs	r0, #97	; 0x61
 8006eb0:	f000 fe50 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteString("%spo2",Font_6x8, White);
 8006eb4:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <change_page+0xa8>)
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	ca06      	ldmia	r2, {r1, r2}
 8006eba:	4819      	ldr	r0, [pc, #100]	; (8006f20 <change_page+0xb0>)
 8006ebc:	f000 fe24 	bl	8007b08 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8006ec0:	f000 fd08 	bl	80078d4 <ssd1306_UpdateScreen>
			//dumping the first 10 sets of samples in the memory and shift the last 40 sets of samples to the top

			for (i = 100; i < 500; i++)
 8006ec4:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <change_page+0xb4>)
 8006ec6:	2264      	movs	r2, #100	; 0x64
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	e01a      	b.n	8006f02 <change_page+0x92>
			{
				aun_red_buffer[i - 100] = aun_red_buffer[i];
 8006ecc:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <change_page+0xb4>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3b64      	subs	r3, #100	; 0x64
 8006ed2:	4a14      	ldr	r2, [pc, #80]	; (8006f24 <change_page+0xb4>)
 8006ed4:	6812      	ldr	r2, [r2, #0]
 8006ed6:	4914      	ldr	r1, [pc, #80]	; (8006f28 <change_page+0xb8>)
 8006ed8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006edc:	4912      	ldr	r1, [pc, #72]	; (8006f28 <change_page+0xb8>)
 8006ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				aun_ir_buffer[i - 100] = aun_ir_buffer[i];
 8006ee2:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <change_page+0xb4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3b64      	subs	r3, #100	; 0x64
 8006ee8:	4a0e      	ldr	r2, [pc, #56]	; (8006f24 <change_page+0xb4>)
 8006eea:	6812      	ldr	r2, [r2, #0]
 8006eec:	490f      	ldr	r1, [pc, #60]	; (8006f2c <change_page+0xbc>)
 8006eee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006ef2:	490e      	ldr	r1, [pc, #56]	; (8006f2c <change_page+0xbc>)
 8006ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (i = 100; i < 500; i++)
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <change_page+0xb4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <change_page+0xb4>)
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <change_page+0xb4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006f0a:	dbdf      	blt.n	8006ecc <change_page+0x5c>
			}
			//take 10 sets of samples before calculating the heart rate
			for (i = 400; i < 500; i++)
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <change_page+0xb4>)
 8006f0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e027      	b.n	8006f66 <change_page+0xf6>
 8006f16:	bf00      	nop
 8006f18:	20000010 	.word	0x20000010
 8006f1c:	0800836c 	.word	0x0800836c
 8006f20:	08008370 	.word	0x08008370
 8006f24:	200015c4 	.word	0x200015c4
 8006f28:	20000df4 	.word	0x20000df4
 8006f2c:	2000061c 	.word	0x2000061c
			{
				while (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12) == 1);
 8006f30:	bf00      	nop
 8006f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f36:	48b6      	ldr	r0, [pc, #728]	; (8007210 <change_page+0x3a0>)
 8006f38:	f7fa fc28 	bl	800178c <HAL_GPIO_ReadPin>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d0f7      	beq.n	8006f32 <change_page+0xc2>
				max30102_ReadFifo((aun_ir_buffer + i), (aun_red_buffer + i)); //read from MAX30102 FIFO
 8006f42:	4bb4      	ldr	r3, [pc, #720]	; (8007214 <change_page+0x3a4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4ab3      	ldr	r2, [pc, #716]	; (8007218 <change_page+0x3a8>)
 8006f4a:	1898      	adds	r0, r3, r2
 8006f4c:	4bb1      	ldr	r3, [pc, #708]	; (8007214 <change_page+0x3a4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4ab2      	ldr	r2, [pc, #712]	; (800721c <change_page+0x3ac>)
 8006f54:	4413      	add	r3, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	f7fe ff9e 	bl	8005e98 <max30102_ReadFifo>
			for (i = 400; i < 500; i++)
 8006f5c:	4bad      	ldr	r3, [pc, #692]	; (8007214 <change_page+0x3a4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	4aac      	ldr	r2, [pc, #688]	; (8007214 <change_page+0x3a4>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	4bab      	ldr	r3, [pc, #684]	; (8007214 <change_page+0x3a4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006f6e:	dbdf      	blt.n	8006f30 <change_page+0xc0>
			}

			rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer,
 8006f70:	4bab      	ldr	r3, [pc, #684]	; (8007220 <change_page+0x3b0>)
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	4bab      	ldr	r3, [pc, #684]	; (8007224 <change_page+0x3b4>)
 8006f76:	9304      	str	r3, [sp, #16]
 8006f78:	4bab      	ldr	r3, [pc, #684]	; (8007228 <change_page+0x3b8>)
 8006f7a:	9303      	str	r3, [sp, #12]
 8006f7c:	4bab      	ldr	r3, [pc, #684]	; (800722c <change_page+0x3bc>)
 8006f7e:	9302      	str	r3, [sp, #8]
 8006f80:	4bab      	ldr	r3, [pc, #684]	; (8007230 <change_page+0x3c0>)
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	4bab      	ldr	r3, [pc, #684]	; (8007234 <change_page+0x3c4>)
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4bab      	ldr	r3, [pc, #684]	; (8007238 <change_page+0x3c8>)
 8006f8a:	4aa4      	ldr	r2, [pc, #656]	; (800721c <change_page+0x3ac>)
 8006f8c:	48a2      	ldr	r0, [pc, #648]	; (8007218 <change_page+0x3a8>)
 8006f8e:	f7ff f82f 	bl	8005ff0 <rf_heart_rate_and_oxygen_saturation>
					&n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);

			if (ch_hr_valid && ch_spo2_valid )
 8006f92:	4ba6      	ldr	r3, [pc, #664]	; (800722c <change_page+0x3bc>)
 8006f94:	f993 3000 	ldrsb.w	r3, [r3]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8089 	beq.w	80070b0 <change_page+0x240>
 8006f9e:	4ba5      	ldr	r3, [pc, #660]	; (8007234 <change_page+0x3c4>)
 8006fa0:	f993 3000 	ldrsb.w	r3, [r3]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8083 	beq.w	80070b0 <change_page+0x240>
			{
					if(n_heart_rate > highest_hb){	highest_hb = n_heart_rate;	}
 8006faa:	4ba1      	ldr	r3, [pc, #644]	; (8007230 <change_page+0x3c0>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4ba3      	ldr	r3, [pc, #652]	; (800723c <change_page+0x3cc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	dd03      	ble.n	8006fbe <change_page+0x14e>
 8006fb6:	4b9e      	ldr	r3, [pc, #632]	; (8007230 <change_page+0x3c0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4aa0      	ldr	r2, [pc, #640]	; (800723c <change_page+0x3cc>)
 8006fbc:	6013      	str	r3, [r2, #0]

					if(n_heart_rate < lowest_hb && n_heart_rate > 50){	lowest_hb = n_heart_rate;	}
 8006fbe:	4b9c      	ldr	r3, [pc, #624]	; (8007230 <change_page+0x3c0>)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b9f      	ldr	r3, [pc, #636]	; (8007240 <change_page+0x3d0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	da07      	bge.n	8006fda <change_page+0x16a>
 8006fca:	4b99      	ldr	r3, [pc, #612]	; (8007230 <change_page+0x3c0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b32      	cmp	r3, #50	; 0x32
 8006fd0:	dd03      	ble.n	8006fda <change_page+0x16a>
 8006fd2:	4b97      	ldr	r3, [pc, #604]	; (8007230 <change_page+0x3c0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a9a      	ldr	r2, [pc, #616]	; (8007240 <change_page+0x3d0>)
 8006fd8:	6013      	str	r3, [r2, #0]

					//Display heartbeat per minute
					ssd1306_SetCursor(1,0);
 8006fda:	2100      	movs	r1, #0
 8006fdc:	2001      	movs	r0, #1
 8006fde:	f000 fdb9 	bl	8007b54 <ssd1306_SetCursor>
					ssd1306_WriteNum(n_heart_rate, Font_11x18, White);
 8006fe2:	4b93      	ldr	r3, [pc, #588]	; (8007230 <change_page+0x3c0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	b2d8      	uxtb	r0, r3
 8006fe8:	4a96      	ldr	r2, [pc, #600]	; (8007244 <change_page+0x3d4>)
 8006fea:	2301      	movs	r3, #1
 8006fec:	ca06      	ldmia	r2, {r1, r2}
 8006fee:	f000 fe67 	bl	8007cc0 <ssd1306_WriteNum>

					//Display spo2
					ssd1306_SetCursor(64,0);
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	2040      	movs	r0, #64	; 0x40
 8006ff6:	f000 fdad 	bl	8007b54 <ssd1306_SetCursor>
					ssd1306_WriteNum(n_spo2, Font_11x18, White);
 8006ffa:	4b8f      	ldr	r3, [pc, #572]	; (8007238 <change_page+0x3c8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fa f832 	bl	8001068 <__aeabi_f2uiz>
 8007004:	4603      	mov	r3, r0
 8007006:	b2d8      	uxtb	r0, r3
 8007008:	4a8e      	ldr	r2, [pc, #568]	; (8007244 <change_page+0x3d4>)
 800700a:	2301      	movs	r3, #1
 800700c:	ca06      	ldmia	r2, {r1, r2}
 800700e:	f000 fe57 	bl	8007cc0 <ssd1306_WriteNum>
					ssd1306_UpdateScreen();
 8007012:	f000 fc5f 	bl	80078d4 <ssd1306_UpdateScreen>

					//Draw chart
					if(n_heart_rate < 30){
 8007016:	4b86      	ldr	r3, [pc, #536]	; (8007230 <change_page+0x3c0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b1d      	cmp	r3, #29
 800701c:	dc02      	bgt.n	8007024 <change_page+0x1b4>
						draw_one_chart(2);
 800701e:	2002      	movs	r0, #2
 8007020:	f000 f96c 	bl	80072fc <draw_one_chart>
					}

					if(n_heart_rate > 31 && n_heart_rate < 60){
 8007024:	4b82      	ldr	r3, [pc, #520]	; (8007230 <change_page+0x3c0>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b1f      	cmp	r3, #31
 800702a:	dd09      	ble.n	8007040 <change_page+0x1d0>
 800702c:	4b80      	ldr	r3, [pc, #512]	; (8007230 <change_page+0x3c0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b3b      	cmp	r3, #59	; 0x3b
 8007032:	dc05      	bgt.n	8007040 <change_page+0x1d0>
						draw_one_chart(2);
 8007034:	2002      	movs	r0, #2
 8007036:	f000 f961 	bl	80072fc <draw_one_chart>
						draw_one_chart(29);
 800703a:	201d      	movs	r0, #29
 800703c:	f000 f95e 	bl	80072fc <draw_one_chart>
					}
					if(n_heart_rate > 61 && n_heart_rate < 90){
 8007040:	4b7b      	ldr	r3, [pc, #492]	; (8007230 <change_page+0x3c0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b3d      	cmp	r3, #61	; 0x3d
 8007046:	dd0c      	ble.n	8007062 <change_page+0x1f2>
 8007048:	4b79      	ldr	r3, [pc, #484]	; (8007230 <change_page+0x3c0>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b59      	cmp	r3, #89	; 0x59
 800704e:	dc08      	bgt.n	8007062 <change_page+0x1f2>
						draw_one_chart(2);
 8007050:	2002      	movs	r0, #2
 8007052:	f000 f953 	bl	80072fc <draw_one_chart>
						draw_one_chart(29);
 8007056:	201d      	movs	r0, #29
 8007058:	f000 f950 	bl	80072fc <draw_one_chart>
						draw_one_chart(56);
 800705c:	2038      	movs	r0, #56	; 0x38
 800705e:	f000 f94d 	bl	80072fc <draw_one_chart>
					}

					if(n_heart_rate > 91 && n_heart_rate < 120){
 8007062:	4b73      	ldr	r3, [pc, #460]	; (8007230 <change_page+0x3c0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b5b      	cmp	r3, #91	; 0x5b
 8007068:	dd0f      	ble.n	800708a <change_page+0x21a>
 800706a:	4b71      	ldr	r3, [pc, #452]	; (8007230 <change_page+0x3c0>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b77      	cmp	r3, #119	; 0x77
 8007070:	dc0b      	bgt.n	800708a <change_page+0x21a>
						draw_one_chart(2);
 8007072:	2002      	movs	r0, #2
 8007074:	f000 f942 	bl	80072fc <draw_one_chart>
						draw_one_chart(29);
 8007078:	201d      	movs	r0, #29
 800707a:	f000 f93f 	bl	80072fc <draw_one_chart>
						draw_one_chart(56);
 800707e:	2038      	movs	r0, #56	; 0x38
 8007080:	f000 f93c 	bl	80072fc <draw_one_chart>
						draw_one_chart(83);
 8007084:	2053      	movs	r0, #83	; 0x53
 8007086:	f000 f939 	bl	80072fc <draw_one_chart>
					}

					if(n_heart_rate > 121){
 800708a:	4b69      	ldr	r3, [pc, #420]	; (8007230 <change_page+0x3c0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b79      	cmp	r3, #121	; 0x79
 8007090:	dd0e      	ble.n	80070b0 <change_page+0x240>
						draw_one_chart(2);
 8007092:	2002      	movs	r0, #2
 8007094:	f000 f932 	bl	80072fc <draw_one_chart>
						draw_one_chart(29);
 8007098:	201d      	movs	r0, #29
 800709a:	f000 f92f 	bl	80072fc <draw_one_chart>
						draw_one_chart(56);
 800709e:	2038      	movs	r0, #56	; 0x38
 80070a0:	f000 f92c 	bl	80072fc <draw_one_chart>
						draw_one_chart(83);
 80070a4:	2053      	movs	r0, #83	; 0x53
 80070a6:	f000 f929 	bl	80072fc <draw_one_chart>
						draw_one_chart(110);
 80070aa:	206e      	movs	r0, #110	; 0x6e
 80070ac:	f000 f926 	bl	80072fc <draw_one_chart>

		}

		//-------------------------------END PAGE 1: HB & SPO2 CACULATION-------------------------------

		if(page == 2)
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d12e      	bne.n	8007114 <change_page+0x2a4>
		{
			ssd1306_Fill(Black);
 80070b6:	2000      	movs	r0, #0
 80070b8:	f000 fbea 	bl	8007890 <ssd1306_Fill>
			ssd1306_Line(45,30,80,30,White);
 80070bc:	2301      	movs	r3, #1
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	231e      	movs	r3, #30
 80070c2:	2250      	movs	r2, #80	; 0x50
 80070c4:	211e      	movs	r1, #30
 80070c6:	202d      	movs	r0, #45	; 0x2d
 80070c8:	f000 fd5c 	bl	8007b84 <ssd1306_Line>

			ssd1306_SetCursor(2,10);
 80070cc:	210a      	movs	r1, #10
 80070ce:	2002      	movs	r0, #2
 80070d0:	f000 fd40 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteString("MAX      BPM      MIN",Font_6x8,White);
 80070d4:	4a5c      	ldr	r2, [pc, #368]	; (8007248 <change_page+0x3d8>)
 80070d6:	2301      	movs	r3, #1
 80070d8:	ca06      	ldmia	r2, {r1, r2}
 80070da:	485c      	ldr	r0, [pc, #368]	; (800724c <change_page+0x3dc>)
 80070dc:	f000 fd14 	bl	8007b08 <ssd1306_WriteString>
			ssd1306_SetCursor(2,40);
 80070e0:	2128      	movs	r1, #40	; 0x28
 80070e2:	2002      	movs	r0, #2
 80070e4:	f000 fd36 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(highest_hb,Font_11x18,White);
 80070e8:	4b54      	ldr	r3, [pc, #336]	; (800723c <change_page+0x3cc>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b2d8      	uxtb	r0, r3
 80070ee:	4a55      	ldr	r2, [pc, #340]	; (8007244 <change_page+0x3d4>)
 80070f0:	2301      	movs	r3, #1
 80070f2:	ca06      	ldmia	r2, {r1, r2}
 80070f4:	f000 fde4 	bl	8007cc0 <ssd1306_WriteNum>
			ssd1306_SetCursor(100,40);
 80070f8:	2128      	movs	r1, #40	; 0x28
 80070fa:	2064      	movs	r0, #100	; 0x64
 80070fc:	f000 fd2a 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(lowest_hb,Font_11x18,White);
 8007100:	4b4f      	ldr	r3, [pc, #316]	; (8007240 <change_page+0x3d0>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	b2d8      	uxtb	r0, r3
 8007106:	4a4f      	ldr	r2, [pc, #316]	; (8007244 <change_page+0x3d4>)
 8007108:	2301      	movs	r3, #1
 800710a:	ca06      	ldmia	r2, {r1, r2}
 800710c:	f000 fdd8 	bl	8007cc0 <ssd1306_WriteNum>

			ssd1306_UpdateScreen();
 8007110:	f000 fbe0 	bl	80078d4 <ssd1306_UpdateScreen>
		}
		//-------------------------------END PAGE 2: MAX AND MIN HB-------------------------------------

		if(page == 3)
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	2b03      	cmp	r3, #3
 8007118:	f040 80b0 	bne.w	800727c <change_page+0x40c>
		{
			rtc_timer();
 800711c:	f000 f8b2 	bl	8007284 <rtc_timer>
			ssd1306_Fill(Black);
 8007120:	2000      	movs	r0, #0
 8007122:	f000 fbb5 	bl	8007890 <ssd1306_Fill>
			ssd1306_Line(90,30,130,30,White);
 8007126:	2301      	movs	r3, #1
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	231e      	movs	r3, #30
 800712c:	2282      	movs	r2, #130	; 0x82
 800712e:	211e      	movs	r1, #30
 8007130:	205a      	movs	r0, #90	; 0x5a
 8007132:	f000 fd27 	bl	8007b84 <ssd1306_Line>

			//ssd1306_SetCursor(50,10);
			//ssd1306_WriteString("TIMER",Font_6x8,White);
			ssd1306_SetCursor(20,10);
 8007136:	210a      	movs	r1, #10
 8007138:	2014      	movs	r0, #20
 800713a:	f000 fd0b 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(date,Font_7x10,White);
 800713e:	4b44      	ldr	r3, [pc, #272]	; (8007250 <change_page+0x3e0>)
 8007140:	7818      	ldrb	r0, [r3, #0]
 8007142:	4a44      	ldr	r2, [pc, #272]	; (8007254 <change_page+0x3e4>)
 8007144:	2301      	movs	r3, #1
 8007146:	ca06      	ldmia	r2, {r1, r2}
 8007148:	f000 fdba 	bl	8007cc0 <ssd1306_WriteNum>
			ssd1306_SetCursor(35,10);
 800714c:	210a      	movs	r1, #10
 800714e:	2023      	movs	r0, #35	; 0x23
 8007150:	f000 fd00 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteString(" / ",Font_7x10,White);
 8007154:	4a3f      	ldr	r2, [pc, #252]	; (8007254 <change_page+0x3e4>)
 8007156:	2301      	movs	r3, #1
 8007158:	ca06      	ldmia	r2, {r1, r2}
 800715a:	483f      	ldr	r0, [pc, #252]	; (8007258 <change_page+0x3e8>)
 800715c:	f000 fcd4 	bl	8007b08 <ssd1306_WriteString>
			ssd1306_SetCursor(50,10);
 8007160:	210a      	movs	r1, #10
 8007162:	2032      	movs	r0, #50	; 0x32
 8007164:	f000 fcf6 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(month,Font_7x10,White);
 8007168:	4b3c      	ldr	r3, [pc, #240]	; (800725c <change_page+0x3ec>)
 800716a:	7818      	ldrb	r0, [r3, #0]
 800716c:	4a39      	ldr	r2, [pc, #228]	; (8007254 <change_page+0x3e4>)
 800716e:	2301      	movs	r3, #1
 8007170:	ca06      	ldmia	r2, {r1, r2}
 8007172:	f000 fda5 	bl	8007cc0 <ssd1306_WriteNum>
			ssd1306_SetCursor(65,10);
 8007176:	210a      	movs	r1, #10
 8007178:	2041      	movs	r0, #65	; 0x41
 800717a:	f000 fceb 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteString(" / ",Font_7x10,White);
 800717e:	4a35      	ldr	r2, [pc, #212]	; (8007254 <change_page+0x3e4>)
 8007180:	2301      	movs	r3, #1
 8007182:	ca06      	ldmia	r2, {r1, r2}
 8007184:	4834      	ldr	r0, [pc, #208]	; (8007258 <change_page+0x3e8>)
 8007186:	f000 fcbf 	bl	8007b08 <ssd1306_WriteString>
			ssd1306_SetCursor(80,10);
 800718a:	210a      	movs	r1, #10
 800718c:	2050      	movs	r0, #80	; 0x50
 800718e:	f000 fce1 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(20,Font_7x10 ,White);
 8007192:	4a30      	ldr	r2, [pc, #192]	; (8007254 <change_page+0x3e4>)
 8007194:	2301      	movs	r3, #1
 8007196:	ca06      	ldmia	r2, {r1, r2}
 8007198:	2014      	movs	r0, #20
 800719a:	f000 fd91 	bl	8007cc0 <ssd1306_WriteNum>
			ssd1306_SetCursor(95,10);
 800719e:	210a      	movs	r1, #10
 80071a0:	205f      	movs	r0, #95	; 0x5f
 80071a2:	f000 fcd7 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(year,Font_7x10 ,White);
 80071a6:	4b2e      	ldr	r3, [pc, #184]	; (8007260 <change_page+0x3f0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	b2d8      	uxtb	r0, r3
 80071ac:	4a29      	ldr	r2, [pc, #164]	; (8007254 <change_page+0x3e4>)
 80071ae:	2301      	movs	r3, #1
 80071b0:	ca06      	ldmia	r2, {r1, r2}
 80071b2:	f000 fd85 	bl	8007cc0 <ssd1306_WriteNum>


			ssd1306_SetCursor(35,40);
 80071b6:	2128      	movs	r1, #40	; 0x28
 80071b8:	2023      	movs	r0, #35	; 0x23
 80071ba:	f000 fccb 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(hour,Font_11x18,White);
 80071be:	4b29      	ldr	r3, [pc, #164]	; (8007264 <change_page+0x3f4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	b2d8      	uxtb	r0, r3
 80071c4:	4a1f      	ldr	r2, [pc, #124]	; (8007244 <change_page+0x3d4>)
 80071c6:	2301      	movs	r3, #1
 80071c8:	ca06      	ldmia	r2, {r1, r2}
 80071ca:	f000 fd79 	bl	8007cc0 <ssd1306_WriteNum>
			ssd1306_SetCursor(60,40);
 80071ce:	2128      	movs	r1, #40	; 0x28
 80071d0:	203c      	movs	r0, #60	; 0x3c
 80071d2:	f000 fcbf 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteString(":",Font_11x18,White);
 80071d6:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <change_page+0x3d4>)
 80071d8:	2301      	movs	r3, #1
 80071da:	ca06      	ldmia	r2, {r1, r2}
 80071dc:	4822      	ldr	r0, [pc, #136]	; (8007268 <change_page+0x3f8>)
 80071de:	f000 fc93 	bl	8007b08 <ssd1306_WriteString>
			ssd1306_SetCursor(75,40);
 80071e2:	2128      	movs	r1, #40	; 0x28
 80071e4:	204b      	movs	r0, #75	; 0x4b
 80071e6:	f000 fcb5 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(minute,Font_11x18,White);
 80071ea:	4b20      	ldr	r3, [pc, #128]	; (800726c <change_page+0x3fc>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	b2d8      	uxtb	r0, r3
 80071f0:	4a14      	ldr	r2, [pc, #80]	; (8007244 <change_page+0x3d4>)
 80071f2:	2301      	movs	r3, #1
 80071f4:	ca06      	ldmia	r2, {r1, r2}
 80071f6:	f000 fd63 	bl	8007cc0 <ssd1306_WriteNum>

			ssd1306_SetCursor(100,50);
 80071fa:	2132      	movs	r1, #50	; 0x32
 80071fc:	2064      	movs	r0, #100	; 0x64
 80071fe:	f000 fca9 	bl	8007b54 <ssd1306_SetCursor>
			ssd1306_WriteNum(sec,Font_7x10,White);
 8007202:	4b1b      	ldr	r3, [pc, #108]	; (8007270 <change_page+0x400>)
 8007204:	7818      	ldrb	r0, [r3, #0]
 8007206:	4a13      	ldr	r2, [pc, #76]	; (8007254 <change_page+0x3e4>)
 8007208:	2301      	movs	r3, #1
 800720a:	ca06      	ldmia	r2, {r1, r2}
 800720c:	e032      	b.n	8007274 <change_page+0x404>
 800720e:	bf00      	nop
 8007210:	40010c00 	.word	0x40010c00
 8007214:	200015c4 	.word	0x200015c4
 8007218:	2000061c 	.word	0x2000061c
 800721c:	20000df4 	.word	0x20000df4
 8007220:	08008398 	.word	0x08008398
 8007224:	2000163c 	.word	0x2000163c
 8007228:	20001630 	.word	0x20001630
 800722c:	20001640 	.word	0x20001640
 8007230:	200015c8 	.word	0x200015c8
 8007234:	2000162c 	.word	0x2000162c
 8007238:	20000df0 	.word	0x20000df0
 800723c:	20000140 	.word	0x20000140
 8007240:	2000000c 	.word	0x2000000c
 8007244:	20000020 	.word	0x20000020
 8007248:	20000010 	.word	0x20000010
 800724c:	08008378 	.word	0x08008378
 8007250:	20001641 	.word	0x20001641
 8007254:	20000018 	.word	0x20000018
 8007258:	08008390 	.word	0x08008390
 800725c:	20000618 	.word	0x20000618
 8007260:	20001634 	.word	0x20001634
 8007264:	200015cc 	.word	0x200015cc
 8007268:	08008394 	.word	0x08008394
 800726c:	20000dec 	.word	0x20000dec
 8007270:	20001638 	.word	0x20001638
 8007274:	f000 fd24 	bl	8007cc0 <ssd1306_WriteNum>

			ssd1306_UpdateScreen();
 8007278:	f000 fb2c 	bl	80078d4 <ssd1306_UpdateScreen>
		}
		//----------------------------------END PAGE 3: CLOCK--------------------------------------------
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <rtc_timer>:

void rtc_timer(){
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8007288:	2200      	movs	r2, #0
 800728a:	4913      	ldr	r1, [pc, #76]	; (80072d8 <rtc_timer+0x54>)
 800728c:	4813      	ldr	r0, [pc, #76]	; (80072dc <rtc_timer+0x58>)
 800728e:	f7fd fcd7 	bl	8004c40 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &datetoupdate,RTC_FORMAT_BIN);
 8007292:	2200      	movs	r2, #0
 8007294:	4912      	ldr	r1, [pc, #72]	; (80072e0 <rtc_timer+0x5c>)
 8007296:	4811      	ldr	r0, [pc, #68]	; (80072dc <rtc_timer+0x58>)
 8007298:	f7fd fe60 	bl	8004f5c <HAL_RTC_GetDate>

	sec = sTime.Seconds;
 800729c:	4b0e      	ldr	r3, [pc, #56]	; (80072d8 <rtc_timer+0x54>)
 800729e:	789a      	ldrb	r2, [r3, #2]
 80072a0:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <rtc_timer+0x60>)
 80072a2:	701a      	strb	r2, [r3, #0]
	hour = sTime.Hours;
 80072a4:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <rtc_timer+0x54>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <rtc_timer+0x64>)
 80072ac:	601a      	str	r2, [r3, #0]
	minute = sTime.Minutes;
 80072ae:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <rtc_timer+0x54>)
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	461a      	mov	r2, r3
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <rtc_timer+0x68>)
 80072b6:	601a      	str	r2, [r3, #0]
	date = datetoupdate.Date;
 80072b8:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <rtc_timer+0x5c>)
 80072ba:	789a      	ldrb	r2, [r3, #2]
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <rtc_timer+0x6c>)
 80072be:	701a      	strb	r2, [r3, #0]
	month = datetoupdate.Month;
 80072c0:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <rtc_timer+0x5c>)
 80072c2:	785a      	ldrb	r2, [r3, #1]
 80072c4:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <rtc_timer+0x70>)
 80072c6:	701a      	strb	r2, [r3, #0]
	year = datetoupdate.Year;
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <rtc_timer+0x5c>)
 80072ca:	78db      	ldrb	r3, [r3, #3]
 80072cc:	461a      	mov	r2, r3
 80072ce:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <rtc_timer+0x74>)
 80072d0:	601a      	str	r2, [r3, #0]
}
 80072d2:	bf00      	nop
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200005c0 	.word	0x200005c0
 80072dc:	200015d0 	.word	0x200015d0
 80072e0:	20000568 	.word	0x20000568
 80072e4:	20001638 	.word	0x20001638
 80072e8:	200015cc 	.word	0x200015cc
 80072ec:	20000dec 	.word	0x20000dec
 80072f0:	20001641 	.word	0x20001641
 80072f4:	20000618 	.word	0x20000618
 80072f8:	20001634 	.word	0x20001634

080072fc <draw_one_chart>:


void draw_one_chart(uint8_t one_x)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	71fb      	strb	r3, [r7, #7]
			ssd1306_DrawPixel(one_x,60,White);
 8007306:	79fb      	ldrb	r3, [r7, #7]
 8007308:	2201      	movs	r2, #1
 800730a:	213c      	movs	r1, #60	; 0x3c
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fb0b 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007312:	f000 fadf 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x,59,White);
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	2201      	movs	r2, #1
 800731a:	213b      	movs	r1, #59	; 0x3b
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fb03 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007322:	f000 fad7 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x,58,White);
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	2201      	movs	r2, #1
 800732a:	213a      	movs	r1, #58	; 0x3a
 800732c:	4618      	mov	r0, r3
 800732e:	f000 fafb 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007332:	f000 facf 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x,57,White);
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2201      	movs	r2, #1
 800733a:	2139      	movs	r1, #57	; 0x39
 800733c:	4618      	mov	r0, r3
 800733e:	f000 faf3 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007342:	f000 fac7 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x,56,White);
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	2201      	movs	r2, #1
 800734a:	2138      	movs	r1, #56	; 0x38
 800734c:	4618      	mov	r0, r3
 800734e:	f000 faeb 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007352:	f000 fabf 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x,55,White);
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	2201      	movs	r2, #1
 800735a:	2137      	movs	r1, #55	; 0x37
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fae3 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007362:	f000 fab7 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x,54,White);
 8007366:	79fb      	ldrb	r3, [r7, #7]
 8007368:	2201      	movs	r2, #1
 800736a:	2136      	movs	r1, #54	; 0x36
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fadb 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007372:	f000 faaf 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x,53,White);
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	2201      	movs	r2, #1
 800737a:	2135      	movs	r1, #53	; 0x35
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fad3 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007382:	f000 faa7 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x,52,White);
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	2201      	movs	r2, #1
 800738a:	2134      	movs	r1, #52	; 0x34
 800738c:	4618      	mov	r0, r3
 800738e:	f000 facb 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007392:	f000 fa9f 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 1,52,White);
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	3301      	adds	r3, #1
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2201      	movs	r2, #1
 800739e:	2134      	movs	r1, #52	; 0x34
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fac1 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80073a6:	f000 fa95 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 1,51,White);
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	3301      	adds	r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2201      	movs	r2, #1
 80073b2:	2133      	movs	r1, #51	; 0x33
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fab7 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80073ba:	f000 fa8b 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 1,50,White);
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	3301      	adds	r3, #1
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2201      	movs	r2, #1
 80073c6:	2132      	movs	r1, #50	; 0x32
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 faad 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80073ce:	f000 fa81 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 1,49,White);
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	3301      	adds	r3, #1
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2201      	movs	r2, #1
 80073da:	2131      	movs	r1, #49	; 0x31
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 faa3 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80073e2:	f000 fa77 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 2,48,White);
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	3302      	adds	r3, #2
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2201      	movs	r2, #1
 80073ee:	2130      	movs	r1, #48	; 0x30
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fa99 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80073f6:	f000 fa6d 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 2,47,White);
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	3302      	adds	r3, #2
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2201      	movs	r2, #1
 8007402:	212f      	movs	r1, #47	; 0x2f
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fa8f 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800740a:	f000 fa63 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 2,46,White);
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	3302      	adds	r3, #2
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2201      	movs	r2, #1
 8007416:	212e      	movs	r1, #46	; 0x2e
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fa85 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800741e:	f000 fa59 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 2,45,White);
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	3302      	adds	r3, #2
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2201      	movs	r2, #1
 800742a:	212d      	movs	r1, #45	; 0x2d
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fa7b 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007432:	f000 fa4f 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 2,44,White);
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	3302      	adds	r3, #2
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2201      	movs	r2, #1
 800743e:	212c      	movs	r1, #44	; 0x2c
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fa71 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007446:	f000 fa45 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 3,43,White);
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	3303      	adds	r3, #3
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2201      	movs	r2, #1
 8007452:	212b      	movs	r1, #43	; 0x2b
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fa67 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800745a:	f000 fa3b 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 3,42,White);
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	3303      	adds	r3, #3
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2201      	movs	r2, #1
 8007466:	212a      	movs	r1, #42	; 0x2a
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fa5d 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800746e:	f000 fa31 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 3,43,White);
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	3303      	adds	r3, #3
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2201      	movs	r2, #1
 800747a:	212b      	movs	r1, #43	; 0x2b
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fa53 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007482:	f000 fa27 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 4,41,White);
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	3304      	adds	r3, #4
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2201      	movs	r2, #1
 800748e:	2129      	movs	r1, #41	; 0x29
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fa49 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007496:	f000 fa1d 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 5,41,White);
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	3305      	adds	r3, #5
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2201      	movs	r2, #1
 80074a2:	2129      	movs	r1, #41	; 0x29
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fa3f 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80074aa:	f000 fa13 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 6,42,White);
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	3306      	adds	r3, #6
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2201      	movs	r2, #1
 80074b6:	212a      	movs	r1, #42	; 0x2a
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fa35 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80074be:	f000 fa09 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 7,43,White);
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	3307      	adds	r3, #7
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2201      	movs	r2, #1
 80074ca:	212b      	movs	r1, #43	; 0x2b
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fa2b 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80074d2:	f000 f9ff 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 7,44,White);
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	3307      	adds	r3, #7
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2201      	movs	r2, #1
 80074de:	212c      	movs	r1, #44	; 0x2c
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fa21 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80074e6:	f000 f9f5 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 7,45,White);
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	3307      	adds	r3, #7
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2201      	movs	r2, #1
 80074f2:	212d      	movs	r1, #45	; 0x2d
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fa17 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80074fa:	f000 f9eb 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 7,46,White);
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	3307      	adds	r3, #7
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2201      	movs	r2, #1
 8007506:	212e      	movs	r1, #46	; 0x2e
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fa0d 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800750e:	f000 f9e1 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 8,47,White);
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	3308      	adds	r3, #8
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2201      	movs	r2, #1
 800751a:	212f      	movs	r1, #47	; 0x2f
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fa03 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007522:	f000 f9d7 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 8,48,White);
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	3308      	adds	r3, #8
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2201      	movs	r2, #1
 800752e:	2130      	movs	r1, #48	; 0x30
 8007530:	4618      	mov	r0, r3
 8007532:	f000 f9f9 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007536:	f000 f9cd 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 8,49,White);
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	3308      	adds	r3, #8
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2201      	movs	r2, #1
 8007542:	2131      	movs	r1, #49	; 0x31
 8007544:	4618      	mov	r0, r3
 8007546:	f000 f9ef 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800754a:	f000 f9c3 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 9,50,White);
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	3309      	adds	r3, #9
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2201      	movs	r2, #1
 8007556:	2132      	movs	r1, #50	; 0x32
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f9e5 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800755e:	f000 f9b9 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 9,51,White);
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	3309      	adds	r3, #9
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2201      	movs	r2, #1
 800756a:	2133      	movs	r1, #51	; 0x33
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f9db 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007572:	f000 f9af 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 9,52,White);
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	3309      	adds	r3, #9
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2201      	movs	r2, #1
 800757e:	2134      	movs	r1, #52	; 0x34
 8007580:	4618      	mov	r0, r3
 8007582:	f000 f9d1 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007586:	f000 f9a5 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 10,52,White);
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	330a      	adds	r3, #10
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2201      	movs	r2, #1
 8007592:	2134      	movs	r1, #52	; 0x34
 8007594:	4618      	mov	r0, r3
 8007596:	f000 f9c7 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800759a:	f000 f99b 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 11,51,White);
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	330b      	adds	r3, #11
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2201      	movs	r2, #1
 80075a6:	2133      	movs	r1, #51	; 0x33
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f9bd 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80075ae:	f000 f991 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 12,50,White);
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	330c      	adds	r3, #12
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2201      	movs	r2, #1
 80075ba:	2132      	movs	r1, #50	; 0x32
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f9b3 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80075c2:	f000 f987 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 13,50,White);
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	330d      	adds	r3, #13
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2201      	movs	r2, #1
 80075ce:	2132      	movs	r1, #50	; 0x32
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f9a9 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80075d6:	f000 f97d 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 14,51,White);
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	330e      	adds	r3, #14
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2201      	movs	r2, #1
 80075e2:	2133      	movs	r1, #51	; 0x33
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f99f 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80075ea:	f000 f973 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 15,52,White);
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	330f      	adds	r3, #15
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2201      	movs	r2, #1
 80075f6:	2134      	movs	r1, #52	; 0x34
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f995 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80075fe:	f000 f969 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 15,53,White);
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	330f      	adds	r3, #15
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2201      	movs	r2, #1
 800760a:	2135      	movs	r1, #53	; 0x35
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f98b 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007612:	f000 f95f 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 15,54,White);
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	330f      	adds	r3, #15
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2201      	movs	r2, #1
 800761e:	2136      	movs	r1, #54	; 0x36
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f981 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007626:	f000 f955 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 16,55,White);
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	3310      	adds	r3, #16
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2201      	movs	r2, #1
 8007632:	2137      	movs	r1, #55	; 0x37
 8007634:	4618      	mov	r0, r3
 8007636:	f000 f977 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800763a:	f000 f94b 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 16,56,White);
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	3310      	adds	r3, #16
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2201      	movs	r2, #1
 8007646:	2138      	movs	r1, #56	; 0x38
 8007648:	4618      	mov	r0, r3
 800764a:	f000 f96d 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800764e:	f000 f941 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 16,57,White);
 8007652:	79fb      	ldrb	r3, [r7, #7]
 8007654:	3310      	adds	r3, #16
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2201      	movs	r2, #1
 800765a:	2139      	movs	r1, #57	; 0x39
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f963 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007662:	f000 f937 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 17,58,White);
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	3311      	adds	r3, #17
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2201      	movs	r2, #1
 800766e:	213a      	movs	r1, #58	; 0x3a
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f959 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007676:	f000 f92d 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 18,59,White);
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	3312      	adds	r3, #18
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2201      	movs	r2, #1
 8007682:	213b      	movs	r1, #59	; 0x3b
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f94f 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800768a:	f000 f923 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 18,60,White);
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	3312      	adds	r3, #18
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2201      	movs	r2, #1
 8007696:	213c      	movs	r1, #60	; 0x3c
 8007698:	4618      	mov	r0, r3
 800769a:	f000 f945 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800769e:	f000 f919 	bl	80078d4 <ssd1306_UpdateScreen>


			ssd1306_DrawPixel(one_x + 19,60,White);
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	3313      	adds	r3, #19
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2201      	movs	r2, #1
 80076aa:	213c      	movs	r1, #60	; 0x3c
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 f93b 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80076b2:	f000 f90f 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 20,60,White);
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	3314      	adds	r3, #20
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2201      	movs	r2, #1
 80076be:	213c      	movs	r1, #60	; 0x3c
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f931 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80076c6:	f000 f905 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 21,60,White);
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	3315      	adds	r3, #21
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2201      	movs	r2, #1
 80076d2:	213c      	movs	r1, #60	; 0x3c
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f927 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80076da:	f000 f8fb 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 22,60,White);
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	3316      	adds	r3, #22
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2201      	movs	r2, #1
 80076e6:	213c      	movs	r1, #60	; 0x3c
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 f91d 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 80076ee:	f000 f8f1 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 23,60,White);
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	3317      	adds	r3, #23
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2201      	movs	r2, #1
 80076fa:	213c      	movs	r1, #60	; 0x3c
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 f913 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007702:	f000 f8e7 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 24,60,White);
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	3318      	adds	r3, #24
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2201      	movs	r2, #1
 800770e:	213c      	movs	r1, #60	; 0x3c
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f909 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 8007716:	f000 f8dd 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 25,60,White);
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	3319      	adds	r3, #25
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2201      	movs	r2, #1
 8007722:	213c      	movs	r1, #60	; 0x3c
 8007724:	4618      	mov	r0, r3
 8007726:	f000 f8ff 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800772a:	f000 f8d3 	bl	80078d4 <ssd1306_UpdateScreen>

			ssd1306_DrawPixel(one_x + 26,60,White);
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	331a      	adds	r3, #26
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2201      	movs	r2, #1
 8007736:	213c      	movs	r1, #60	; 0x3c
 8007738:	4618      	mov	r0, r3
 800773a:	f000 f8f5 	bl	8007928 <ssd1306_DrawPixel>
			ssd1306_UpdateScreen();
 800773e:	f000 f8c9 	bl	80078d4 <ssd1306_UpdateScreen>
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <ssd1306_Reset>:
		while(htim1.Instance->CNT < 999);
		HAL_TIM_Base_Stop(&htim1);
	}
}

void ssd1306_Reset(void) {
 800774a:	b480      	push	{r7}
 800774c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800774e:	bf00      	nop
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr
	...

08007758 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af04      	add	r7, sp, #16
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8007762:	f04f 33ff 	mov.w	r3, #4294967295
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	2301      	movs	r3, #1
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	1dfb      	adds	r3, r7, #7
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2301      	movs	r3, #1
 8007772:	2200      	movs	r2, #0
 8007774:	2178      	movs	r1, #120	; 0x78
 8007776:	4803      	ldr	r0, [pc, #12]	; (8007784 <ssd1306_WriteCommand+0x2c>)
 8007778:	f7fa f970 	bl	8001a5c <HAL_I2C_Mem_Write>
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	2000056c 	.word	0x2000056c

08007788 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af04      	add	r7, sp, #16
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	f04f 32ff 	mov.w	r2, #4294967295
 800779a:	9202      	str	r2, [sp, #8]
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	2301      	movs	r3, #1
 80077a4:	2240      	movs	r2, #64	; 0x40
 80077a6:	2178      	movs	r1, #120	; 0x78
 80077a8:	4803      	ldr	r0, [pc, #12]	; (80077b8 <ssd1306_WriteData+0x30>)
 80077aa:	f7fa f957 	bl	8001a5c <HAL_I2C_Mem_Write>
}
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	2000056c 	.word	0x2000056c

080077bc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80077c0:	f7ff ffc3 	bl	800774a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80077c4:	2064      	movs	r0, #100	; 0x64
 80077c6:	f7f9 fcd1 	bl	800116c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80077ca:	2000      	movs	r0, #0
 80077cc:	f000 fa5a 	bl	8007c84 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80077d0:	2020      	movs	r0, #32
 80077d2:	f7ff ffc1 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80077d6:	2000      	movs	r0, #0
 80077d8:	f7ff ffbe 	bl	8007758 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80077dc:	20b0      	movs	r0, #176	; 0xb0
 80077de:	f7ff ffbb 	bl	8007758 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80077e2:	20c8      	movs	r0, #200	; 0xc8
 80077e4:	f7ff ffb8 	bl	8007758 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80077e8:	2000      	movs	r0, #0
 80077ea:	f7ff ffb5 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80077ee:	2010      	movs	r0, #16
 80077f0:	f7ff ffb2 	bl	8007758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80077f4:	2040      	movs	r0, #64	; 0x40
 80077f6:	f7ff ffaf 	bl	8007758 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80077fa:	20ff      	movs	r0, #255	; 0xff
 80077fc:	f000 fa2e 	bl	8007c5c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8007800:	20a1      	movs	r0, #161	; 0xa1
 8007802:	f7ff ffa9 	bl	8007758 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8007806:	20a6      	movs	r0, #166	; 0xa6
 8007808:	f7ff ffa6 	bl	8007758 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 130)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800780c:	20a8      	movs	r0, #168	; 0xa8
 800780e:	f7ff ffa3 	bl	8007758 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8007812:	203f      	movs	r0, #63	; 0x3f
 8007814:	f7ff ffa0 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 130px high displays too.
#else
#error "Only 32, 64, or 130 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007818:	20a4      	movs	r0, #164	; 0xa4
 800781a:	f7ff ff9d 	bl	8007758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800781e:	20d3      	movs	r0, #211	; 0xd3
 8007820:	f7ff ff9a 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8007824:	2000      	movs	r0, #0
 8007826:	f7ff ff97 	bl	8007758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800782a:	20d5      	movs	r0, #213	; 0xd5
 800782c:	f7ff ff94 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8007830:	20f0      	movs	r0, #240	; 0xf0
 8007832:	f7ff ff91 	bl	8007758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8007836:	20d9      	movs	r0, #217	; 0xd9
 8007838:	f7ff ff8e 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800783c:	2022      	movs	r0, #34	; 0x22
 800783e:	f7ff ff8b 	bl	8007758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8007842:	20da      	movs	r0, #218	; 0xda
 8007844:	f7ff ff88 	bl	8007758 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8007848:	2012      	movs	r0, #18
 800784a:	f7ff ff85 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 130 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800784e:	20db      	movs	r0, #219	; 0xdb
 8007850:	f7ff ff82 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8007854:	2020      	movs	r0, #32
 8007856:	f7ff ff7f 	bl	8007758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800785a:	208d      	movs	r0, #141	; 0x8d
 800785c:	f7ff ff7c 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8007860:	2014      	movs	r0, #20
 8007862:	f7ff ff79 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8007866:	2001      	movs	r0, #1
 8007868:	f000 fa0c 	bl	8007c84 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800786c:	2000      	movs	r0, #0
 800786e:	f000 f80f 	bl	8007890 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8007872:	f000 f82f 	bl	80078d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <ssd1306_Init+0xd0>)
 8007878:	2200      	movs	r2, #0
 800787a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800787c:	4b03      	ldr	r3, [pc, #12]	; (800788c <ssd1306_Init+0xd0>)
 800787e:	2200      	movs	r2, #0
 8007880:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8007882:	4b02      	ldr	r3, [pc, #8]	; (800788c <ssd1306_Init+0xd0>)
 8007884:	2201      	movs	r2, #1
 8007886:	715a      	strb	r2, [r3, #5]
}
 8007888:	bf00      	nop
 800788a:	bd80      	pop	{r7, pc}
 800788c:	2000055c 	.word	0x2000055c

08007890 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e00d      	b.n	80078bc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <ssd1306_Fill+0x1a>
 80078a6:	2100      	movs	r1, #0
 80078a8:	e000      	b.n	80078ac <ssd1306_Fill+0x1c>
 80078aa:	21ff      	movs	r1, #255	; 0xff
 80078ac:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <ssd1306_Fill+0x40>)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	460a      	mov	r2, r1
 80078b4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80078c2:	d3ed      	bcc.n	80078a0 <ssd1306_Fill+0x10>
    }
}
 80078c4:	bf00      	nop
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	2000014c 	.word	0x2000014c

080078d4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 130px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80078da:	2300      	movs	r3, #0
 80078dc:	71fb      	strb	r3, [r7, #7]
 80078de:	e01a      	b.n	8007916 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	3b50      	subs	r3, #80	; 0x50
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff ff36 	bl	8007758 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80078ec:	2000      	movs	r0, #0
 80078ee:	f7ff ff33 	bl	8007758 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80078f2:	2010      	movs	r0, #16
 80078f4:	f7ff ff30 	bl	8007758 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80078f8:	79fa      	ldrb	r2, [r7, #7]
 80078fa:	4613      	mov	r3, r2
 80078fc:	019b      	lsls	r3, r3, #6
 80078fe:	4413      	add	r3, r2
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	461a      	mov	r2, r3
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <ssd1306_UpdateScreen+0x50>)
 8007906:	4413      	add	r3, r2
 8007908:	2182      	movs	r1, #130	; 0x82
 800790a:	4618      	mov	r0, r3
 800790c:	f7ff ff3c 	bl	8007788 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	3301      	adds	r3, #1
 8007914:	71fb      	strb	r3, [r7, #7]
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	2b07      	cmp	r3, #7
 800791a:	d9e1      	bls.n	80078e0 <ssd1306_UpdateScreen+0xc>
    }
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	2000014c 	.word	0x2000014c

08007928 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	71fb      	strb	r3, [r7, #7]
 8007932:	460b      	mov	r3, r1
 8007934:	71bb      	strb	r3, [r7, #6]
 8007936:	4613      	mov	r3, r2
 8007938:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	2b81      	cmp	r3, #129	; 0x81
 800793e:	d852      	bhi.n	80079e6 <ssd1306_DrawPixel+0xbe>
 8007940:	79bb      	ldrb	r3, [r7, #6]
 8007942:	2b3f      	cmp	r3, #63	; 0x3f
 8007944:	d84f      	bhi.n	80079e6 <ssd1306_DrawPixel+0xbe>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8007946:	4b2a      	ldr	r3, [pc, #168]	; (80079f0 <ssd1306_DrawPixel+0xc8>)
 8007948:	791b      	ldrb	r3, [r3, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 800794e:	797b      	ldrb	r3, [r7, #5]
 8007950:	2b00      	cmp	r3, #0
 8007952:	bf0c      	ite	eq
 8007954:	2301      	moveq	r3, #1
 8007956:	2300      	movne	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800795c:	797b      	ldrb	r3, [r7, #5]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d11f      	bne.n	80079a2 <ssd1306_DrawPixel+0x7a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007962:	79fa      	ldrb	r2, [r7, #7]
 8007964:	79bb      	ldrb	r3, [r7, #6]
 8007966:	08db      	lsrs	r3, r3, #3
 8007968:	b2d8      	uxtb	r0, r3
 800796a:	4601      	mov	r1, r0
 800796c:	460b      	mov	r3, r1
 800796e:	019b      	lsls	r3, r3, #6
 8007970:	440b      	add	r3, r1
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	441a      	add	r2, r3
 8007976:	79f9      	ldrb	r1, [r7, #7]
 8007978:	4603      	mov	r3, r0
 800797a:	019b      	lsls	r3, r3, #6
 800797c:	4403      	add	r3, r0
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	440b      	add	r3, r1
 8007982:	491c      	ldr	r1, [pc, #112]	; (80079f4 <ssd1306_DrawPixel+0xcc>)
 8007984:	5ccb      	ldrb	r3, [r1, r3]
 8007986:	b259      	sxtb	r1, r3
 8007988:	79bb      	ldrb	r3, [r7, #6]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	2001      	movs	r0, #1
 8007990:	fa00 f303 	lsl.w	r3, r0, r3
 8007994:	b25b      	sxtb	r3, r3
 8007996:	430b      	orrs	r3, r1
 8007998:	b25b      	sxtb	r3, r3
 800799a:	b2d9      	uxtb	r1, r3
 800799c:	4b15      	ldr	r3, [pc, #84]	; (80079f4 <ssd1306_DrawPixel+0xcc>)
 800799e:	5499      	strb	r1, [r3, r2]
 80079a0:	e022      	b.n	80079e8 <ssd1306_DrawPixel+0xc0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80079a2:	79fa      	ldrb	r2, [r7, #7]
 80079a4:	79bb      	ldrb	r3, [r7, #6]
 80079a6:	08db      	lsrs	r3, r3, #3
 80079a8:	b2d8      	uxtb	r0, r3
 80079aa:	4601      	mov	r1, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	019b      	lsls	r3, r3, #6
 80079b0:	440b      	add	r3, r1
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	441a      	add	r2, r3
 80079b6:	79f9      	ldrb	r1, [r7, #7]
 80079b8:	4603      	mov	r3, r0
 80079ba:	019b      	lsls	r3, r3, #6
 80079bc:	4403      	add	r3, r0
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	440b      	add	r3, r1
 80079c2:	490c      	ldr	r1, [pc, #48]	; (80079f4 <ssd1306_DrawPixel+0xcc>)
 80079c4:	5ccb      	ldrb	r3, [r1, r3]
 80079c6:	b259      	sxtb	r1, r3
 80079c8:	79bb      	ldrb	r3, [r7, #6]
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	2001      	movs	r0, #1
 80079d0:	fa00 f303 	lsl.w	r3, r0, r3
 80079d4:	b25b      	sxtb	r3, r3
 80079d6:	43db      	mvns	r3, r3
 80079d8:	b25b      	sxtb	r3, r3
 80079da:	400b      	ands	r3, r1
 80079dc:	b25b      	sxtb	r3, r3
 80079de:	b2d9      	uxtb	r1, r3
 80079e0:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <ssd1306_DrawPixel+0xcc>)
 80079e2:	5499      	strb	r1, [r3, r2]
 80079e4:	e000      	b.n	80079e8 <ssd1306_DrawPixel+0xc0>
        return;
 80079e6:	bf00      	nop
    }
    //delay_ms_ssd(10);
}
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bc80      	pop	{r7}
 80079ee:	4770      	bx	lr
 80079f0:	2000055c 	.word	0x2000055c
 80079f4:	2000014c 	.word	0x2000014c

080079f8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80079f8:	b590      	push	{r4, r7, lr}
 80079fa:	b089      	sub	sp, #36	; 0x24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	1d38      	adds	r0, r7, #4
 8007a02:	e880 0006 	stmia.w	r0, {r1, r2}
 8007a06:	461a      	mov	r2, r3
 8007a08:	4623      	mov	r3, r4
 8007a0a:	73fb      	strb	r3, [r7, #15]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b1f      	cmp	r3, #31
 8007a14:	d902      	bls.n	8007a1c <ssd1306_WriteChar+0x24>
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b7e      	cmp	r3, #126	; 0x7e
 8007a1a:	d901      	bls.n	8007a20 <ssd1306_WriteChar+0x28>
        return 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e06d      	b.n	8007afc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007a20:	4b38      	ldr	r3, [pc, #224]	; (8007b04 <ssd1306_WriteChar+0x10c>)
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	793b      	ldrb	r3, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	2b82      	cmp	r3, #130	; 0x82
 8007a2c:	dc06      	bgt.n	8007a3c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8007a2e:	4b35      	ldr	r3, [pc, #212]	; (8007b04 <ssd1306_WriteChar+0x10c>)
 8007a30:	885b      	ldrh	r3, [r3, #2]
 8007a32:	461a      	mov	r2, r3
 8007a34:	797b      	ldrb	r3, [r7, #5]
 8007a36:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	dd01      	ble.n	8007a40 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e05d      	b.n	8007afc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e04c      	b.n	8007ae0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	3b20      	subs	r3, #32
 8007a4c:	7979      	ldrb	r1, [r7, #5]
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	4619      	mov	r1, r3
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	440b      	add	r3, r1
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	4413      	add	r3, r2
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8007a60:	2300      	movs	r3, #0
 8007a62:	61bb      	str	r3, [r7, #24]
 8007a64:	e034      	b.n	8007ad0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d012      	beq.n	8007a9c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8007a76:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <ssd1306_WriteChar+0x10c>)
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	b2d8      	uxtb	r0, r3
 8007a84:	4b1f      	ldr	r3, [pc, #124]	; (8007b04 <ssd1306_WriteChar+0x10c>)
 8007a86:	885b      	ldrh	r3, [r3, #2]
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	4413      	add	r3, r2
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	7bba      	ldrb	r2, [r7, #14]
 8007a94:	4619      	mov	r1, r3
 8007a96:	f7ff ff47 	bl	8007928 <ssd1306_DrawPixel>
 8007a9a:	e016      	b.n	8007aca <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <ssd1306_WriteChar+0x10c>)
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	b2d8      	uxtb	r0, r3
 8007aaa:	4b16      	ldr	r3, [pc, #88]	; (8007b04 <ssd1306_WriteChar+0x10c>)
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	b2d9      	uxtb	r1, r3
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf0c      	ite	eq
 8007abe:	2301      	moveq	r3, #1
 8007ac0:	2300      	movne	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f7ff ff2f 	bl	8007928 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	3301      	adds	r3, #1
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	793b      	ldrb	r3, [r7, #4]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d8c5      	bhi.n	8007a66 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3301      	adds	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
 8007ae0:	797b      	ldrb	r3, [r7, #5]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d8ad      	bhi.n	8007a46 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8007aea:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <ssd1306_WriteChar+0x10c>)
 8007aec:	881a      	ldrh	r2, [r3, #0]
 8007aee:	793b      	ldrb	r3, [r7, #4]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	4413      	add	r3, r2
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <ssd1306_WriteChar+0x10c>)
 8007af8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3724      	adds	r7, #36	; 0x24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd90      	pop	{r4, r7, pc}
 8007b04:	2000055c 	.word	0x2000055c

08007b08 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	1d38      	adds	r0, r7, #4
 8007b12:	e880 0006 	stmia.w	r0, {r1, r2}
 8007b16:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8007b18:	e012      	b.n	8007b40 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	7818      	ldrb	r0, [r3, #0]
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	1d3a      	adds	r2, r7, #4
 8007b22:	ca06      	ldmia	r2, {r1, r2}
 8007b24:	f7ff ff68 	bl	80079f8 <ssd1306_WriteChar>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d002      	beq.n	8007b3a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	e008      	b.n	8007b4c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e8      	bne.n	8007b1a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	460a      	mov	r2, r1
 8007b5e:	71fb      	strb	r3, [r7, #7]
 8007b60:	4613      	mov	r3, r2
 8007b62:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <ssd1306_SetCursor+0x2c>)
 8007b6a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007b6c:	79bb      	ldrb	r3, [r7, #6]
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <ssd1306_SetCursor+0x2c>)
 8007b72:	805a      	strh	r2, [r3, #2]
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	2000055c 	.word	0x2000055c

08007b84 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8007b84:	b590      	push	{r4, r7, lr}
 8007b86:	b089      	sub	sp, #36	; 0x24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	461a      	mov	r2, r3
 8007b92:	4623      	mov	r3, r4
 8007b94:	71fb      	strb	r3, [r7, #7]
 8007b96:	4603      	mov	r3, r0
 8007b98:	71bb      	strb	r3, [r7, #6]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	717b      	strb	r3, [r7, #5]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8007ba2:	797a      	ldrb	r2, [r7, #5]
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bfb8      	it	lt
 8007bac:	425b      	neglt	r3, r3
 8007bae:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8007bb0:	793a      	ldrb	r2, [r7, #4]
 8007bb2:	79bb      	ldrb	r3, [r7, #6]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bfb8      	it	lt
 8007bba:	425b      	neglt	r3, r3
 8007bbc:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8007bbe:	79fa      	ldrb	r2, [r7, #7]
 8007bc0:	797b      	ldrb	r3, [r7, #5]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d201      	bcs.n	8007bca <ssd1306_Line+0x46>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e001      	b.n	8007bce <ssd1306_Line+0x4a>
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295
 8007bce:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8007bd0:	79ba      	ldrb	r2, [r7, #6]
 8007bd2:	793b      	ldrb	r3, [r7, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d201      	bcs.n	8007bdc <ssd1306_Line+0x58>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e001      	b.n	8007be0 <ssd1306_Line+0x5c>
 8007bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007be0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8007bea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007bee:	7939      	ldrb	r1, [r7, #4]
 8007bf0:	797b      	ldrb	r3, [r7, #5]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff fe98 	bl	8007928 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8007bf8:	e024      	b.n	8007c44 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8007bfa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007bfe:	79b9      	ldrb	r1, [r7, #6]
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fe90 	bl	8007928 <ssd1306_DrawPixel>
	
//	delay_ms_ssd(10);
	
    error2 = error * 2;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	425a      	negs	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	da08      	bge.n	8007c2a <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	4413      	add	r3, r2
 8007c28:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	da08      	bge.n	8007c44 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	4413      	add	r3, r2
 8007c38:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	79bb      	ldrb	r3, [r7, #6]
 8007c40:	4413      	add	r3, r2
 8007c42:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8007c44:	79fa      	ldrb	r2, [r7, #7]
 8007c46:	797b      	ldrb	r3, [r7, #5]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d1d6      	bne.n	8007bfa <ssd1306_Line+0x76>
 8007c4c:	79ba      	ldrb	r2, [r7, #6]
 8007c4e:	793b      	ldrb	r3, [r7, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d1d2      	bne.n	8007bfa <ssd1306_Line+0x76>
    {
    /*nothing to do*/
    }
  }

  return;
 8007c54:	bf00      	nop
}
 8007c56:	3724      	adds	r7, #36	; 0x24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd90      	pop	{r4, r7, pc}

08007c5c <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8007c66:	2381      	movs	r3, #129	; 0x81
 8007c68:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff fd73 	bl	8007758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fd6f 	bl	8007758 <ssd1306_WriteCommand>
}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8007c94:	23af      	movs	r3, #175	; 0xaf
 8007c96:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8007c98:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <ssd1306_SetDisplayOn+0x38>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	719a      	strb	r2, [r3, #6]
 8007c9e:	e004      	b.n	8007caa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8007ca0:	23ae      	movs	r3, #174	; 0xae
 8007ca2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <ssd1306_SetDisplayOn+0x38>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff fd53 	bl	8007758 <ssd1306_WriteCommand>
}
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	2000055c 	.word	0x2000055c

08007cc0 <ssd1306_WriteNum>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_WriteNum(uint8_t number, FontDef Font, SSD1306_COLOR color) {
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b08f      	sub	sp, #60	; 0x3c
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	1d38      	adds	r0, r7, #4
 8007cca:	e880 0006 	stmia.w	r0, {r1, r2}
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	73fb      	strb	r3, [r7, #15]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	73bb      	strb	r3, [r7, #14]
	char arr[33];
	itoa(number,arr, 10);
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	f107 0114 	add.w	r1, r7, #20
 8007cde:	220a      	movs	r2, #10
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f9d5 	bl	8008090 <itoa>
	ssd1306_WriteString(arr,Font, White);
 8007ce6:	f107 0014 	add.w	r0, r7, #20
 8007cea:	2301      	movs	r3, #1
 8007cec:	1d3a      	adds	r2, r7, #4
 8007cee:	ca06      	ldmia	r2, {r1, r2}
 8007cf0:	f7ff ff0a 	bl	8007b08 <ssd1306_WriteString>

}
 8007cf4:	bf00      	nop
 8007cf6:	373c      	adds	r7, #60	; 0x3c
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd90      	pop	{r4, r7, pc}

08007cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007d02:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <HAL_MspInit+0x5c>)
 8007d04:	4b14      	ldr	r3, [pc, #80]	; (8007d58 <HAL_MspInit+0x5c>)
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	f043 0301 	orr.w	r3, r3, #1
 8007d0c:	6193      	str	r3, [r2, #24]
 8007d0e:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <HAL_MspInit+0x5c>)
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	60bb      	str	r3, [r7, #8]
 8007d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d1a:	4a0f      	ldr	r2, [pc, #60]	; (8007d58 <HAL_MspInit+0x5c>)
 8007d1c:	4b0e      	ldr	r3, [pc, #56]	; (8007d58 <HAL_MspInit+0x5c>)
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d24:	61d3      	str	r3, [r2, #28]
 8007d26:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <HAL_MspInit+0x5c>)
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <HAL_MspInit+0x60>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <HAL_MspInit+0x60>)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d4e:	bf00      	nop
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bc80      	pop	{r7}
 8007d56:	4770      	bx	lr
 8007d58:	40021000 	.word	0x40021000
 8007d5c:	40010000 	.word	0x40010000

08007d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08a      	sub	sp, #40	; 0x28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d68:	f107 0318 	add.w	r3, r7, #24
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	609a      	str	r2, [r3, #8]
 8007d74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a2f      	ldr	r2, [pc, #188]	; (8007e38 <HAL_I2C_MspInit+0xd8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d124      	bne.n	8007dca <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d80:	4a2e      	ldr	r2, [pc, #184]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007d82:	4b2e      	ldr	r3, [pc, #184]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f043 0308 	orr.w	r3, r3, #8
 8007d8a:	6193      	str	r3, [r2, #24]
 8007d8c:	4b2b      	ldr	r3, [pc, #172]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDA_Pin;
 8007d98:	23c0      	movs	r3, #192	; 0xc0
 8007d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d9c:	2312      	movs	r3, #18
 8007d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007da0:	2303      	movs	r3, #3
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007da4:	f107 0318 	add.w	r3, r7, #24
 8007da8:	4619      	mov	r1, r3
 8007daa:	4825      	ldr	r0, [pc, #148]	; (8007e40 <HAL_I2C_MspInit+0xe0>)
 8007dac:	f7f9 fb94 	bl	80014d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007db0:	4a22      	ldr	r2, [pc, #136]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007db2:	4b22      	ldr	r3, [pc, #136]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dba:	61d3      	str	r3, [r2, #28]
 8007dbc:	4b1f      	ldr	r3, [pc, #124]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007dc8:	e031      	b.n	8007e2e <HAL_I2C_MspInit+0xce>
  else if(hi2c->Instance==I2C2)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <HAL_I2C_MspInit+0xe4>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d12c      	bne.n	8007e2e <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dd4:	4a19      	ldr	r2, [pc, #100]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007dd6:	4b19      	ldr	r3, [pc, #100]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f043 0308 	orr.w	r3, r3, #8
 8007dde:	6193      	str	r3, [r2, #24]
 8007de0:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAX_SCK_Pin|MAX_SDA_Pin;
 8007dec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007df2:	2312      	movs	r3, #18
 8007df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007df6:	2303      	movs	r3, #3
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dfa:	f107 0318 	add.w	r3, r7, #24
 8007dfe:	4619      	mov	r1, r3
 8007e00:	480f      	ldr	r0, [pc, #60]	; (8007e40 <HAL_I2C_MspInit+0xe0>)
 8007e02:	f7f9 fb69 	bl	80014d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007e06:	4a0d      	ldr	r2, [pc, #52]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007e08:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e10:	61d3      	str	r3, [r2, #28]
 8007e12:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <HAL_I2C_MspInit+0xdc>)
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2100      	movs	r1, #0
 8007e22:	2021      	movs	r0, #33	; 0x21
 8007e24:	f7f9 fa99 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007e28:	2021      	movs	r0, #33	; 0x21
 8007e2a:	f7f9 fab2 	bl	8001392 <HAL_NVIC_EnableIRQ>
}
 8007e2e:	bf00      	nop
 8007e30:	3728      	adds	r7, #40	; 0x28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40005400 	.word	0x40005400
 8007e3c:	40021000 	.word	0x40021000
 8007e40:	40010c00 	.word	0x40010c00
 8007e44:	40005800 	.word	0x40005800

08007e48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a0f      	ldr	r2, [pc, #60]	; (8007e94 <HAL_RTC_MspInit+0x4c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d118      	bne.n	8007e8c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8007e5a:	f7fc f829 	bl	8003eb0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8007e5e:	4a0e      	ldr	r2, [pc, #56]	; (8007e98 <HAL_RTC_MspInit+0x50>)
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <HAL_RTC_MspInit+0x50>)
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e68:	61d3      	str	r3, [r2, #28]
 8007e6a:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <HAL_RTC_MspInit+0x50>)
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007e76:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <HAL_RTC_MspInit+0x54>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	2003      	movs	r0, #3
 8007e82:	f7f9 fa6a 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8007e86:	2003      	movs	r0, #3
 8007e88:	f7f9 fa83 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40002800 	.word	0x40002800
 8007e98:	40021000 	.word	0x40021000
 8007e9c:	4242043c 	.word	0x4242043c

08007ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a0d      	ldr	r2, [pc, #52]	; (8007ee4 <HAL_TIM_Base_MspInit+0x44>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d113      	bne.n	8007eda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007eb2:	4a0d      	ldr	r2, [pc, #52]	; (8007ee8 <HAL_TIM_Base_MspInit+0x48>)
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <HAL_TIM_Base_MspInit+0x48>)
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ebc:	6193      	str	r3, [r2, #24]
 8007ebe:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <HAL_TIM_Base_MspInit+0x48>)
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2100      	movs	r1, #0
 8007ece:	2019      	movs	r0, #25
 8007ed0:	f7f9 fa43 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007ed4:	2019      	movs	r0, #25
 8007ed6:	f7f9 fa5c 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40021000 	.word	0x40021000

08007eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007ef0:	e7fe      	b.n	8007ef0 <NMI_Handler+0x4>

08007ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ef6:	e7fe      	b.n	8007ef6 <HardFault_Handler+0x4>

08007ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007efc:	e7fe      	b.n	8007efc <MemManage_Handler+0x4>

08007efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007efe:	b480      	push	{r7}
 8007f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f02:	e7fe      	b.n	8007f02 <BusFault_Handler+0x4>

08007f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f08:	e7fe      	b.n	8007f08 <UsageFault_Handler+0x4>

08007f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f0e:	bf00      	nop
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bc80      	pop	{r7}
 8007f14:	4770      	bx	lr

08007f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f16:	b480      	push	{r7}
 8007f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f1a:	bf00      	nop
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr

08007f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f22:	b480      	push	{r7}
 8007f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f26:	bf00      	nop
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr

08007f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f32:	f7f9 f8ff 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8007f40:	4802      	ldr	r0, [pc, #8]	; (8007f4c <RTC_IRQHandler+0x10>)
 8007f42:	f7fd fb01 	bl	8005548 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8007f46:	bf00      	nop
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200015d0 	.word	0x200015d0

08007f50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007f54:	2001      	movs	r0, #1
 8007f56:	f7f9 fc31 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007f5a:	bf00      	nop
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007f62:	2002      	movs	r0, #2
 8007f64:	f7f9 fc2a 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007f68:	bf00      	nop
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007f70:	2008      	movs	r0, #8
 8007f72:	f7f9 fc23 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007f76:	bf00      	nop
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007f80:	4802      	ldr	r0, [pc, #8]	; (8007f8c <TIM1_UP_IRQHandler+0x10>)
 8007f82:	f7fd fbff 	bl	8005784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007f86:	bf00      	nop
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	200015e4 	.word	0x200015e4

08007f90 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8007f94:	4802      	ldr	r0, [pc, #8]	; (8007fa0 <I2C2_EV_IRQHandler+0x10>)
 8007f96:	f7fa f8bd 	bl	8002114 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8007f9a:	bf00      	nop
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	200005c4 	.word	0x200005c4

08007fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007fa8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007fac:	f7f9 fc06 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007fb0:	bf00      	nop
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007fb8:	bf00      	nop
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bc80      	pop	{r7}
 8007fbe:	4770      	bx	lr

08007fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007fc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007fc2:	e003      	b.n	8007fcc <LoopCopyDataInit>

08007fc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007fc4:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007fc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007fc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007fca:	3104      	adds	r1, #4

08007fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007fcc:	480a      	ldr	r0, [pc, #40]	; (8007ff8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007fd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007fd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007fd4:	d3f6      	bcc.n	8007fc4 <CopyDataInit>
  ldr r2, =_sbss
 8007fd6:	4a0a      	ldr	r2, [pc, #40]	; (8008000 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007fd8:	e002      	b.n	8007fe0 <LoopFillZerobss>

08007fda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007fda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007fdc:	f842 3b04 	str.w	r3, [r2], #4

08007fe0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007fe0:	4b08      	ldr	r3, [pc, #32]	; (8008004 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007fe2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007fe4:	d3f9      	bcc.n	8007fda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007fe6:	f7ff ffe5 	bl	8007fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fea:	f000 f815 	bl	8008018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007fee:	f7fe fc9d 	bl	800692c <main>
  bx lr
 8007ff2:	4770      	bx	lr
  ldr r3, =_sidata
 8007ff4:	08009ea0 	.word	0x08009ea0
  ldr r0, =_sdata
 8007ff8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007ffc:	20000124 	.word	0x20000124
  ldr r2, =_sbss
 8008000:	20000124 	.word	0x20000124
  ldr r3, = _ebss
 8008004:	20001644 	.word	0x20001644

08008008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008008:	e7fe      	b.n	8008008 <ADC1_2_IRQHandler>
	...

0800800c <__errno>:
 800800c:	4b01      	ldr	r3, [pc, #4]	; (8008014 <__errno+0x8>)
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	2000002c 	.word	0x2000002c

08008018 <__libc_init_array>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	2500      	movs	r5, #0
 800801c:	4e0c      	ldr	r6, [pc, #48]	; (8008050 <__libc_init_array+0x38>)
 800801e:	4c0d      	ldr	r4, [pc, #52]	; (8008054 <__libc_init_array+0x3c>)
 8008020:	1ba4      	subs	r4, r4, r6
 8008022:	10a4      	asrs	r4, r4, #2
 8008024:	42a5      	cmp	r5, r4
 8008026:	d109      	bne.n	800803c <__libc_init_array+0x24>
 8008028:	f000 f97e 	bl	8008328 <_init>
 800802c:	2500      	movs	r5, #0
 800802e:	4e0a      	ldr	r6, [pc, #40]	; (8008058 <__libc_init_array+0x40>)
 8008030:	4c0a      	ldr	r4, [pc, #40]	; (800805c <__libc_init_array+0x44>)
 8008032:	1ba4      	subs	r4, r4, r6
 8008034:	10a4      	asrs	r4, r4, #2
 8008036:	42a5      	cmp	r5, r4
 8008038:	d105      	bne.n	8008046 <__libc_init_array+0x2e>
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008040:	4798      	blx	r3
 8008042:	3501      	adds	r5, #1
 8008044:	e7ee      	b.n	8008024 <__libc_init_array+0xc>
 8008046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800804a:	4798      	blx	r3
 800804c:	3501      	adds	r5, #1
 800804e:	e7f2      	b.n	8008036 <__libc_init_array+0x1e>
 8008050:	08009e98 	.word	0x08009e98
 8008054:	08009e98 	.word	0x08009e98
 8008058:	08009e98 	.word	0x08009e98
 800805c:	08009e9c 	.word	0x08009e9c

08008060 <__itoa>:
 8008060:	1e93      	subs	r3, r2, #2
 8008062:	2b22      	cmp	r3, #34	; 0x22
 8008064:	b510      	push	{r4, lr}
 8008066:	460c      	mov	r4, r1
 8008068:	d904      	bls.n	8008074 <__itoa+0x14>
 800806a:	2300      	movs	r3, #0
 800806c:	461c      	mov	r4, r3
 800806e:	700b      	strb	r3, [r1, #0]
 8008070:	4620      	mov	r0, r4
 8008072:	bd10      	pop	{r4, pc}
 8008074:	2a0a      	cmp	r2, #10
 8008076:	d109      	bne.n	800808c <__itoa+0x2c>
 8008078:	2800      	cmp	r0, #0
 800807a:	da07      	bge.n	800808c <__itoa+0x2c>
 800807c:	232d      	movs	r3, #45	; 0x2d
 800807e:	700b      	strb	r3, [r1, #0]
 8008080:	2101      	movs	r1, #1
 8008082:	4240      	negs	r0, r0
 8008084:	4421      	add	r1, r4
 8008086:	f000 f80d 	bl	80080a4 <__utoa>
 800808a:	e7f1      	b.n	8008070 <__itoa+0x10>
 800808c:	2100      	movs	r1, #0
 800808e:	e7f9      	b.n	8008084 <__itoa+0x24>

08008090 <itoa>:
 8008090:	f7ff bfe6 	b.w	8008060 <__itoa>

08008094 <memset>:
 8008094:	4603      	mov	r3, r0
 8008096:	4402      	add	r2, r0
 8008098:	4293      	cmp	r3, r2
 800809a:	d100      	bne.n	800809e <memset+0xa>
 800809c:	4770      	bx	lr
 800809e:	f803 1b01 	strb.w	r1, [r3], #1
 80080a2:	e7f9      	b.n	8008098 <memset+0x4>

080080a4 <__utoa>:
 80080a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080a6:	b08b      	sub	sp, #44	; 0x2c
 80080a8:	4603      	mov	r3, r0
 80080aa:	460f      	mov	r7, r1
 80080ac:	466d      	mov	r5, sp
 80080ae:	4c1c      	ldr	r4, [pc, #112]	; (8008120 <__utoa+0x7c>)
 80080b0:	f104 0e20 	add.w	lr, r4, #32
 80080b4:	462e      	mov	r6, r5
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	6861      	ldr	r1, [r4, #4]
 80080ba:	3408      	adds	r4, #8
 80080bc:	c603      	stmia	r6!, {r0, r1}
 80080be:	4574      	cmp	r4, lr
 80080c0:	4635      	mov	r5, r6
 80080c2:	d1f7      	bne.n	80080b4 <__utoa+0x10>
 80080c4:	7921      	ldrb	r1, [r4, #4]
 80080c6:	6820      	ldr	r0, [r4, #0]
 80080c8:	7131      	strb	r1, [r6, #4]
 80080ca:	1e91      	subs	r1, r2, #2
 80080cc:	2922      	cmp	r1, #34	; 0x22
 80080ce:	6030      	str	r0, [r6, #0]
 80080d0:	f04f 0100 	mov.w	r1, #0
 80080d4:	d904      	bls.n	80080e0 <__utoa+0x3c>
 80080d6:	7039      	strb	r1, [r7, #0]
 80080d8:	460f      	mov	r7, r1
 80080da:	4638      	mov	r0, r7
 80080dc:	b00b      	add	sp, #44	; 0x2c
 80080de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e0:	1e78      	subs	r0, r7, #1
 80080e2:	4606      	mov	r6, r0
 80080e4:	fbb3 f5f2 	udiv	r5, r3, r2
 80080e8:	fb02 3315 	mls	r3, r2, r5, r3
 80080ec:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80080f0:	4473      	add	r3, lr
 80080f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80080f6:	1c4c      	adds	r4, r1, #1
 80080f8:	f806 3f01 	strb.w	r3, [r6, #1]!
 80080fc:	462b      	mov	r3, r5
 80080fe:	b965      	cbnz	r5, 800811a <__utoa+0x76>
 8008100:	553d      	strb	r5, [r7, r4]
 8008102:	187a      	adds	r2, r7, r1
 8008104:	1acc      	subs	r4, r1, r3
 8008106:	42a3      	cmp	r3, r4
 8008108:	dae7      	bge.n	80080da <__utoa+0x36>
 800810a:	7844      	ldrb	r4, [r0, #1]
 800810c:	7815      	ldrb	r5, [r2, #0]
 800810e:	3301      	adds	r3, #1
 8008110:	f800 5f01 	strb.w	r5, [r0, #1]!
 8008114:	f802 4901 	strb.w	r4, [r2], #-1
 8008118:	e7f4      	b.n	8008104 <__utoa+0x60>
 800811a:	4621      	mov	r1, r4
 800811c:	e7e2      	b.n	80080e4 <__utoa+0x40>
 800811e:	bf00      	nop
 8008120:	08009e6c 	.word	0x08009e6c

08008124 <sqrt>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	b08b      	sub	sp, #44	; 0x2c
 800812a:	4604      	mov	r4, r0
 800812c:	460d      	mov	r5, r1
 800812e:	f000 f84d 	bl	80081cc <__ieee754_sqrt>
 8008132:	4b24      	ldr	r3, [pc, #144]	; (80081c4 <sqrt+0xa0>)
 8008134:	4680      	mov	r8, r0
 8008136:	f993 a000 	ldrsb.w	sl, [r3]
 800813a:	4689      	mov	r9, r1
 800813c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008140:	d02b      	beq.n	800819a <sqrt+0x76>
 8008142:	4622      	mov	r2, r4
 8008144:	462b      	mov	r3, r5
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 fc53 	bl	80009f4 <__aeabi_dcmpun>
 800814e:	4683      	mov	fp, r0
 8008150:	bb18      	cbnz	r0, 800819a <sqrt+0x76>
 8008152:	2600      	movs	r6, #0
 8008154:	2700      	movs	r7, #0
 8008156:	4632      	mov	r2, r6
 8008158:	463b      	mov	r3, r7
 800815a:	4620      	mov	r0, r4
 800815c:	4629      	mov	r1, r5
 800815e:	f7f8 fc21 	bl	80009a4 <__aeabi_dcmplt>
 8008162:	b1d0      	cbz	r0, 800819a <sqrt+0x76>
 8008164:	2301      	movs	r3, #1
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4b17      	ldr	r3, [pc, #92]	; (80081c8 <sqrt+0xa4>)
 800816a:	f8cd b020 	str.w	fp, [sp, #32]
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008174:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008178:	f1ba 0f00 	cmp.w	sl, #0
 800817c:	d112      	bne.n	80081a4 <sqrt+0x80>
 800817e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008182:	4668      	mov	r0, sp
 8008184:	f000 f8ce 	bl	8008324 <matherr>
 8008188:	b1b8      	cbz	r0, 80081ba <sqrt+0x96>
 800818a:	9b08      	ldr	r3, [sp, #32]
 800818c:	b11b      	cbz	r3, 8008196 <sqrt+0x72>
 800818e:	f7ff ff3d 	bl	800800c <__errno>
 8008192:	9b08      	ldr	r3, [sp, #32]
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800819a:	4640      	mov	r0, r8
 800819c:	4649      	mov	r1, r9
 800819e:	b00b      	add	sp, #44	; 0x2c
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	4632      	mov	r2, r6
 80081a6:	463b      	mov	r3, r7
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 fab2 	bl	8000714 <__aeabi_ddiv>
 80081b0:	f1ba 0f02 	cmp.w	sl, #2
 80081b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081b8:	d1e3      	bne.n	8008182 <sqrt+0x5e>
 80081ba:	f7ff ff27 	bl	800800c <__errno>
 80081be:	2321      	movs	r3, #33	; 0x21
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	e7e2      	b.n	800818a <sqrt+0x66>
 80081c4:	20000120 	.word	0x20000120
 80081c8:	08009e91 	.word	0x08009e91

080081cc <__ieee754_sqrt>:
 80081cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d0:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8008320 <__ieee754_sqrt+0x154>
 80081d4:	4606      	mov	r6, r0
 80081d6:	ea3e 0e01 	bics.w	lr, lr, r1
 80081da:	460d      	mov	r5, r1
 80081dc:	4607      	mov	r7, r0
 80081de:	460a      	mov	r2, r1
 80081e0:	460c      	mov	r4, r1
 80081e2:	4603      	mov	r3, r0
 80081e4:	d10f      	bne.n	8008206 <__ieee754_sqrt+0x3a>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	f7f8 f969 	bl	80004c0 <__aeabi_dmul>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4630      	mov	r0, r6
 80081f4:	4629      	mov	r1, r5
 80081f6:	f7f7 ffb1 	bl	800015c <__adddf3>
 80081fa:	4606      	mov	r6, r0
 80081fc:	460d      	mov	r5, r1
 80081fe:	4630      	mov	r0, r6
 8008200:	4629      	mov	r1, r5
 8008202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008206:	2900      	cmp	r1, #0
 8008208:	dc0e      	bgt.n	8008228 <__ieee754_sqrt+0x5c>
 800820a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800820e:	ea5e 0707 	orrs.w	r7, lr, r7
 8008212:	d0f4      	beq.n	80081fe <__ieee754_sqrt+0x32>
 8008214:	b141      	cbz	r1, 8008228 <__ieee754_sqrt+0x5c>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	f7f7 ff9d 	bl	8000158 <__aeabi_dsub>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	f7f8 fa77 	bl	8000714 <__aeabi_ddiv>
 8008226:	e7e8      	b.n	80081fa <__ieee754_sqrt+0x2e>
 8008228:	1512      	asrs	r2, r2, #20
 800822a:	d10c      	bne.n	8008246 <__ieee754_sqrt+0x7a>
 800822c:	2c00      	cmp	r4, #0
 800822e:	d06e      	beq.n	800830e <__ieee754_sqrt+0x142>
 8008230:	2100      	movs	r1, #0
 8008232:	02e6      	lsls	r6, r4, #11
 8008234:	d56f      	bpl.n	8008316 <__ieee754_sqrt+0x14a>
 8008236:	1e48      	subs	r0, r1, #1
 8008238:	1a12      	subs	r2, r2, r0
 800823a:	f1c1 0020 	rsb	r0, r1, #32
 800823e:	fa23 f000 	lsr.w	r0, r3, r0
 8008242:	4304      	orrs	r4, r0
 8008244:	408b      	lsls	r3, r1
 8008246:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800824a:	07d5      	lsls	r5, r2, #31
 800824c:	f04f 0500 	mov.w	r5, #0
 8008250:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008254:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008258:	bf42      	ittt	mi
 800825a:	0064      	lslmi	r4, r4, #1
 800825c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8008260:	005b      	lslmi	r3, r3, #1
 8008262:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8008266:	1050      	asrs	r0, r2, #1
 8008268:	4421      	add	r1, r4
 800826a:	2216      	movs	r2, #22
 800826c:	462c      	mov	r4, r5
 800826e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	19a7      	adds	r7, r4, r6
 8008276:	428f      	cmp	r7, r1
 8008278:	bfde      	ittt	le
 800827a:	1bc9      	suble	r1, r1, r7
 800827c:	19bc      	addle	r4, r7, r6
 800827e:	19ad      	addle	r5, r5, r6
 8008280:	0049      	lsls	r1, r1, #1
 8008282:	3a01      	subs	r2, #1
 8008284:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008288:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800828c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008290:	d1f0      	bne.n	8008274 <__ieee754_sqrt+0xa8>
 8008292:	f04f 0e20 	mov.w	lr, #32
 8008296:	4694      	mov	ip, r2
 8008298:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800829c:	42a1      	cmp	r1, r4
 800829e:	eb06 070c 	add.w	r7, r6, ip
 80082a2:	dc02      	bgt.n	80082aa <__ieee754_sqrt+0xde>
 80082a4:	d112      	bne.n	80082cc <__ieee754_sqrt+0x100>
 80082a6:	429f      	cmp	r7, r3
 80082a8:	d810      	bhi.n	80082cc <__ieee754_sqrt+0x100>
 80082aa:	2f00      	cmp	r7, #0
 80082ac:	eb07 0c06 	add.w	ip, r7, r6
 80082b0:	da34      	bge.n	800831c <__ieee754_sqrt+0x150>
 80082b2:	f1bc 0f00 	cmp.w	ip, #0
 80082b6:	db31      	blt.n	800831c <__ieee754_sqrt+0x150>
 80082b8:	f104 0801 	add.w	r8, r4, #1
 80082bc:	1b09      	subs	r1, r1, r4
 80082be:	4644      	mov	r4, r8
 80082c0:	429f      	cmp	r7, r3
 80082c2:	bf88      	it	hi
 80082c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80082c8:	1bdb      	subs	r3, r3, r7
 80082ca:	4432      	add	r2, r6
 80082cc:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 80082d0:	f1be 0e01 	subs.w	lr, lr, #1
 80082d4:	4439      	add	r1, r7
 80082d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80082de:	d1dd      	bne.n	800829c <__ieee754_sqrt+0xd0>
 80082e0:	430b      	orrs	r3, r1
 80082e2:	d006      	beq.n	80082f2 <__ieee754_sqrt+0x126>
 80082e4:	1c54      	adds	r4, r2, #1
 80082e6:	bf0b      	itete	eq
 80082e8:	4672      	moveq	r2, lr
 80082ea:	3201      	addne	r2, #1
 80082ec:	3501      	addeq	r5, #1
 80082ee:	f022 0201 	bicne.w	r2, r2, #1
 80082f2:	106b      	asrs	r3, r5, #1
 80082f4:	0852      	lsrs	r2, r2, #1
 80082f6:	07e9      	lsls	r1, r5, #31
 80082f8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80082fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008300:	bf48      	it	mi
 8008302:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008306:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800830a:	4616      	mov	r6, r2
 800830c:	e777      	b.n	80081fe <__ieee754_sqrt+0x32>
 800830e:	0adc      	lsrs	r4, r3, #11
 8008310:	3a15      	subs	r2, #21
 8008312:	055b      	lsls	r3, r3, #21
 8008314:	e78a      	b.n	800822c <__ieee754_sqrt+0x60>
 8008316:	0064      	lsls	r4, r4, #1
 8008318:	3101      	adds	r1, #1
 800831a:	e78a      	b.n	8008232 <__ieee754_sqrt+0x66>
 800831c:	46a0      	mov	r8, r4
 800831e:	e7cd      	b.n	80082bc <__ieee754_sqrt+0xf0>
 8008320:	7ff00000 	.word	0x7ff00000

08008324 <matherr>:
 8008324:	2000      	movs	r0, #0
 8008326:	4770      	bx	lr

08008328 <_init>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr

08008334 <_fini>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr
